{"version":3,"sources":["../src/data/enrichers/onChainPoolDataEnricher.ts","../src/entities/token.ts","../src/utils/constants.ts","../src/entities/tokenAmount.ts","../src/utils/math.ts","../src/types.ts","../src/utils/helpers.ts","../src/utils/pool.ts","../src/abi/balancerQueries.ts","../src/abi/balancerRelayer.ts","../src/abi/batchRelayerLibrary.ts","../src/abi/vault.ts","../src/abi/composableStablePoolV5.ts","../src/abi/fxPool.ts","../src/abi/GyroEV2.ts","../src/abi/liquidityBootstrappingPool.ts","../src/abi/managedPool.ts","../src/abi/metaStablePool.ts","../src/abi/phantomStablePool.ts","../src/abi/weightedFactoryV4.ts","../src/abi/weightedPool.ts","../src/abi/linearPool.ts","../src/abi/stablePool.ts","../src/data/onChainPoolDataViaReadContract.ts","../src/utils/fetch.ts","../src/data/providers/subgraphPoolProvider.ts","../src/utils/poolTypeMapper.ts","../src/data/providers/balancer-api/modules/pool-state/index.ts","../src/data/providers/balancer-api/client/index.ts","../src/data/providers/balancer-api/modules/nested-pool-state/index.ts","../src/data/providers/balancer-api/index.ts","../src/entities/addLiquidityNested/index.ts","../src/entities/relayer/index.ts","../src/entities/relayer/authorization.ts","../src/entities/encoders/weighted.ts","../src/entities/addLiquidity/types.ts","../src/entities/removeLiquidity/types.ts","../src/entities/encoders/index.ts","../src/entities/encoders/composableStable.ts","../src/entities/utils/replaceWrapped.ts","../src/entities/addLiquidityNested/encodeCalls.ts","../src/entities/addLiquidityNested/doAddLiquidityNestedQuery.ts","../src/entities/types.ts","../src/entities/addLiquidityNested/getQueryCallsAttributes.ts","../src/entities/utils/doAddLiquidityQuery.ts","../src/entities/utils/getAmounts.ts","../src/entities/utils/getSortedTokens.ts","../src/entities/utils/parseAddLiquidityArgs.ts","../src/entities/utils/constraintValidation.ts","../src/entities/addLiquidityNested/validateInputs.ts","../src/entities/removeLiquidityNested/index.ts","../src/entities/removeLiquidityNested/doRemoveLiquidityNestedQuery.ts","../src/entities/removeLiquidityNested/getQueryCallsAttributes.ts","../src/entities/removeLiquidityNested/encodeCalls.ts","../src/entities/removeLiquidityNested/getPeekCalls.ts","../src/entities/removeLiquidityNested/validateInputs.ts","../src/entities/addLiquidity/addLiquidityV2/composableStable/addLiquidityComposableStable.ts","../src/entities/addLiquidity/addLiquidityV2/weighted/addLiquidityWeighted.ts","../src/entities/addLiquidity/addLiquidityV2/index.ts","../src/entities/addLiquidity/addLiquidityV3.ts","../src/entities/utils/areTokensInArray.ts","../src/entities/inputValidator/utils/validateTokens.ts","../src/entities/inputValidator/composableStable/inputValidatorComposableStable.ts","../src/entities/inputValidator/gyro/inputValidatorGyro.ts","../src/entities/inputValidator/weighted/inputValidatorWeighted.ts","../src/entities/inputValidator/inputValidator.ts","../src/entities/addLiquidity/index.ts","../src/entities/createPool/createPoolV2/composableStable/createPoolComposableStable.ts","../src/abi/composableStableFactoryV5.ts","../src/entities/utils/getRandomBytes32.ts","../src/entities/createPool/createPoolV2/weighted/createPoolWeighted.ts","../src/entities/createPool/createPoolV2/index.ts","../src/entities/createPool/createPoolV3.ts","../src/entities/createPool/index.ts","../src/entities/initPool/initPoolV2/composableStable/initPoolComposableStable.ts","../src/entities/initPool/initPoolV2/weighted/initPoolWeighted.ts","../src/entities/initPool/initPoolV2/index.ts","../src/entities/initPool/initPoolV3.ts","../src/entities/initPool/index.ts","../src/entities/path.ts","../src/entities/priceImpact/index.ts","../src/entities/priceImpactAmount.ts","../src/entities/removeLiquidity/removeLiquidityV2/weighted/removeLiquidityWeighted.ts","../src/entities/utils/parseRemoveLiquidityArgs.ts","../src/entities/utils/doRemoveLiquidityQuery.ts","../src/entities/removeLiquidity/removeLiquidityV2/composableStable/removeLiquidityComposableStable.ts","../src/entities/removeLiquidity/removeLiquidityV2/index.ts","../src/entities/removeLiquidity/removeLiquidityV3.ts","../src/entities/removeLiquidity/index.ts","../src/entities/utils/doSingleSwapQuery.ts","../src/entities/swap.ts","../src/entities/slippage.ts","../src/utils/logger.ts","../src/pathGraph/pathGraph.ts","../src/router.ts","../src/entities/pools/weighted/weightedPool.ts","../src/entities/pools/weighted/weightedMath.ts","../src/entities/pools/weighted/weightedFactory.ts","../src/entities/pools/stable/stablePool.ts","../src/entities/pools/stable/stableMath.ts","../src/entities/pools/stable/stableFactory.ts","../src/entities/pools/metastable/metastablePool.ts","../src/entities/pools/metastable/metastableFactory.ts","../src/entities/pools/linear/linearPool.ts","../src/entities/pools/linear/linearMath.ts","../src/entities/pools/linear/linearFactory.ts","../src/entities/pools/fx/fxPool.ts","../src/entities/pools/fx/fxMath.ts","../src/entities/pools/fx/helpers.ts","../src/entities/pools/fx/fxPoolToken.ts","../src/entities/pools/fx/fxFactory.ts","../src/entities/pools/gyro2/gyro2Pool.ts","../src/utils/gyroHelpers/math.ts","../src/entities/pools/gyro2/gyro2Math.ts","../src/entities/pools/gyro2/gyro2Factory.ts","../src/entities/pools/gyro3/gyro3Pool.ts","../src/entities/pools/gyro3/constants.ts","../src/entities/pools/gyro3/helpers.ts","../src/entities/pools/gyro3/gyro3Math.ts","../src/entities/pools/gyro3/gyro3Factory.ts","../src/entities/pools/gyroE/gyroEPool.ts","../src/entities/pools/gyroE/constants.ts","../src/entities/pools/gyroE/gyroEMathHelpers.ts","../src/entities/pools/gyroE/gyroEMath.ts","../src/entities/pools/gyroE/gyroEFactory.ts","../src/entities/pools/parser.ts","../src/data/poolDataService.ts","../src/sor.ts","../src/static.ts"],"names":["ChainId","PoolType","SwapKind","abi","fetch","encodeFunctionData","concat","pad","toHex","AddLiquidityKind","RemoveLiquidityKind","WeightedPoolJoinKind","WeightedPoolExitKind","encodeAbiParameters","createPublicClient","http","PoolKind","decodeAbiParameters","decodeFunctionResult","getQueryCallsAttributes","encodeCalls","validateInputs","call","parseEther","formatUnits","deltas","deltaBPTs","getContract","formatEther","parseUnits","_calcOutGivenIn","_calcInGivenOut","t","fees","maxAmount","_calculateInvariant"],"mappings":"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","sourcesContent":["import {\n    Address,\n    createPublicClient,\n    formatUnits,\n    http,\n    PublicClient,\n} from 'viem';\nimport {\n    GetPoolsResponse,\n    PoolDataEnricher,\n    RawPool,\n    RawPoolTokenWithRate,\n    RawWeightedPoolToken,\n    HumanAmount,\n} from '../types';\nimport { CHAINS } from '../../utils';\nimport { SwapOptions } from '../../types';\nimport { fetchAdditionalPoolData } from '../onChainPoolDataViaReadContract';\n\nexport interface OnChainPoolData {\n    id: string;\n    balances: readonly bigint[];\n    totalSupply: bigint;\n    swapFee?: bigint;\n\n    amp?: bigint;\n    weights?: readonly bigint[];\n    wrappedTokenRate?: bigint;\n    scalingFactors?: readonly bigint[];\n    tokenRates?: readonly bigint[];\n    linearTargets?: readonly bigint[];\n    poolRate?: bigint;\n\n    isPaused: boolean;\n    inRecoveryMode: boolean;\n}\n\nexport class OnChainPoolDataEnricher implements PoolDataEnricher {\n    private readonly client: PublicClient;\n\n    constructor(\n        private readonly chainId: number,\n        private readonly rpcUrl: string,\n        private readonly batchSize: number,\n        private readonly vault: Address,\n    ) {\n        this.client = createPublicClient({\n            transport: http(this.rpcUrl, { timeout: 60_000 }),\n            chain: CHAINS[this.chainId],\n        });\n    }\n\n    public async fetchAdditionalPoolData(\n        data: GetPoolsResponse,\n        options: SwapOptions,\n    ): Promise<OnChainPoolData[]> {\n        return fetchAdditionalPoolData(\n            this.vault,\n            data.pools,\n            this.client,\n            options,\n            this.batchSize,\n        );\n    }\n\n    public enrichPoolsWithData(\n        pools: RawPool[],\n        additionalPoolData: OnChainPoolData[],\n    ): RawPool[] {\n        return pools.map((pool) => {\n            const data = additionalPoolData.find((item) => item.id === pool.id);\n\n            return {\n                ...pool,\n                tokens: pool.tokens\n                    .sort((a, b) => a.index - b.index)\n                    .map((token) => {\n                        return {\n                            ...token,\n                            balance:\n                                data?.balances && data.balances.length > 0\n                                    ? (formatUnits(\n                                          data.balances[token.index],\n                                          token.decimals,\n                                      ) as HumanAmount)\n                                    : token.balance,\n                            priceRate: this.getPoolTokenRate({\n                                pool,\n                                token: token as RawPoolTokenWithRate,\n                                data,\n                                index: token.index,\n                            }),\n                            weight: data?.weights\n                                ? formatUnits(data.weights[token.index], 18)\n                                : (token as RawWeightedPoolToken).weight,\n                        };\n                    }),\n                totalShares: data?.totalSupply\n                    ? (formatUnits(data.totalSupply, 18) as HumanAmount)\n                    : pool.totalShares,\n                amp: data?.amp\n                    ? formatUnits(data.amp, 3)\n                    : 'amp' in pool\n                      ? pool.amp\n                      : undefined,\n                swapFee: data?.swapFee\n                    ? (formatUnits(data.swapFee, 18) as HumanAmount)\n                    : pool.swapFee,\n                tokenRates: data?.tokenRates\n                    ? data.tokenRates.map(\n                          (tokenRate) =>\n                              formatUnits(tokenRate, 18) as HumanAmount,\n                      )\n                    : undefined,\n                lowerTarget: data?.linearTargets\n                    ? (formatUnits(data.linearTargets[0], 18) as HumanAmount)\n                    : 'lowerTarget' in pool\n                      ? pool.lowerTarget\n                      : undefined,\n                upperTarget: data?.linearTargets\n                    ? (formatUnits(data.linearTargets[1], 18) as HumanAmount)\n                    : 'upperTarget' in pool\n                      ? pool.upperTarget\n                      : undefined,\n                inRecoveryMode: data?.inRecoveryMode || false,\n                isPaused: data?.isPaused || false,\n            };\n        });\n    }\n\n    private getPoolTokenRate({\n        pool,\n        token,\n        data,\n        index,\n    }: {\n        pool: RawPool;\n        token: RawPoolTokenWithRate;\n        data?: OnChainPoolData;\n        index: number;\n    }): string {\n        if (\n            data?.wrappedTokenRate &&\n            'wrappedIndex' in pool &&\n            pool.wrappedIndex === index\n        ) {\n            return formatUnits(data.wrappedTokenRate, 18);\n        }\n\n        if (data?.scalingFactors) {\n            const decimalsDiff = 18 - token.decimals;\n            return formatUnits(data.scalingFactors[index], 18 + decimalsDiff);\n        }\n\n        return token.priceRate;\n    }\n}\n","import { Address } from 'viem';\nimport { InputToken } from '../types';\nexport class Token {\n    public readonly chainId: number;\n    public readonly address: Address;\n    public readonly decimals: number;\n    public readonly symbol?: string;\n    public readonly name?: string;\n    public readonly wrapped: Address;\n\n    public constructor(\n        chainId: number,\n        address: Address,\n        decimals: number,\n        symbol?: string,\n        name?: string,\n        wrapped?: Address,\n    ) {\n        this.chainId = chainId;\n        // Addresses are always lowercased for speed\n        this.address = address.toLowerCase() as Address;\n        this.decimals = decimals;\n        this.symbol = symbol;\n        this.name = name;\n        this.wrapped = (\n            wrapped ? wrapped.toLowerCase() : address.toLowerCase()\n        ) as Address;\n    }\n\n    public isEqual(token: Token) {\n        return this.chainId === token.chainId && this.address === token.address;\n    }\n\n    public isUnderlyingEqual(token: Token) {\n        return this.chainId === token.chainId && this.wrapped === token.wrapped;\n    }\n\n    public isSameAddress(address: Address) {\n        return this.address === address.toLowerCase();\n    }\n\n    public toInputToken(): InputToken {\n        return {\n            address: this.address,\n            decimals: this.decimals,\n        };\n    }\n}\n","import { Address, Chain } from 'viem';\nimport { Token } from '../entities/token';\nimport {\n    arbitrum,\n    avalanche,\n    baseGoerli,\n    bsc,\n    gnosis,\n    goerli,\n    mainnet,\n    optimism,\n    polygon,\n    polygonZkEvm,\n    zkSync,\n    zkSyncTestnet,\n    fantom,\n} from 'viem/chains';\n\nexport const ZERO_ADDRESS: Address =\n    '0x0000000000000000000000000000000000000000';\nexport const NATIVE_ADDRESS: Address =\n    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\nexport const MAX_UINT112 = 5192296858534827628530496329220095n;\nexport const MAX_UINT256 =\n    115792089237316195423570985008687907853269984665640564039457584007913129639935n;\nexport const PREMINTED_STABLE_BPT = 2596148429267413814265248164610048n; // 2**111\n\nexport const DECIMAL_SCALES = {\n    0: 1n,\n    1: 10n,\n    2: 100n,\n    3: 1000n,\n    4: 10000n,\n    5: 100000n,\n    6: 1000000n,\n    7: 10000000n,\n    8: 100000000n,\n    9: 1000000000n,\n    10: 10000000000n,\n    11: 100000000000n,\n    12: 1000000000000n,\n    13: 10000000000000n,\n    14: 100000000000000n,\n    15: 1000000000000000n,\n    16: 10000000000000000n,\n    17: 100000000000000000n,\n    18: 1000000000000000000n,\n};\n\nexport const SECONDS_PER_YEAR = 31536000n;\n\nexport enum ChainId {\n    MAINNET = 1,\n    GOERLI = 5,\n    OPTIMISM = 10,\n    BSC = 56,\n    GNOSIS_CHAIN = 100,\n    POLYGON = 137,\n    ZKSYNC_TESTNET = 280,\n    ZKSYNC = 324,\n    ZKEVM = 1101,\n    ARBITRUM_ONE = 42161,\n    AVALANCHE = 43114,\n    BASE_GOERLI = 84531,\n    FANTOM = 250,\n}\n\nexport const CHAINS: Record<number, Chain> = {\n    [ChainId.MAINNET]: mainnet,\n    [ChainId.GOERLI]: goerli,\n    [ChainId.OPTIMISM]: optimism,\n    [ChainId.BSC]: bsc,\n    [ChainId.GNOSIS_CHAIN]: gnosis,\n    [ChainId.POLYGON]: polygon,\n    [ChainId.ZKSYNC_TESTNET]: zkSyncTestnet,\n    [ChainId.ZKSYNC]: zkSync,\n    [ChainId.ZKEVM]: polygonZkEvm,\n    [ChainId.ARBITRUM_ONE]: arbitrum,\n    [ChainId.AVALANCHE]: avalanche,\n    [ChainId.BASE_GOERLI]: baseGoerli,\n    [ChainId.FANTOM]: fantom,\n};\n\nexport const SUBGRAPH_URLS = {\n    [ChainId.MAINNET]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n    [ChainId.GOERLI]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n    [ChainId.OPTIMISM]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-optimism-v2',\n    [ChainId.GNOSIS_CHAIN]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gnosis-chain-v2',\n    [ChainId.POLYGON]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-v2',\n    [ChainId.ZKSYNC_TESTNET]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-zktestnet-v2',\n    [ChainId.ZKSYNC]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-zksync-v2',\n    [ChainId.ZKEVM]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-zkevm-v2',\n    [ChainId.ARBITRUM_ONE]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2',\n    [ChainId.AVALANCHE]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-avalanche-v2',\n    [ChainId.BASE_GOERLI]:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-base-goerli-v2',\n    [ChainId.FANTOM]:\n        'https://api.thegraph.com/subgraphs/name/beethovenxfi/beethovenx-v2-fantom',\n};\n\nexport const BATCHSIZE: Record<number, number> = {\n    [ChainId.ARBITRUM_ONE]: 800,\n    [ChainId.AVALANCHE]: 800,\n    [ChainId.GNOSIS_CHAIN]: 800,\n    [ChainId.MAINNET]: 800,\n    [ChainId.OPTIMISM]: 800,\n    [ChainId.POLYGON]: 800,\n    [ChainId.ZKEVM]: 128,\n    [ChainId.FANTOM]: 128,\n};\n\nexport const BALANCER_VAULT: Address =\n    '0xBA12222222228d8Ba445958a75a0704d566BF2C8';\n\nexport const BALANCER_RELAYER: Record<number, Address> = {\n    [ChainId.MAINNET]: '0x35Cea9e57A393ac66Aaa7E25C391D52C74B5648f',\n};\n\n/**\n * Deployment Addresses\n * Source: https://docs.balancer.fi/reference/contracts\n */\n\nexport const VAULT: Record<number, Address> = {\n    [ChainId.ARBITRUM_ONE]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.AVALANCHE]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.GNOSIS_CHAIN]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.MAINNET]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.OPTIMISM]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.POLYGON]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.ZKEVM]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.FANTOM]: '0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce',\n};\n\nexport const BALANCER_QUERIES: Record<number, Address> = {\n    [ChainId.ARBITRUM_ONE]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.AVALANCHE]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.GNOSIS_CHAIN]: '0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e',\n    [ChainId.MAINNET]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.OPTIMISM]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.POLYGON]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.ZKEVM]: '0x809b79b53f18e9bc08a961ed4678b901ac93213a',\n    [ChainId.FANTOM]: '0x1B0A42663DF1edeA171cD8732d288a81EFfF6d23',\n};\n\nexport const WEIGHTED_POOL_FACTORY: Record<number, Address> = {\n    [ChainId.ARBITRUM_ONE]: '0xc7e5ed1054a24ef31d827e6f86caa58b3bc168d7',\n    [ChainId.AVALANCHE]: '0x230a59f4d9adc147480f03b0d3fffecd56c3289a',\n    [ChainId.GNOSIS_CHAIN]: '0x6cad2ea22bfa7f4c14aae92e47f510cd5c509bc7',\n    [ChainId.MAINNET]: '0x897888115ada5773e02aa29f775430bfb5f34c51',\n    [ChainId.OPTIMISM]: '0x230a59f4d9adc147480f03b0d3fffecd56c3289a',\n    [ChainId.POLYGON]: '0xfc8a407bba312ac761d8bfe04ce1201904842b76',\n    [ChainId.ZKEVM]: '0x03f3fb107e74f2eac9358862e91ad3c692712054',\n};\n\nexport const COMPOSABLE_STABLE_POOL_FACTORY: Record<number, Address> = {\n    [ChainId.ARBITRUM_ONE]: '0xa8920455934da4d853faac1f94fe7bef72943ef1',\n    [ChainId.AVALANCHE]: '0xe42ffa682a26ef8f25891db4882932711d42e467',\n    [ChainId.GNOSIS_CHAIN]: '0x4bdcc2fb18aeb9e2d281b0278d946445070eada7',\n    [ChainId.MAINNET]: '0xdb8d758bcb971e482b2c45f7f8a7740283a1bd3a',\n    [ChainId.OPTIMISM]: '0x043a2dad730d585c44fb79d2614f295d2d625412',\n    [ChainId.POLYGON]: '0xe2fa4e1d17725e72dcdafe943ecf45df4b9e285b',\n    [ChainId.ZKEVM]: '0x577e5993b9cc480f07f98b5ebd055604bd9071c4',\n};\n\nexport const NATIVE_ASSETS = {\n    [ChainId.MAINNET]: new Token(\n        ChainId.MAINNET,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    ),\n    [ChainId.GOERLI]: new Token(\n        ChainId.GOERLI,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    ),\n    [ChainId.GNOSIS_CHAIN]: new Token(\n        ChainId.GNOSIS_CHAIN,\n        NATIVE_ADDRESS,\n        18,\n        'xDAI',\n        'xDAI',\n        '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n    ),\n    [ChainId.POLYGON]: new Token(\n        ChainId.POLYGON,\n        NATIVE_ADDRESS,\n        18,\n        'MATIC',\n        'Matic',\n        '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    ),\n    [ChainId.ARBITRUM_ONE]: new Token(\n        ChainId.ARBITRUM_ONE,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    ),\n    [ChainId.OPTIMISM]: new Token(\n        ChainId.OPTIMISM,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0x4200000000000000000000000000000000000006',\n    ),\n    [ChainId.FANTOM]: new Token(\n        ChainId.FANTOM,\n        NATIVE_ADDRESS,\n        18,\n        'FANTOM',\n        'Fantom',\n        '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    ),\n};\n\nexport const ETH = NATIVE_ASSETS[ChainId.MAINNET];\n\nexport const DEFAULT_FUND_MANAGMENT = {\n    sender: ZERO_ADDRESS,\n    recipient: ZERO_ADDRESS,\n    fromInternalBalance: false,\n    toInternalBalance: false,\n};\n\nexport const DEFAULT_USERDATA = '0x';\n\n// Pools from `23 Vulnerability that are bricked/broken\nexport const brickedPools = [\n    '0x00c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477',\n    '0x02d928e68d8f10c0358566152677db51e1e2dc8c00000000000000000000051e',\n    '0x04248aabca09e9a1a3d5129a7ba05b7f17de768400000000000000000000050e',\n    '0x05513ca725b6ce035ca2641075474eb469f05f4c00020000000000000000041f',\n    '0x0a0fb4ff697de5ac5b6770cd8ee1b72af80b57cf000000000000000000000496',\n    '0x0afbd58beca09545e4fb67772faf3858e610bcd00000000000000000000004b9',\n    '0x0d05aac44ac7dd3c7ba5d50be93eb884a057d23400000000000000000000051c',\n    '0x11839d635e2f0270da37e8ef4324d4d5d54329570002000000000000000004d8',\n    '0x126e7643235ec0ab9c103c507642dc3f4ca23c66000000000000000000000468',\n    '0x133d241f225750d2c92948e464a5a80111920331000000000000000000000476',\n    '0x159cb00338fb63f263fd6f621df619cef71da9540000000000000000000004d5',\n    '0x173063a30e095313eee39411f07e95a8a806014e0002000000000000000003ab',\n    '0x1bd2f176a812e312077bca87e37c08432bb09f3e0000000000000000000005a1',\n    '0x20b156776114e8a801e9767d90c6ccccc8adf398000000000000000000000499',\n    '0x246ffb4d928e394a02e45761fecdba6c2e79b8eb000000000000000000000541',\n    '0x25accb7943fd73dda5e23ba6329085a3c24bfb6a000200000000000000000387',\n    '0x26c2b83fc8535deead276f5cc3ad9c1a2192e02700020000000000000000056b',\n    '0x2b218683178d029bab6c9789b1073aa6c96e517600000000000000000000058c',\n    '0x2ba7aa2213fa2c909cd9e46fed5a0059542b36b00000000000000000000003a3',\n    '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n    '0x2e52c64fd319e380cdbcfc4577ea1fda558a32e40002000000000000000005ba',\n    '0x2f4eb100552ef93840d5adc30560e5513dfffacb000000000000000000000334',\n    '0x2ff1a9dbdacd55297452cfd8a4d94724bc22a5f7000000000000000000000484',\n    '0x3035917be42af437cbdd774be26b9ec90a2bd677000200000000000000000543',\n    '0x331d50e0b00fc1c32742f151e56b9b616227e23e00000000000000000000047c',\n    '0x334c96d792e4b26b841d28f53235281cec1be1f200020000000000000000038a',\n    '0x335d1709d4da9aca59d16328db5cd4ea66bfe06b0000000000000000000004d6',\n    '0x395d8a1d9ad82b5abe558f8abbfe183b27138af40000000000000000000004e5',\n    '0x3bb22fc9033b802f2ac47c18885f63476f158afc000000000000000000000483',\n    '0x3c640f0d3036ad85afa2d5a9e32be651657b874f00000000000000000000046b',\n    '0x3cdae4f12a67ba563499e102f309c73213cb241c000000000000000000000335',\n    '0x3dbb8d974b82e82ce79c20c0f5995f4f1f533ede000000000000000000000470',\n    '0x3f7a7fd7f214be45ec26820fd01ac3be4fc75aa70002000000000000000004c5',\n    '0x3fcb7085b8f2f473f80bf6d879cae99ea4de934400000000000000000000056d',\n    '0x41503c9d499ddbd1dcdf818a1b05e9774203bf46000000000000000000000594',\n    '0x4228290ee9cab692938ff0b4ba303fbcdb68e9f200020000000000000000057d',\n    '0x454ed96955d04d2f5cdd05e0fd1c77975bfe5307000000000000000000000410',\n    '0x481c5fc05d63a58aa2f0f2aa417c021b5d419cb200000000000000000000056a',\n    '0x483006684f422a9448023b2382615c57c5ecf18f000000000000000000000488',\n    '0x4a82b580365cff9b146281ab72500957a849abdc000000000000000000000494',\n    '0x4c81255cc9ed7062180ea99962fe05ac0d57350b0000000000000000000005a3',\n    '0x4c8d2e60863e8d7e1033eda2b3d84e92a641802000000000000000000000040f',\n    '0x4cbde5c4b4b53ebe4af4adb85404725985406163000000000000000000000595',\n    '0x4ce0bd7debf13434d3ae127430e9bd4291bfb61f00020000000000000000038b',\n    '0x4ce277df0feb5b4d07a0ca2adcf5326e4005239d000000000000000000000518',\n    '0x4fd4687ec38220f805b6363c3c1e52d0df3b5023000200000000000000000473',\n    '0x4fd63966879300cafafbb35d157dc5229278ed230000000000000000000000e9',\n    '0x50cf90b954958480b8df7958a9e965752f62712400000000000000000000046f',\n    '0x53bc3cba3832ebecbfa002c12023f8ab1aa3a3a0000000000000000000000411',\n    '0x5a6a8cffb4347ff7fc484bf5f0f8a2e234d34255000200000000000000000275',\n    '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b',\n    '0x60683b05e9a39e3509d8fdb9c959f23170f8a0fa000000000000000000000489',\n    '0x60d604890feaa0b5460b28a424407c24fe89374a0000000000000000000004fc',\n    '0x639883476960a23b38579acfd7d71561a0f408cf000200000000000000000505',\n    '0x652d486b80c461c397b0d95612a404da936f3db30000000000000000000000e7',\n    '0x6667c6fa9f2b3fc1cc8d85320b62703d938e43850000000000000000000004fb',\n    '0x6a1eb2e9b45e772f55bd9a34659a04b6f75da68700000000000000000000040d',\n    '0x6c56e72c551b5ac4bf54a620a76077ca768c8fe40002000000000000000004da',\n    '0x70b7d3b3209a59fb0400e17f67f3ee8c37363f4900020000000000000000018f',\n    '0x7337224d59cb16c2dc6938cd45a7b2c60c865d6a0000000000000000000004d4',\n    '0x74cbfaf94a3577c539a9dcee9870a6349a33b34f000000000000000000000534',\n    '0x779d01f939d78a918a3de18cc236ee89221dfd4e0000000000000000000004c7',\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n    '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n    '0x813e3fe1761f714c502d1d2d3a7cceb33f37f59d00000000000000000000040c',\n    '0x82698aecc9e28e9bb27608bd52cf57f704bd1b83000000000000000000000336',\n    '0x8a6b25e33b12d1bb6929a8793961076bd1f9d3eb0002000000000000000003e8',\n    '0x8e6ec57a822c2f527f2df7c7d7d361df3e7530a1000000000000000000000498',\n    '0x8f4063446f5011bc1c9f79a819efe87776f23704000000000000000000000197',\n    '0x9001cbbd96f54a658ff4e6e65ab564ded76a543100000000000000000000050a',\n    '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n    '0x9516a2d25958edb8da246a320f2c7d94a0dbe25d000000000000000000000519',\n    '0x959216bb492b2efa72b15b7aacea5b5c984c3cca000200000000000000000472',\n    '0x968024662b9566b42d78af23a0f441bc8723fa83000200000000000000000418',\n    '0x99c88ad7dc566616548adde8ed3effa730eb6c3400000000000000000000049a',\n    '0x9b1c8407a360443a9e5eca004713e4088fab8ac0000000000000000000000497',\n    '0x9b692f571b256140a39a34676bffa30634c586e100000000000000000000059d',\n    '0x9d7f992c900fbea0ec314bdd71b7cc1becf76a33000200000000000000000573',\n    '0x9fb771d530b0ceba5160f7bfe2dd1e8b8aa1340300000000000000000000040e',\n    '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    '0xa1697f9af0875b63ddc472d6eebada8c1fab85680000000000000000000004f9',\n    '0xa3823e50f20982656557a4a6a9c06ba5467ae9080000000000000000000000e6',\n    '0xa718042e5622099e5f0ace4e7122058ab39e1bbe000200000000000000000475',\n    '0xa8b103a10a94f4f2d7ed2fdcd5545e807557330700000000000000000000048e',\n    '0xac5b4ef7ede2f2843a704e96dcaa637f4ba3dc3f00000000000000000000051d',\n    '0xac976bb42cb0c85635644e8c7c74d0e0286aa61c0000000000000000000003cb',\n    '0xae37d54ae477268b9997d4161b96b8200755935c000000000000000000000337',\n    '0xae8535c23afedda9304b03c68a3563b75fc8f92b0000000000000000000005a0',\n    '0xb0f75e97a114a4eb4a425edc48990e6760726709000000000000000000000198',\n    '0xb5e3de837f869b0248825e0175da73d4e8c3db6b000200000000000000000474',\n    '0xb841b062ea8ccf5c4cb78032e91de4ae875560420002000000000000000005b7',\n    '0xb9bd68a77ccf8314c0dfe51bc291c77590c4e9e6000200000000000000000385',\n    '0xbb6881874825e60e1160416d6c426eae65f2459e000000000000000000000592',\n    '0xbc0f2372008005471874e426e86ccfae7b4de79d000000000000000000000485',\n    '0xbf2ef8bdc2fc0f3203b3a01778e3ec5009aeef3300000000000000000000058d',\n    '0xbfa413a2ff0f20456d57b643746133f54bfe0cd20000000000000000000004c3',\n    '0xc2b021133d1b0cf07dba696fd5dd89338428225b000000000000000000000598',\n    '0xc443c15033fcb6cf72cc24f1bda0db070ddd9786000000000000000000000593',\n    '0xc50d4347209f285247bda8a09fc1c12ce42031c3000000000000000000000590',\n    '0xc5dc1316ab670a2eed5716d7f19ced321191f38200000000000000000000056e',\n    '0xc8c79fcd0e859e7ec81118e91ce8e4379a481ee6000000000000000000000196',\n    '0xcaa052584b462198a5a9356c28bce0634d65f65c0000000000000000000004db',\n    '0xcbfa4532d8b2ade2c261d3dd5ef2a2284f7926920000000000000000000004fa',\n    '0xcfae6e251369467f465f13836ac8135bd42f8a56000000000000000000000591',\n    '0xd4e7c1f3da1144c9e2cfd1b015eda7652b4a439900000000000000000000046a',\n    '0xd6e355036f41dc261b3f1ed3bbc6003e87aadb4f000000000000000000000495',\n    '0xd7edb56f63b2a0191742aea32df1f98ca81ed9c600000000000000000000058e',\n    '0xd997f35c9b1281b82c8928039d14cddab5e13c2000000000000000000000019c',\n    '0xdba274b4d04097b90a72b62467d828cefd708037000000000000000000000486',\n    '0xdc063deafce952160ec112fa382ac206305657e60000000000000000000004c4',\n    '0xdec02e6642e2c999af429f5ce944653cad15e093000000000000000000000469',\n    '0xe03af00fabe8401560c1ff7d242d622a5b601573000000000000000000000493',\n    '0xe0fcbf4d98f0ad982db260f86cf28b49845403c5000000000000000000000504',\n    '0xe2d16b0a39f3fbb4389a0e8f1efcbecfb3d1e6e10000000000000000000005a7',\n    '0xe4dc3c1998ac693d68f4c77476d7c815694c3e94000200000000000000000416',\n    '0xe6bcc79f328eec93d4ec8f7ed35534d9ab549faa0000000000000000000000e8',\n    '0xe8c56405bc405840154d9b572927f4197d110de10000000000000000000005a4',\n    '0xeb486af868aeb3b6e53066abc9623b1041b42bc000000000000000000000046c',\n    '0xeb567dde03f3da7fe185bdacd5ab495ab220769d000000000000000000000548',\n    '0xec3626fee40ef95e7c0cbb1d495c8b67b34d398300000000000000000000053d',\n    '0xf22ff21e17157340575158ad7394e068048dd98b0000000000000000000004b8',\n    '0xf57c794f42da72b38c8f610ff3b5e8502e48cbde00000000000000000000055c',\n    '0xf71d0774b214c4cf51e33eb3d30ef98132e4dbaa00000000000000000000046e',\n    '0xfa24a90a3f2bbe5feea92b95cd0d14ce709649f900000000000000000000058f',\n    '0xfd11ccdbdb7ab91cb9427a6d6bf570c95876d1950000000000000000000004c2',\n    '0xfebb0bbf162e64fb9d0dfe186e517d84c395f016000000000000000000000502',\n    '0xfef969638c52899f91781f1be594af6f40b99bad00000000000000000000047b',\n    '0x02e139d53ebf4033bf78ab66c6a1e7f1f204487f0002000000000000000009f9',\n    '0x03090a9811181a2afe830a3a0b467698ccf3a8b1000000000000000000000bf5',\n    '0x0320c1c5b6df19a194d48882aaec1c72940081d9000000000000000000000a7d',\n    '0x04b54ea92d73de2d62d651db7d9778f0c49157d8000200000000000000000ba2',\n    '0x0503dd6b2d3dd463c9bef67fb5156870af63393e00000000000000000000042e',\n    '0x0889b240a5876aae745ac19f1771853671dc5d36000000000000000000000b3f',\n    '0x0bc54e914f53f98d16035f4f0d948f3e09c2fac0000200000000000000000bac',\n    '0x0c06e87c7b88d998f645b91c1f53b51294b12bca000100000000000000000bb9',\n    '0x10b040038f87219d9b42e025e3bd9b8095c87dd9000000000000000000000b11',\n    '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000aca',\n    '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000a5f',\n    '0x1379b816b9be611431d693290289c204720ca56d000100000000000000000b6f',\n    '0x150e7b885bdfce974f2abe88a72fdbd692175c6f0002000000000000000009fd',\n    '0x178e029173417b1f9c8bc16dcec6f697bc323746000000000000000000000758',\n    '0x1aafc31091d93c3ff003cff5d2d8f7ba2e7284250000000000000000000003b3',\n    '0x216690738aac4aa0c4770253ca26a28f0115c595000000000000000000000b2c',\n    '0x216d6db0c28204014618482c369d7fbf0a8f3232000100000000000000000b60',\n    '0x230ecdb2a7cee56d6889965a023aa0473d6da507000000000000000000000bf3',\n    '0x252ff6a3a6fd7b5e8e999de8e3f5c3b306ed1401000200000000000000000bec',\n    '0x25e57f4612912614e6c99616bd2abb9b5ae71e99000000000000000000000bf0',\n    '0x2645b13fd2c5295296e94a76280b968bdcbbdfed000000000000000000000c11',\n    '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000ac9',\n    '0x2c8dbe8eb86135d9f2f26d196748c088d47f73e7000200000000000000000a29',\n    '0x31bccf9e28b94e5dacebaa67fe8bc1603cecd904000000000000000000000a01',\n    '0x341068a547c3cde3c09e338714010dd01b32f93f000200000000000000000a34',\n    '0x3db543faf7a92052de7860c5c9debabee59ed5bd000000000000000000000a62',\n    '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd00000000000000000000070d',\n    '0x3efb91c4f9b103ee45885695c67794591916f34e000200000000000000000b43',\n    '0x402cfdb7781fa85d52f425352661128250b79e12000000000000000000000be3',\n    '0x43894de14462b421372bcfe445fa51b1b4a0ff3d000000000000000000000b36',\n    '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000b10',\n    '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n    '0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c',\n    '0x4a77ef015ddcd972fd9ba2c7d5d658689d090f1a000000000000000000000b38',\n    '0x4ae3661afa119892f0cc8c43edaf6a94989ac171000000000000000000000c06',\n    '0x4ccb966d8246240afb7a1a24628efb930870b1c40002000000000000000009fc',\n    '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000b0f',\n    '0x5b77107fcdf2b41903bab2bc555d4fc14cf7667d000000000000000000000b32',\n    '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000ac6',\n    '0x600bd01b6526611079e12e1ff93aba7a3e34226f0000000000000000000009e4',\n    '0x63ce19ccd39930725b8a3d2733627804718ab83d000000000000000000000bf2',\n    '0x64efad69f099813021b41f4cac6e749fd55e188f000000000000000000000b39',\n    '0x6933ec1ca55c06a894107860c92acdfd2dd8512f000000000000000000000428',\n    '0x6abe4e7a497b8293c258389c1b00d177e4f257ed00010000000000000000080d',\n    '0x6c8c7fc50247a47038015eb1fd5dc105d05dafba000200000000000000000ba0',\n    '0x7079a25dec33be61bbd81b2fb69b468e80d3e72c0000000000000000000009ff',\n    '0x71bd10c2a590b5858f5576550c163976a48af906000000000000000000000b27',\n    '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000acd',\n    '0x7f4f4942f2a14b6ab7b08b10ada1aacede4ee8d4000200000000000000000b44',\n    '0x86aef31951e0a3a54333bd9e72f9a95587d058c5000200000000000000000912',\n    '0x882c7a84231484b3e9f3fd45ac04b1eb5d35b076000200000000000000000a91',\n    '0x894c82800526e0391e709c0983a5aea3718b7f6d000000000000000000000ac5',\n    '0x89b28a9494589b09dbccb69911c189f74fdadc5a000000000000000000000b33',\n    '0x89bb15076c9f2d86aa98ec6cffc1a71e31c38953000000000000000000000bf1',\n    '0x89f1146fee52b5d9166e9c83cc388b6d8f69f1380001000000000000000009e7',\n    '0x8a819a4cabd6efcb4e5504fe8679a1abd831dd8f00000000000000000000042d',\n    '0x8b58a1e7fff52001c22386c2918d45938a6a9be30001000000000000000008d9',\n    '0x8b8225bfedebaf1708c55743acb4ad43fd4d0f21000200000000000000000918',\n    '0x8fbd0f8e490735cfc3abf4f29cbddd5c3289b9a7000000000000000000000b5b',\n    '0x8fd39252d683fdb60bddd4df4b53c9380b496d59000200000000000000000b45',\n    '0x9321e2250767d79bab5aa06daa8606a2b3b7b4c5000000000000000000000bf4',\n    '0x949a12b95ec5b80c375b98963a5d6b33b0d0efff0002000000000000000009fe',\n    '0x9a020bdc2faff5bd24c6acc2020d01ff9f2c627a000000000000000000000ae2',\n    '0x9cf9358300e34bf9373d30129a1e718d8d058b54000200000000000000000913',\n    '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000ad5',\n    '0xa5a935833f6a5312715f182733eab088452335d7000100000000000000000bee',\n    '0xa5fe91dde37d8bf2dacacc0168b115d28ed03f84000000000000000000000b35',\n    '0xa8bf1c584519be0184311c48adbdc4c15cb2e8c1000000000000000000000bf6',\n    '0xab269164a10fab22bc87c39946da06c870b172d6000000000000000000000bfc',\n    '0xac2cae8d2f78a4a8f92f20dbe74042cd0a8d5af3000000000000000000000be2',\n    '0xae646817e458c0be890b81e8d880206710e3c44e000000000000000000000acb',\n    '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000ac8',\n    '0xb0c830dceb4ef55a60192472c20c8bf19df03488000000000000000000000be1',\n    '0xb266ac3b7c98d7bcb28731dac0ef42dba1b276be000000000000000000000be4',\n    '0xb371aa09f5a110ab69b39a84b5469d29f9b22b76000000000000000000000b37',\n    '0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace',\n    '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n    '0xb59be8f3c85a9dd6e2899103b6fbf6ea405b99a4000000000000000000000b34',\n    '0xb878ecce26838fbba4f78cb5b791a0e09152c067000000000000000000000427',\n    '0xb973ca96a3f0d61045f53255e319aedb6ed4924000000000000000000000042f',\n    '0xbd4e35784c832d0f9049b54cb3609e5907c5b495000100000000000000000b14',\n    '0xc55ec796a4debe625d95436a3531f4950b11bdcf000000000000000000000b3e',\n    '0xc7e6389e364f4275eb442ef215ed21877028e2af000000000000000000000ac7',\n    '0xc83b55bbd005f1f84906545fcdb145dee53523e0000200000000000000000b30',\n    '0xcb21a9e647c95127ed784626485b3104cb28d0e7000000000000000000000425',\n    '0xd00f9ca46ce0e4a63067c4657986f0167b0de1e5000000000000000000000b42',\n    '0xd2f3b9e67c69762dd1c88f1d3dadd1649a190761000200000000000000000bf7',\n    '0xd4accb350f9cf59fe3cf7a5ee6ed9ace6a568ea9000200000000000000000b75',\n    '0xda1cd1711743e57dd57102e9e61b75f3587703da000000000000000000000acc',\n    '0xdae301690004946424e41051ace1791083be42a1000000000000000000000b40',\n    '0xde0a77ab6689b980c30306b10f9131a007e1af81000200000000000000000ba1',\n    '0xe051605a83deae38d26a7346b100ef1ac2ef8a0b0000000000000000000003ce',\n    '0xe1fb90d0d3b47e551d494d7ebe8f209753526b01000000000000000000000ac4',\n    '0xe2272cddb2cc408e79e02a73d1db9acc24a843d5000200000000000000000ba7',\n    '0xe2dc0e0f2c358d6e31836dee69a558ab8d1390e70000000000000000000009fa',\n    '0xe4885ed2818cc9e840a25f94f9b2a28169d1aea7000000000000000000000b29',\n    '0xe6909c2f18a29d97217a6146f045e1780606991f000100000000000000000bfe',\n    '0xe78b25c06db117fdf8f98583cdaaa6c92b79e917000000000000000000000b2b',\n    '0xea11645ac7d8f2def94c9d8d86bd766296c9b6b6000000000000000000000b3a',\n    '0xeb480dbbdd921cd6c359e4cc4c65ddea6395e2a1000200000000000000000946',\n    '0xed35f28f837e96f81240ebb82e0e3f518c7e8a2f000100000000000000000bb5',\n    '0xf0211cceebe6fcc45052b4e57ee95d233f5669d2000100000000000000000c01',\n    '0xf22a66046b5307842f21b311ecb4c462c24c0635000000000000000000000b15',\n    '0xf28f17be00f8ca3c9b7f66a4aad5513757fb3341000200000000000000000b5a',\n    '0xf42ed61450458ee4620f5ef4f29adb25a6ef0fb6000000000000000000000bf8',\n    '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000000000000000000000445',\n    '0xf93579002dbe8046c43fefe86ec78b1112247bb8000000000000000000000759',\n    '0xf984eb2b8a7ef780245a797a2fccd82f346409ca000000000000000000000a59',\n    '0xfa2c0bd8327c99db5bde4c9e9e5cbf30946351bb000000000000000000000948',\n    '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea600000000000000000000075a',\n    '0x1ac55c31dac78ca943cb8ebfca5945ce09e036e2000000000000000000000024',\n    '0x225e0047671939a8d78e08ebd692788abe63f15c000000000000000000000009',\n    '0x41211bba6d37f5a74b22e667533f080c7c7f3f1300000000000000000000000b',\n    '0x4de21b365d6543661d0e105e579a34b963862497000200000000000000000045',\n    '0x581ec1f5e7ced12b186deae32256adb53bdd5b08000000000000000000000001',\n    '0x66f33ae36dd80327744207a48122f874634b3ada000100000000000000000013',\n    '0xa3ed6f78edc29f69df8a0d16b1d1ccf9871f918c000000000000000000000032',\n    '0xa611a551b95b205ccd9490657acf7899daee5db700000000000000000000002e',\n    '0xb95829adbacd8af89e291dee78bc09e24de51d6b000000000000000000000043',\n    '0xb973ca96a3f0d61045f53255e319aedb6ed49240000200000000000000000011',\n    '0xba1a5b19d09a79dada039b1f974015c5a989d5fd000100000000000000000046',\n    '0xbb9cd48d33033f5effbedec9dd700c7d7e1dcf5000000000000000000000000e',\n    '0xd16f72b02da5f51231fde542a8b9e2777a478c8800000000000000000000000f',\n    '0xd4015683b8153666190e0b2bec352580ebc4caca00000000000000000000000d',\n    '0xe15cac1df3621e001f76210ab12a7f1a1691481f000000000000000000000044',\n    '0xe7f88d7d4ef2eb18fcf9dd7216ba7da1c46f3dd600000000000000000000000a',\n    '0xf48f01dcb2cbb3ee1f6aab0e742c2d3941039d56000200000000000000000012',\n    '0xfedb19ec000d38d92af4b21436870f115db22725000000000000000000000010',\n    '0xffff76a3280e95dc855696111c2562da09db2ac000000000000000000000000c',\n    '0x00fcd3d55085e998e291a0005cedecf58ac14c4000020000000000000000047f',\n    '0x077794c30afeccdf5ad2abc0588e8cee7197b71a000000000000000000000352',\n    '0x117a3d474976274b37b7b94af5dcade5c90c6e85000000000000000000000381',\n    '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000353',\n    '0x19b1c92631405a0a9495ccba0becf4f2e8e908bd000000000000000000000410',\n    '0x1e550b7764da9638fdd32c8a701364de31f45ee800000000000000000000047c',\n    '0x1fa7f727934226aedab636d62a084931b97d366b000000000000000000000411',\n    '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000c9',\n    '0x284eb68520c8fa83361c1a3a5910aec7f873c18b000000000000000000000380',\n    '0x2a96254ca32020b20ed3506f8f75318da24709f9000200000000000000000456',\n    '0x36942963e3b6f37ecc45a4e72349558514233f0000000000000000000000048a',\n    '0x3f53a862919ccfa023cb6ace91378a79fb0f6bf500000000000000000000040f',\n    '0x40af308e3d07ec769d85eb80afb116525ff4ac99000000000000000000000485',\n    '0x418de00ae109e6f874d872658767866d680eaa1900000000000000000000047d',\n    '0x45c4d1376943ab28802b995acffc04903eb5223f000000000000000000000470',\n    '0x4689122d360c4725d244c5cfea22861333d862e6000100000000000000000468',\n    '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000409',\n    '0x49a0e3334496442a9706e481617724e7e37eaa080000000000000000000003ff',\n    '0x519cce718fcd11ac09194cff4517f12d263be067000000000000000000000382',\n    '0x52cc8389c6b93d740325729cc7c958066cee4262000000000000000000000408',\n    '0x567ecfcb22205d279bb8eed3e066989902bf03d5000000000000000000000452',\n    '0x585d95df0231fa08aeee35ff0c16b92fd0ecdc3300020000000000000000045f',\n    '0x5a7f39435fd9c381e4932fa2047c9a5136a5e3e7000000000000000000000400',\n    '0x5bae72b75caab1f260d21bc028c630140607d6e8000000000000000000000350',\n    '0x6cb787a419c3e6ee2e9ff365856c29cd10659113000000000000000000000474',\n    '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000406',\n    '0x81fc12c60ee5b753cf5fd0adc342dfb5f3817e3200000000000000000000035d',\n    '0x894c82800526e0391e709c0983a5aea3718b7f6d00000000000000000000034f',\n    '0x970712708a08e8fb152be4d81b2dc586923f5369000200000000000000000479',\n    '0x9bf7c3b63c77b4b4f2717776f15a4bec1b532a280000000000000000000000c8',\n    '0x9cebf13bb702f253abf1579294694a1edad00eaa000000000000000000000486',\n    '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000407',\n    '0x9fb7d6dcac7b6aa20108bad226c35b85a9e31b63000200000000000000000412',\n    '0xa1ea76c42b2938cfa9abea12357881006c52851300000000000000000000048f',\n    '0xa50f89e9f439fde2a6fe05883721a00475da3c4500000000000000000000048b',\n    '0xa612b6aed2e7ca1a3a4f23fbca9128461bbb7718000000000000000000000274',\n    '0xa8af146d79ac0bb981e4e0d8b788ec5711b1d5d000000000000000000000047b',\n    '0xad28940024117b442a9efb6d0f25c8b59e1c950b00000000000000000000046f',\n    '0xae646817e458c0be890b81e8d880206710e3c44e00000000000000000000039d',\n    '0xaef2c171dbe64b0c18977e16e70bfd29d4ee0256000000000000000000000351',\n    '0xbbf9d705b75f408cfcaee91da32966124d2c6f7d00000000000000000000047e',\n    '0xbd724eb087d4cc0f61a5fed1fffaf937937e14de000000000000000000000473',\n    '0xbe0f30217be1e981add883848d0773a86d2d2cd4000000000000000000000471',\n    '0xc46be4b8bb6b5a3d3120660efae9c5416318ed40000000000000000000000472',\n    '0xc69771058481551261709d8db44977e9afde645000010000000000000000042a',\n    '0xc6eee8cb7643ec2f05f46d569e9ec8ef8b41b389000000000000000000000475',\n    '0xcba9ff45cfb9ce238afde32b0148eb82cbe635620000000000000000000003fd',\n    '0xcf8b555b7754556cf2ac2165e77ee23ed8517d7900020000000000000000045e',\n    '0xd0dc20e6342db2de82692b8dc842301ff9121805000200000000000000000454',\n    '0xd3d5d45f4edf82ba0dfaf061d230766032a10e07000200000000000000000413',\n    '0xd6d20527c7b0669989ee082b9d3a1c63af742290000000000000000000000483',\n    '0xda1cd1711743e57dd57102e9e61b75f3587703da0000000000000000000003fc',\n    '0xe1fb90d0d3b47e551d494d7ebe8f209753526b0100000000000000000000034e',\n    '0xee02583596aee94cccb7e8ccd3921d955f17982a00000000000000000000040a',\n    '0xf984eb2b8a7ef780245a797a2fccd82f346409ca00000000000000000000034d',\n    '0xff8f84e8c87532af96aef5582ee451572233678b000200000000000000000478',\n    '0x054e7b0c73e1ee5aed6864fa511658fc2b54bcaa000000000000000000000015',\n    '0x3f1a2c4a3a751f6626bd90ef16e104f0772d4d6b00020000000000000000001b',\n    '0x7275c131b1f67e8b53b4691f92b0e35a4c1c6e22000000000000000000000010',\n    '0xa154009870e9b6431305f19b09f9cfd7284d4e7a000000000000000000000013',\n    '0xa1d14d922a575232066520eda11e27760946c991000000000000000000000012',\n    '0xa826a114b0c7db4d1ff4a4be845a78998c64564c000000000000000000000008',\n    '0xea67626e1f0b59e0d172a04f5702ef90bcdf440c00000000000000000000000f',\n    '0xeb496161099d45b3ea4892408ef745c6182eb56e00000000000000000000000e',\n    '0xece571847897fd61e764d455dc15cf1cd9de8d6f000000000000000000000014',\n    '0xed3e2f496cbcd8e212192fb8d1499842f04a0d19000000000000000000000009',\n    '0x02c9dcb975262719a61f9b40bdf0987ead9add3a000000000000000000000006',\n    '0x16c9a4d841e88e52b51936106010f27085a529ec00000000000000000000000c',\n    '0x32be2d0ddeaf3333501b24a28668ce373ba8e763000200000000000000000014',\n    '0x32f03464fdf909fdf3798f87ff3712b10c59bd86000000000000000000000005',\n    '0x4b718e0e2fea1da68b763cd50c446fba03ceb2ea00000000000000000000000b',\n    '0x68a69c596b3839023c0e08d09682314f582314e5000200000000000000000011',\n    '0x6f34a44fce1506352a171232163e7716dd073ade000200000000000000000015',\n    '0x9e2d87f904862671eb49cb358e74284762cc9f42000200000000000000000013',\n    '0xac4b72c01072a52b73ca71105504f1372efcce0d000000000000000000000003',\n    '0xbfd65c6160cfd638a85c645e6e6d8acac5dac935000000000000000000000004',\n    '0xe274c9deb6ed34cfe4130f8d0a8a948dea5bb28600000000000000000000000d',\n    '0x1f131ec1175f023ee1534b16fa8ab237c00e238100000000000000000000004a',\n    '0x479a7d1fcdd71ce0c2ed3184bfbe9d23b92e8337000000000000000000000049',\n    '0x23ca0306b21ea71552b148cf3c4db4fc85ae19290000000000000000000000ac',\n    '0x43da214fab3315aa6c02e0b8f2bfb7ef2e3c60a50000000000000000000000ae',\n    '0x62cf35db540152e94936de63efc90d880d4e241b0000000000000000000000ef',\n    '0x098f32d98d0d64dba199fc1923d3bf4192e787190001000000000000000000d2',\n    '0xb1c9ac57594e9b1ec0f3787d9f6744ef4cb0a02400000000000000000000006e',\n    '0x05e7732bf9ae5592e6aa05afe8cd80f7ab0a7bea00020000000000000000005a',\n    '0xde45f101250f2ca1c0f8adfc172576d10c12072d00000000000000000000003f',\n    '0x981fb05b738e981ac532a99e77170ecb4bc27aef00010000000000000000004b',\n    '0x6222ae1d2a9f6894da50aa25cb7b303497f9bebd000000000000000000000046',\n    '0x3c74c4ed512050eb843d89fb9dcd5ebb4668eb6d0002000000000000000000cc',\n    '0x7fe29a818438ed2759e30f65c2302295711d66fc0000000000000000000000e5',\n    '0xb0de49429fbb80c635432bbad0b3965b2856017700010000000000000000004e',\n    '0x428e1cc3099cf461b87d124957a0d48273f334b100000000000000000000007f',\n    '0x359ea8618c405023fc4b98dab1b01f373792a12600010000000000000000004f',\n    '0x62de5ca16a618e22f6dfe5315ebd31acb10c44b6000000000000000000000037',\n    '0x7d6bff131b359da66d92f215fd4e186003bfaa42000000000000000000000058',\n    '0x9964b1bd3cc530e5c58ba564e45d45290f677be2000000000000000000000036',\n    '0x2c4a83f98d1cdbeeec825fabacd09c46e2dd3c570002000000000000000000de',\n    '0x8b6d3aa69c1cf47677281691b1abf3831ba1329d0001000000000000000000d0',\n    '0x64cee2338369aa9b36fc756ea231eb9bc242926f0000000000000000000000df',\n    '0xe0b50b0635b90f7021d2618f76ab9a31b92d009400010000000000000000003a',\n    '0x8a2872fd28f42bd9f6559907235e83fbf4167f480001000000000000000000f2',\n    '0x362715c164d606682c4ea7e479633e419d9345eb0001000000000000000000e7',\n    '0xcd7b2232b7435595bbc7fd7962f1f352fc2cc61a0000000000000000000000f0',\n    '0xf572649606db4743d217a2fa6e8b8eb79742c24a000000000000000000000039',\n    '0xbec621c9ab4ceddcc2a157ca9b5c475fab65f6a40000000000000000000000f3',\n    '0x5470f064a19c65263b3033da3a6124fdf0a9bab80000000000000000000000e6',\n    '0xcb89e89d798a4563d1599ea5508282e13b225b520000000000000000000000e4',\n    '0xe94c45de980f914904fdcfa9fbbe7c4a0ffe6ac70000000000000000000000e0',\n    '0x435272180a4125f3b47c92826f482fc6cc165958000200000000000000000059',\n    '0x96a78983932b8739d1117b16d30c15607926b0c500000000000000000000006d',\n    '0x593acbfb1eaf3b6ec86fa60325d816996fdcbc0d000000000000000000000038',\n    '0xd1af4974fcc995cf36ba40b189caa92964a9126d0000000000000000000000f1',\n];\n","import _Decimal from 'decimal.js-light';\nimport { parseUnits } from 'viem';\nimport { InputAmount } from '../types';\nimport { DECIMAL_SCALES } from '../utils/constants';\nimport { WAD } from '../utils/math';\nimport { Token } from './token';\n\nexport type BigintIsh = bigint | string | number;\n\nexport class TokenAmount {\n    public readonly token: Token;\n    public readonly scalar: bigint;\n    public readonly decimalScale: bigint;\n    public amount: bigint;\n    public scale18: bigint;\n\n    public static fromRawAmount(token: Token, rawAmount: BigintIsh) {\n        return new TokenAmount(token, rawAmount);\n    }\n\n    public static fromHumanAmount(token: Token, humanAmount: `${number}`) {\n        const rawAmount = parseUnits(humanAmount, token.decimals);\n        return new TokenAmount(token, rawAmount);\n    }\n\n    public static fromScale18Amount(\n        token: Token,\n        scale18Amount: BigintIsh,\n        divUp?: boolean,\n    ) {\n        const scalar = DECIMAL_SCALES[18 - token.decimals];\n        const rawAmount = divUp\n            ? 1n + (BigInt(scale18Amount) - 1n) / scalar\n            : BigInt(scale18Amount) / scalar;\n        return new TokenAmount(token, rawAmount);\n    }\n\n    protected constructor(token: Token, amount: BigintIsh) {\n        this.decimalScale = DECIMAL_SCALES[token.decimals];\n        this.token = token;\n        this.amount = BigInt(amount);\n        this.scalar = DECIMAL_SCALES[18 - token.decimals];\n        this.scale18 = this.amount * this.scalar;\n    }\n\n    public add(other: TokenAmount): TokenAmount {\n        return new TokenAmount(this.token, this.amount + other.amount);\n    }\n\n    public sub(other: TokenAmount): TokenAmount {\n        return new TokenAmount(this.token, this.amount - other.amount);\n    }\n\n    public mulUpFixed(other: bigint): TokenAmount {\n        const product = this.amount * other;\n        const multiplied = (product - 1n) / WAD + 1n;\n        return new TokenAmount(this.token, multiplied);\n    }\n\n    public mulDownFixed(other: bigint): TokenAmount {\n        const multiplied = (this.amount * other) / WAD;\n        return new TokenAmount(this.token, multiplied);\n    }\n\n    public divUpFixed(other: bigint): TokenAmount {\n        const divided = (this.amount * WAD + other - 1n) / other;\n        return new TokenAmount(this.token, divided);\n    }\n\n    public divDownFixed(other: bigint): TokenAmount {\n        const divided = (this.amount * WAD) / other;\n        return new TokenAmount(this.token, divided);\n    }\n\n    public toSignificant(significantDigits = 6): string {\n        return new _Decimal(this.amount.toString())\n            .div(new _Decimal(this.decimalScale.toString()))\n            .toDecimalPlaces(significantDigits)\n            .toString();\n    }\n\n    public toInputAmount(): InputAmount {\n        return {\n            address: this.token.address,\n            decimals: this.token.decimals,\n            rawAmount: this.amount,\n        };\n    }\n}\n","export const WAD = 1000000000000000000n;\nexport const RAY = 1000000000000000000000000000000000000n;\n\nexport const TWO_WAD = 2000000000000000000n;\nexport const FOUR_WAD = 4000000000000000000n;\nexport const HUNDRED_WAD = 100000000000000000000n;\n\nexport const abs = (n: bigint): bigint => (n < 0n ? -n : n);\n\nexport const min = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a < b ? a : b));\n\nexport const max = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a > b ? a : b));\n\nconst _require = (b: boolean, message: string) => {\n    if (!b) throw new Error(message);\n};\n\nexport class MathSol {\n    static max(a: bigint, b: bigint): bigint {\n        return a >= b ? a : b;\n    }\n\n    static min(a: bigint, b: bigint): bigint {\n        return a < b ? a : b;\n    }\n\n    static MAX_POW_RELATIVE_ERROR = 10000n;\n\n    static mulDownFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        return product / WAD;\n    }\n\n    static mulUpFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n\n        if (product === 0n) {\n            return 0n;\n        }\n        return (product - 1n) / WAD + 1n;\n    }\n\n    static divDownFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return aInflated / b;\n    }\n\n    static divUpFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return (aInflated - 1n) / b + 1n;\n    }\n\n    static divUp(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        return 1n + (a - 1n) / b;\n    }\n\n    // version = poolTypeVersion\n    static powUpFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        return raw + maxError;\n    }\n\n    // version = poolTypeVersion\n    static powDownFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        if (raw < maxError) {\n            return 0n;\n        }\n        return raw - maxError;\n    }\n\n    static complementFixed(x: bigint): bigint {\n        return x < WAD ? WAD - x : 0n;\n    }\n}\n\nclass LogExpMath {\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    static MAX_NATURAL_EXPONENT = 130000000000000000000n;\n    static MIN_NATURAL_EXPONENT = -41000000000000000000n;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    static LN_36_LOWER_BOUND: bigint = WAD - 100000000000000000n;\n    static LN_36_UPPER_BOUND: bigint = WAD + 100000000000000000n;\n\n    // static MILD_EXPONENT_BOUND: bigint = 2 ** 254 / HUNDRED_WAD;\n    // Precomputed value of the above expression\n    static MILD_EXPONENT_BOUND =\n        289480223093290488558927462521719769633174961664101410098n;\n\n    // 18 decimal constants\n    static x0 = 128000000000000000000n; // 2ˆ7\n    static a0 = 38877084059945950922200000000000000000000000000000000000n; // eˆ(x0) (no decimals)\n    static x1 = 64000000000000000000n; // 2ˆ6\n    static a1 = 6235149080811616882910000000n; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    static x2 = 3200000000000000000000n; // 2ˆ5\n    static a2 = 7896296018268069516100000000000000n; // eˆ(x2)\n    static x3 = 1600000000000000000000n; // 2ˆ4\n    static a3 = 888611052050787263676000000n; // eˆ(x3)\n    static x4 = 800000000000000000000n; // 2ˆ3\n    static a4 = 298095798704172827474000n; // eˆ(x4)\n    static x5 = 400000000000000000000n; // 2ˆ2\n    static a5 = 5459815003314423907810n; // eˆ(x5)\n    static x6 = 200000000000000000000n; // 2ˆ1\n    static a6 = 738905609893065022723n; // eˆ(x6)\n    static x7 = 100000000000000000000n; // 2ˆ0\n    static a7 = 271828182845904523536n; // eˆ(x7)\n    static x8 = 50000000000000000000n; // 2ˆ-1\n    static a8 = 164872127070012814685n; // eˆ(x8)\n    static x9 = 25000000000000000000n; // 2ˆ-2\n    static a9 = 128402541668774148407n; // eˆ(x9)\n    static x10 = 12500000000000000000n; // 2ˆ-3\n    static a10 = 113314845306682631683n; // eˆ(x10)\n    static x11 = 6250000000000000000n; // 2ˆ-4\n    static a11 = 106449445891785942956n; // eˆ(x11)\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    static pow(x: bigint, y: bigint): bigint {\n        if (y === 0n) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return WAD;\n        }\n\n        if (x === 0n) {\n            return 0n;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        _require(\n            x <\n                57896044618658097711785492504343953926634992332820282019728792003956564819968n,\n\n            'Errors.X_OUT_OF_BOUNDS',\n        );\n        const x_int256 = x;\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        _require(y < LogExpMath.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');\n        const y_int256 = y;\n\n        let logx_times_y: bigint;\n        if (\n            LogExpMath.LN_36_LOWER_BOUND < x_int256 &&\n            x_int256 < LogExpMath.LN_36_UPPER_BOUND\n        ) {\n            const ln_36_x = LogExpMath._ln_36(x_int256);\n\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n            // (downscaled) last 18 decimals.\n            logx_times_y =\n                (ln_36_x / WAD) * y_int256 + ((ln_36_x % WAD) * y_int256) / WAD;\n        } else {\n            logx_times_y = LogExpMath._ln(x_int256) * y_int256;\n        }\n        logx_times_y /= WAD;\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        _require(\n            LogExpMath.MIN_NATURAL_EXPONENT <= logx_times_y &&\n                logx_times_y <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.PRODUCT_OUT_OF_BOUNDS',\n        );\n\n        // return uint256(exp(logx_times_y));\n        return LogExpMath.exp(logx_times_y);\n    }\n\n    static exp(x_: bigint): bigint {\n        let x = x_;\n        _require(\n            x >= LogExpMath.MIN_NATURAL_EXPONENT &&\n                x <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.INVALID_EXPONENT',\n        );\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n            // Fixed point division requires multiplying by ONE_18.\n            return (WAD * WAD) / LogExpMath.exp(-1n * x);\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of MathSol process we will have the product of all e^x_n = a_n that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        let firstAN: bigint;\n        if (x >= LogExpMath.x0) {\n            x -= LogExpMath.x0;\n            firstAN = LogExpMath.a0;\n        } else if (x >= LogExpMath.x1) {\n            x -= LogExpMath.x1;\n            firstAN = LogExpMath.a1;\n        } else {\n            firstAN = 1n;\n        }\n\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n        // smaller terms.\n        x *= 100n;\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        let product = HUNDRED_WAD;\n\n        if (x >= LogExpMath.x2) {\n            x -= LogExpMath.x2;\n            product = (product * LogExpMath.a2) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x3) {\n            x -= LogExpMath.x3;\n            product = (product * LogExpMath.a3) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x4) {\n            x -= LogExpMath.x4;\n            product = (product * LogExpMath.a4) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x5) {\n            x -= LogExpMath.x5;\n            product = (product * LogExpMath.a5) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x6) {\n            x -= LogExpMath.x6;\n            product = (product * LogExpMath.a6) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x7) {\n            x -= LogExpMath.x7;\n            product = (product * LogExpMath.a7) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x8) {\n            x -= LogExpMath.x8;\n            product = (product * LogExpMath.a8) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x9) {\n            x -= LogExpMath.x9;\n            product = (product * LogExpMath.a9) / HUNDRED_WAD;\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        let seriesSum = HUNDRED_WAD; // The initial one in the sum, with 20 decimal places.\n        let term: bigint; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        seriesSum += term;\n\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n        // multiplying by it requires dividing by HUNDRED_WAD, but dividing by the non-fixed point n values does not.\n\n        term = (term * x) / HUNDRED_WAD / 2n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 3n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 4n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 5n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 6n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 7n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 8n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 9n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 10n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 11n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 12n;\n        seriesSum += term;\n\n        // 12 Taylor terms are sufficient for 18 decimal precision.\n\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n        // all three (one 20 decimal fixed point multiplication, dividing by HUNDRED_WAD, and one integer multiplication),\n        // and then drop two digits to return an 18 decimal value.\n\n        return (((product * seriesSum) / HUNDRED_WAD) * firstAN) / 100n;\n    }\n\n    static _ln_36(x_: bigint): bigint {\n        let x = x_;\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        x *= WAD;\n\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n        // division by ONE_36.\n        const z = ((x - RAY) * RAY) / (x + RAY);\n        const z_squared = (z * z) / RAY;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 11n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 13n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 15n;\n\n        // 8 Taylor terms are sufficient for 36 decimal precision.\n\n        // All that remains is multiplying by 2 (non fixed point).\n        return seriesSum * 2n;\n    }\n\n    /**\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    static _ln(a_: bigint): bigint {\n        let a = a_;\n        if (a < WAD) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, and MathSol if statement will not be entered in the recursive call.\n            // Fixed point division requires multiplying by MathSol.ONE_18.\n            return -1n * LogExpMath._ln((WAD * WAD) / a);\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of MathSol process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // MathSol.ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        let sum = 0n;\n        if (a >= LogExpMath.a0 * WAD) {\n            a /= LogExpMath.a0; // Integer, not fixed point division\n            sum += LogExpMath.x0;\n        }\n\n        if (a >= LogExpMath.a1 * WAD) {\n            a /= LogExpMath.a1; // Integer, not fixed point division\n            sum += LogExpMath.x1;\n        }\n\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to MathSol format.\n        sum *= 100n;\n        a *= 100n;\n\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n        if (a >= LogExpMath.a2) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a2;\n            sum += LogExpMath.x2;\n        }\n\n        if (a >= LogExpMath.a3) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a3;\n            sum += LogExpMath.x3;\n        }\n\n        if (a >= LogExpMath.a4) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a4;\n            sum += LogExpMath.x4;\n        }\n\n        if (a >= LogExpMath.a5) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a5;\n            sum += LogExpMath.x5;\n        }\n\n        if (a >= LogExpMath.a6) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a6;\n            sum += LogExpMath.x6;\n        }\n\n        if (a >= LogExpMath.a7) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a7;\n            sum += LogExpMath.x7;\n        }\n\n        if (a >= LogExpMath.a8) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a8;\n            sum += LogExpMath.x8;\n        }\n\n        if (a >= LogExpMath.a9) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a9;\n            sum += LogExpMath.x9;\n        }\n\n        if (a >= LogExpMath.a10) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a10;\n            sum += LogExpMath.x10;\n        }\n\n        if (a >= LogExpMath.a11) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a11;\n            sum += LogExpMath.x11;\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        const z = ((a - HUNDRED_WAD) * HUNDRED_WAD) / (a + HUNDRED_WAD);\n        const z_squared = (z * z) / HUNDRED_WAD;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 11n;\n\n        // 6 Taylor terms are sufficient for 36 decimal precision.\n\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n        seriesSum *= 2n;\n\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n        // value.\n\n        return (sum + seriesSum) / 100n;\n    }\n}\n","import { PoolDataEnricher, PoolDataProvider } from './data/types';\nimport { PathGraphTraversalConfig } from './pathGraph/pathGraphTypes';\nimport { BigintIsh } from './entities/tokenAmount';\nimport { BasePoolFactory } from './entities/pools/index';\n\nexport type Address = `0x${string}`;\nexport type Hex = `0x${string}`;\n\nexport type SwapInputRawAmount = BigintIsh;\n\nexport enum PoolType {\n    Weighted = 'Weighted',\n    ComposableStable = 'ComposableStable',\n    MetaStable = 'MetaStable',\n    AaveLinear = 'AaveLinear',\n    Fx = 'FX',\n    Gyro2 = 'Gyro2',\n    Gyro3 = 'Gyro3',\n    GyroE = 'GyroE',\n}\n\nexport enum SwapKind {\n    GivenIn = 0,\n    GivenOut = 1,\n}\n\nexport interface SwapOptions {\n    block?: bigint;\n    slippage?: bigint;\n    funds?: FundManagement;\n    deadline?: bigint;\n    graphTraversalConfig?: Partial<PathGraphTraversalConfig>;\n}\n\nexport interface FundManagement {\n    sender: string;\n    fromInternalBalance: boolean;\n    recipient: string;\n    toInternalBalance: boolean;\n}\n\nexport type SorConfig = {\n    chainId: number;\n    rpcUrl: string;\n    poolDataProviders?: PoolDataProvider | PoolDataProvider[];\n    poolDataEnrichers?: PoolDataEnricher | PoolDataEnricher[];\n    customPoolFactories?: BasePoolFactory[];\n};\n\nexport interface SingleSwap {\n    poolId: Hex;\n    kind: SwapKind;\n    assetIn: Address;\n    assetOut: Address;\n    amount: bigint;\n    userData: Hex;\n}\n\nexport interface BatchSwapStep {\n    poolId: Hex;\n    assetInIndex: bigint;\n    assetOutIndex: bigint;\n    amount: bigint;\n    userData: Hex;\n}\n\nexport type InputToken = {\n    address: Address;\n    decimals: number;\n};\n\nexport type InputAmount = InputToken & {\n    rawAmount: bigint;\n};\n\nexport type InputAmountInit = InputAmount | InputAmountInitWeighted;\n\nexport type InputAmountInitWeighted = InputAmount & {\n    weight: bigint;\n};\n","import { Token } from '../entities/token';\nimport { TokenAmount, BigintIsh } from '../entities/tokenAmount';\nimport { SwapKind } from '../types';\n\nexport function checkInputs(\n    tokenIn: Token,\n    tokenOut: Token,\n    swapKind: SwapKind,\n    swapAmount: BigintIsh | TokenAmount,\n): TokenAmount {\n    let amount: TokenAmount;\n\n    if (swapAmount instanceof TokenAmount) {\n        amount = swapAmount;\n    } else {\n        amount = TokenAmount.fromRawAmount(\n            swapKind === SwapKind.GivenIn ? tokenIn : tokenOut,\n            swapAmount,\n        );\n    }\n\n    if (\n        tokenIn.chainId !== tokenOut.chainId ||\n        tokenIn.chainId !== amount.token.chainId\n    ) {\n        throw new Error('ChainId mismatch for inputs');\n    }\n\n    if (\n        (swapKind === SwapKind.GivenIn && !tokenIn.isEqual(amount.token)) ||\n        (swapKind === SwapKind.GivenOut && !tokenOut.isEqual(amount.token))\n    ) {\n        throw new Error('Swap amount token does not match input token');\n    }\n\n    return amount;\n}\n","import { Address } from '../types';\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): Address => {\n    if (poolId.length !== 66) throw new Error('Invalid poolId length');\n    return poolId.slice(0, 42).toLowerCase() as Address;\n};\n\nexport function poolIsLinearPool(poolType: string) {\n    return poolType.includes('Linear');\n}\n\nexport function poolHasVirtualSupply(poolType: string) {\n    return poolType === 'PhantomStable' || poolIsLinearPool(poolType);\n}\n\nexport function poolHasActualSupply(poolType: string) {\n    return poolType === 'ComposableStable';\n}\n\nexport function poolHasPercentFee(poolType: string) {\n    return poolType === 'Element';\n}\n","export const balancerQueriesAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: '_vault',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryBatchSwap',\n        outputs: [\n            { internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'querySwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'vault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const balancerRelayerAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'libraryAddress',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'getLibrary',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'vaultActionsQueryMulticall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n] as const;\n","export const batchRelayerLibraryAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'wstETH',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IBalancerMinter',\n                name: 'minter',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'approveVault',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            {\n                internalType: 'int256[]',\n                name: 'limits',\n                type: 'int256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'index',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'key',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct VaultActions.OutputReference[]',\n                name: 'outputReferences',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'batchSwap',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'enum VaultActions.PoolKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address payable',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'index',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'key',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct VaultActions.OutputReference[]',\n                name: 'outputReferences',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'exitPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge[]',\n                name: 'gauges',\n                type: 'address[]',\n            },\n        ],\n        name: 'gaugeClaimRewards',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge',\n                name: 'gauge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'gaugeDeposit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: 'gauges',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'gaugeMint',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'approval',\n                type: 'bool',\n            },\n            {\n                internalType: 'address',\n                name: 'user',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'gaugeSetMinterApproval',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge',\n                name: 'gauge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'gaugeWithdraw',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getEntrypoint',\n        outputs: [\n            {\n                internalType: 'contract IBalancerRelayer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'enum VaultActions.PoolKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'joinPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.UserBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IVault.UserBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'manageUserBalance',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'ref',\n                type: 'uint256',\n            },\n        ],\n        name: 'peekChainedReferenceValue',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'relayer',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n            {\n                internalType: 'bytes',\n                name: 'authorisation',\n                type: 'bytes',\n            },\n        ],\n        name: 'setRelayerApproval',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'stakeETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'stakeETHAndWrap',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'limit',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'swap',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStaticATokenLM',\n                name: 'staticToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'toUnderlying',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapAaveStaticToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ICToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapCompoundV2',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapERC4626',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IEulerToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapEuler',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IGearboxDieselToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'dieselAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapGearbox',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IReaperTokenVault',\n                name: 'vaultToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapReaperVaultToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IShareToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapShareToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ITetuSmartVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapTetu',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IUnbuttonToken',\n                name: 'wrapperToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapUnbuttonToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapWstETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IYearnTokenVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapYearn',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20Permit',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'vaultPermit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20PermitDAI',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'holder',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'nonce',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiry',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'allowed',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'vaultPermitDAI',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStaticATokenLM',\n                name: 'staticToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'fromUnderlying',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapAaveDynamicToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ICToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapCompoundV2',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapERC4626',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IEulerToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'eulerProtocol',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapEuler',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IGearboxDieselToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'mainAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapGearbox',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IReaperTokenVault',\n                name: 'vaultToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapReaperVaultToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IShareToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapShareToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapStETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ITetuSmartVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapTetu',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IUnbuttonToken',\n                name: 'wrapperToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'uAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapUnbuttonToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IYearnTokenVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapYearn',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n] as const;\n","export const vaultAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'authorizer',\n                type: 'address',\n            },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'AuthorizerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'ExternalBalanceTransfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IFlashLoanRecipient',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feeAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'FlashLoan',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'user',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'delta',\n                type: 'int256',\n            },\n        ],\n        name: 'InternalBalanceChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                indexed: false,\n                internalType: 'int256[]',\n                name: 'deltas',\n                type: 'int256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'protocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'PoolBalanceChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'assetManager',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'cashDelta',\n                type: 'int256',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'managedDelta',\n                type: 'int256',\n            },\n        ],\n        name: 'PoolBalanceManaged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'poolAddress',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'enum IVault.PoolSpecialization',\n                name: 'specialization',\n                type: 'uint8',\n            },\n        ],\n        name: 'PoolRegistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'relayer',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'RelayerApprovalChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'TokensDeregistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                indexed: false,\n                internalType: 'address[]',\n                name: 'assetManagers',\n                type: 'address[]',\n            },\n        ],\n        name: 'TokensRegistered',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'WETH',\n        outputs: [\n            { internalType: 'contract IWETH', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'int256[]', name: 'limits', type: 'int256[]' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'batchSwap',\n        outputs: [\n            { internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'deregisterTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address payable',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'exitPool',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IFlashLoanRecipient',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'flashLoan',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'user', type: 'address' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'getInternalBalance',\n        outputs: [\n            { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'user', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],\n        name: 'getPool',\n        outputs: [\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'enum IVault.PoolSpecialization',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getPoolTokenInfo',\n        outputs: [\n            { internalType: 'uint256', name: 'cash', type: 'uint256' },\n            { internalType: 'uint256', name: 'managed', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'assetManager', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],\n        name: 'getPoolTokens',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract ProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'user', type: 'address' },\n            { internalType: 'address', name: 'relayer', type: 'address' },\n        ],\n        name: 'hasApprovedRelayer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'joinPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.PoolBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IVault.PoolBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'managePoolBalance',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.UserBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IVault.UserBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'manageUserBalance',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryBatchSwap',\n        outputs: [{ internalType: 'int256[]', name: '', type: 'int256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.PoolSpecialization',\n                name: 'specialization',\n                type: 'uint8',\n            },\n        ],\n        name: 'registerPool',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address[]',\n                name: 'assetManagers',\n                type: 'address[]',\n            },\n        ],\n        name: 'registerTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'setAuthorizer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'relayer', type: 'address' },\n            { internalType: 'bool', name: 'approved', type: 'bool' },\n        ],\n        name: 'setRelayerApproval',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'swap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculated',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const composabableStablePoolV5Abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IVault',\n                        name: 'vault',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'mainToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'wrappedToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'assetManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'upperTarget',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'pauseWindowDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'bufferPeriodDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'owner',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'version',\n                        type: 'string',\n                    },\n                ],\n                internalType: 'struct AaveLinearPool.ConstructorArgs',\n                name: 'args',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'RecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lowerTarget',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'upperTarget',\n                type: 'uint256',\n            },\n        ],\n        name: 'TargetsSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBptIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMainIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMainToken',\n        outputs: [\n            { internalType: 'contract IERC20', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTargets',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lowerTarget',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'upperTarget',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVirtualSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedToken',\n        outputs: [\n            { internalType: 'contract IERC20', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedTokenRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'inRecoveryMode',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFees',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFees',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'indexIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'indexOut', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: '', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: '', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'newLowerTarget',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'newUpperTarget',\n                type: 'uint256',\n            },\n        ],\n        name: 'setTargets',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const fxPoolAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: '_assetsToRegister',\n                type: 'address[]',\n            },\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_protocolPercentFee',\n                type: 'uint256',\n            },\n            { internalType: 'string', name: '_name', type: 'string' },\n            { internalType: 'string', name: '_symbol', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'numeraire',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'reserve',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'weight',\n                type: 'uint256',\n            },\n        ],\n        name: 'AssetIncluded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'derivative',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'numeraire',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'reserve',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'assimilator',\n                type: 'address',\n            },\n        ],\n        name: 'AssimilatorIncluded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'newCollector',\n                type: 'address',\n            },\n        ],\n        name: 'ChangeCollectorAddress',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'isEmergency',\n                type: 'bool',\n            },\n        ],\n        name: 'EmergencyAlarm',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lptAmountBurned',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsWithdrawn',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'EmergencyWithdraw',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feesCollected',\n                type: 'uint256',\n            },\n        ],\n        name: 'FeesAccrued',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feesCollected',\n                type: 'uint256',\n            },\n        ],\n        name: 'FeesCollected',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lptAmountBurned',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsWithdrawn',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'OnExitPool',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lptAmountMinted',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsDeposited',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'OnJoinPool',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'alpha',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'beta',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'delta',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'epsilon',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lambda',\n                type: 'uint256',\n            },\n        ],\n        name: 'ParametersSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'updater',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'newProtocolPercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'ProtocolFeeShareUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'trader',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'origin',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'target',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'originAmount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'targetAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'Trade',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_derivative',\n                type: 'address',\n            },\n        ],\n        name: 'assimilator',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'assimilator_',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'collectorAddress',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'curve',\n        outputs: [\n            { internalType: 'int128', name: 'alpha', type: 'int128' },\n            { internalType: 'int128', name: 'beta', type: 'int128' },\n            { internalType: 'int128', name: 'delta', type: 'int128' },\n            { internalType: 'int128', name: 'epsilon', type: 'int128' },\n            { internalType: 'int128', name: 'lambda', type: 'int128' },\n            { internalType: 'uint256', name: 'cap', type: 'uint256' },\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'fxPoolAddress',\n                type: 'address',\n            },\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        name: 'derivatives',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'emergency',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: '_assets',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: '_assetWeights',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'liquidity',\n        outputs: [\n            { internalType: 'uint256', name: 'total_', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'individual_',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        name: 'numeraires',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'swapRequest',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'protocolPercentFee',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        name: 'reserves',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: '_cap', type: 'uint256' }],\n        name: 'setCap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_collectorAddress',\n                type: 'address',\n            },\n        ],\n        name: 'setCollectorAddress',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: '_emergency', type: 'bool' }],\n        name: 'setEmergency',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: '_alpha', type: 'uint256' },\n            { internalType: 'uint256', name: '_beta', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: '_feeAtHalt',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_epsilon',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: '_lambda', type: 'uint256' },\n        ],\n        name: 'setParams',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_protocolPercentFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'setProtocolPercentFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalUnclaimedFeesInNumeraire',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'newOwner', type: 'address' },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'totalDepositNumeraire',\n                type: 'uint256',\n            },\n        ],\n        name: 'viewDeposit',\n        outputs: [\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'viewParameters',\n        outputs: [\n            { internalType: 'uint256', name: 'alpha_', type: 'uint256' },\n            { internalType: 'uint256', name: 'beta_', type: 'uint256' },\n            { internalType: 'uint256', name: 'delta_', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'epsilon_',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'lambda_', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_curvesToBurn',\n                type: 'uint256',\n            },\n        ],\n        name: 'viewWithdraw',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const gyroEV2Abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IVault',\n                                name: 'vault',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'string',\n                                name: 'name',\n                                type: 'string',\n                            },\n                            {\n                                internalType: 'string',\n                                name: 'symbol',\n                                type: 'string',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'token0',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'token1',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'swapFeePercentage',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'pauseWindowDuration',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'bufferPeriodDuration',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'oracleEnabled',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'address',\n                                name: 'owner',\n                                type: 'address',\n                            },\n                        ],\n                        internalType:\n                            'struct ExtensibleWeightedPool2Tokens.NewPoolParams',\n                        name: 'baseParams',\n                        type: 'tuple',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'int256',\n                                name: 'alpha',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'beta',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'c',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 's',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'lambda',\n                                type: 'int256',\n                            },\n                        ],\n                        internalType: 'struct GyroECLPMath.Params',\n                        name: 'eclpParams',\n                        type: 'tuple',\n                    },\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: 'int256',\n                                        name: 'x',\n                                        type: 'int256',\n                                    },\n                                    {\n                                        internalType: 'int256',\n                                        name: 'y',\n                                        type: 'int256',\n                                    },\n                                ],\n                                internalType: 'struct GyroECLPMath.Vector2',\n                                name: 'tauAlpha',\n                                type: 'tuple',\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: 'int256',\n                                        name: 'x',\n                                        type: 'int256',\n                                    },\n                                    {\n                                        internalType: 'int256',\n                                        name: 'y',\n                                        type: 'int256',\n                                    },\n                                ],\n                                internalType: 'struct GyroECLPMath.Vector2',\n                                name: 'tauBeta',\n                                type: 'tuple',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'u',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'v',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'w',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'z',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'dSq',\n                                type: 'int256',\n                            },\n                        ],\n                        internalType: 'struct GyroECLPMath.DerivedParams',\n                        name: 'derivedEclpParams',\n                        type: 'tuple',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'rateProvider0',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'rateProvider1',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'capManager',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'bool',\n                                name: 'capEnabled',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'uint120',\n                                name: 'perAddressCap',\n                                type: 'uint120',\n                            },\n                            {\n                                internalType: 'uint128',\n                                name: 'globalCap',\n                                type: 'uint128',\n                            },\n                        ],\n                        internalType: 'struct ICappedLiquidity.CapParams',\n                        name: 'capParams',\n                        type: 'tuple',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct GyroECLPPool.GyroParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            {\n                internalType: 'address',\n                name: 'configAddress',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'capManager',\n                type: 'address',\n            },\n        ],\n        name: 'CapManagerUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'capEnabled',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'uint120',\n                        name: 'perAddressCap',\n                        type: 'uint120',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'globalCap',\n                        type: 'uint128',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct ICappedLiquidity.CapParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'CapParamsUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'derivedParamsValidated',\n                type: 'bool',\n            },\n        ],\n        name: 'ECLPDerivedParamsValidated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paramsValidated',\n                type: 'bool',\n            },\n        ],\n        name: 'ECLPParamsValidated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'invariantAfterJoin',\n                type: 'uint256',\n            },\n        ],\n        name: 'InvariantAterInitializeJoin',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'oldInvariant',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'newInvariant',\n                type: 'uint256',\n            },\n        ],\n        name: 'InvariantOldAndNew',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'OracleEnabledChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'oracleUpdatedIndex',\n                type: 'uint256',\n            },\n        ],\n        name: 'OracleIndexUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'oldPauseManager',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'newPauseManager',\n                type: 'address',\n            },\n        ],\n        name: 'PauseManagerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'PausedLocally',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int256',\n                        name: 'x',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'y',\n                        type: 'int256',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct GyroECLPMath.Vector2',\n                name: 'invariant',\n                type: 'tuple',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapParams',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'UnpausedLocally',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_dSq',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_paramsAlpha',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_paramsBeta',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_paramsC',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_paramsLambda',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_paramsS',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_tauAlphaX',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_tauAlphaY',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_tauBetaX',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_tauBetaY',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_u',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_v',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_w',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: '_z',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: '',\n                type: 'int256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'capManager',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'capParams',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'capEnabled',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'uint120',\n                        name: 'perAddressCap',\n                        type: 'uint120',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'globalCap',\n                        type: 'uint128',\n                    },\n                ],\n                internalType: 'struct ICappedLiquidity.CapParams',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_pauseManager',\n                type: 'address',\n            },\n        ],\n        name: 'changePauseManager',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                internalType: 'uint8',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'startIndex',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'endIndex',\n                type: 'uint256',\n            },\n        ],\n        name: 'dirtyUninitializedOracleSamples',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableOracle',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'selector',\n                type: 'bytes4',\n            },\n        ],\n        name: 'getActionId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getECLPParams',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'int256',\n                        name: 'alpha',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'beta',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'c',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 's',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'lambda',\n                        type: 'int256',\n                    },\n                ],\n                internalType: 'struct GyroECLPMath.Params',\n                name: 'params',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'int256',\n                                name: 'x',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'y',\n                                type: 'int256',\n                            },\n                        ],\n                        internalType: 'struct GyroECLPMath.Vector2',\n                        name: 'tauAlpha',\n                        type: 'tuple',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'int256',\n                                name: 'x',\n                                type: 'int256',\n                            },\n                            {\n                                internalType: 'int256',\n                                name: 'y',\n                                type: 'int256',\n                            },\n                        ],\n                        internalType: 'struct GyroECLPMath.Vector2',\n                        name: 'tauBeta',\n                        type: 'tuple',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'u',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'v',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'w',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'z',\n                        type: 'int256',\n                    },\n                    {\n                        internalType: 'int256',\n                        name: 'dSq',\n                        type: 'int256',\n                    },\n                ],\n                internalType: 'struct GyroECLPMath.DerivedParams',\n                name: 'd',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getInvariant',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLargestSafeQueryWindow',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastInvariant',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IPriceOracle.Variable',\n                name: 'variable',\n                type: 'uint8',\n            },\n        ],\n        name: 'getLatest',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMiscData',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: 'logInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logTotalSupply',\n                type: 'int256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'oracleSampleCreationTimestamp',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'oracleIndex',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'oracleEnabled',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNormalizedWeights',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: '',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IPriceOracle.Variable',\n                        name: 'variable',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'ago',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IPriceOracle.OracleAccumulatorQuery[]',\n                name: 'queries',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'getPastAccumulators',\n        outputs: [\n            {\n                internalType: 'int256[]',\n                name: 'results',\n                type: 'int256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPrice',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'spotPrice',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'index',\n                type: 'uint256',\n            },\n        ],\n        name: 'getSample',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: 'logPairPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogPairPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logBptPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogBptPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'timestamp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IPriceOracle.Variable',\n                        name: 'variable',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'secs',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'ago',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IPriceOracle.OracleAverageQuery[]',\n                name: 'queries',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'getTimeWeightedAverage',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'results',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTokenRates',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'rate0',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'rate1',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTotalSamples',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'gyroConfig',\n        outputs: [\n            {\n                internalType: 'contract IGyroConfig',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'nonces',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'userData',\n                type: 'bytes',\n            },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: '',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: '',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'userData',\n                type: 'bytes',\n            },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pauseManager',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'userData',\n                type: 'bytes',\n            },\n        ],\n        name: 'queryExit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'bptIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'userData',\n                type: 'bytes',\n            },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'bptOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'rateProvider0',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'rateProvider1',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_capManager',\n                type: 'address',\n            },\n        ],\n        name: 'setCapManager',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'capEnabled',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'uint120',\n                        name: 'perAddressCap',\n                        type: 'uint120',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'globalCap',\n                        type: 'uint128',\n                    },\n                ],\n                internalType: 'struct ICappedLiquidity.CapParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'setCapParams',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const liquidityBootstrappingPoolAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'symbol', type: 'string' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'normalizedWeights',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            {\n                internalType: 'bool',\n                name: 'swapEnabledOnStart',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'startWeights',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'endWeights',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'GradualWeightUpdateScheduled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'swapEnabled',\n                type: 'bool',\n            },\n        ],\n        name: 'SwapEnabledSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getGradualWeightUpdateParams',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'endWeights',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNormalizedWeights',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapEnabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'swapEnabled', type: 'bool' }],\n        name: 'setSwapEnabled',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'endWeights',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'updateWeightsGradually',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const managedPoolAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IExternalWeightedMath',\n                name: 'externalWeightedMath',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IRecoveryModeHelper',\n                name: 'recoveryModeHelper',\n                type: 'address',\n            },\n            {\n                internalType: 'string',\n                name: 'factoryVersion',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'poolVersion',\n                type: 'string',\n            },\n            {\n                internalType: 'uint256',\n                name: 'initialPauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'FactoryDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'assetManagers',\n                        type: 'address[]',\n                    },\n                ],\n                internalType: 'struct ManagedPool.ManagedPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'normalizedWeights',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'swapEnabledOnStart',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'mustAllowlistLPs',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'managementAumFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'aumFeeId',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ManagedPoolSettings.ManagedPoolSettingsParams',\n                name: 'settingsParams',\n                type: 'tuple',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'create',\n        outputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCode',\n        outputs: [{ internalType: 'bytes', name: '', type: 'bytes' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCodeContracts',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'contractA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'contractB',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseConfiguration',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeePercentagesProvider',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRecoveryModeHelper',\n        outputs: [\n            {\n                internalType: 'contract IRecoveryModeHelper',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWeightedMath',\n        outputs: [\n            {\n                internalType: 'contract IExternalWeightedMath',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolFromFactory',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const metaStablePoolAbi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IVault',\n                        name: 'vault',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'contract IRateProvider[]',\n                        name: 'rateProviders',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'priceRateCacheDuration',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amplificationParameter',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'pauseWindowDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'bufferPeriodDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'oracleEnabled',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'owner',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct MetaStablePool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endTime',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStarted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'currentValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStopped',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'OracleEnabledChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'rate',\n                type: 'uint256',\n            },\n        ],\n        name: 'PriceRateCacheUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IRateProvider',\n                name: 'provider',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'cacheDuration',\n                type: 'uint256',\n            },\n        ],\n        name: 'PriceRateProviderSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableOracle',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAmplificationParameter',\n        outputs: [\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'bool', name: 'isUpdating', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'precision',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLargestSafeQueryWindow',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastInvariant',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lastInvariant',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastInvariantAmp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IPriceOracle.Variable',\n                name: 'variable',\n                type: 'uint8',\n            },\n        ],\n        name: 'getLatest',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOracleMiscData',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: 'logInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logTotalSupply',\n                type: 'int256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'oracleSampleCreationTimestamp',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'oracleIndex',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'oracleEnabled', type: 'bool' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IPriceOracle.Variable',\n                        name: 'variable',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'ago',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IPriceOracle.OracleAccumulatorQuery[]',\n                name: 'queries',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'getPastAccumulators',\n        outputs: [\n            {\n                internalType: 'int256[]',\n                name: 'results',\n                type: 'int256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getPriceRateCache',\n        outputs: [\n            { internalType: 'uint256', name: 'rate', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'duration',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'expires', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRateProviders',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'providers',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],\n        name: 'getSample',\n        outputs: [\n            {\n                internalType: 'int256',\n                name: 'logPairPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogPairPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logBptPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogBptPrice',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'logInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'accLogInvariant',\n                type: 'int256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'timestamp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IPriceOracle.Variable',\n                        name: 'variable',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'secs',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'ago',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IPriceOracle.OracleAverageQuery[]',\n                name: 'queries',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'getTimeWeightedAverage',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'results',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTotalSamples',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'indexIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'indexOut', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'duration', type: 'uint256' },\n        ],\n        name: 'setPriceRateCacheDuration',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'rawEndValue',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n        ],\n        name: 'startAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'stopAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'updatePriceRateCache',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const phantomStablePoolAbi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IVault',\n                        name: 'vault',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'contract IRateProvider[]',\n                        name: 'rateProviders',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'tokenRateCacheDurations',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amplificationParameter',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'pauseWindowDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'bufferPeriodDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'owner',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct StablePhantomPool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endTime',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStarted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'currentValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStopped',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'CachedProtocolSwapFeePercentageUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bptAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'DueProtocolFeeIncreased',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'rate',\n                type: 'uint256',\n            },\n        ],\n        name: 'TokenRateCacheUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IRateProvider',\n                name: 'provider',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'cacheDuration',\n                type: 'uint256',\n            },\n        ],\n        name: 'TokenRateProviderSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAmplificationParameter',\n        outputs: [\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'bool', name: 'isUpdating', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'precision',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBptIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCachedProtocolSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDueProtocolFeeBptAmount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastInvariant',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lastInvariant',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastInvariantAmp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumBpt',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRateProviders',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'providers',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getScalingFactor',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getTokenRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getTokenRateCache',\n        outputs: [\n            { internalType: 'uint256', name: 'rate', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'duration',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'expires', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVirtualSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'swapRequest',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'indexIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'indexOut', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: '',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'duration', type: 'uint256' },\n        ],\n        name: 'setTokenRateCacheDuration',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'rawEndValue',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n        ],\n        name: 'startAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'stopAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'updateCachedProtocolSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'updateTokenRateCache',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const weightedFactoryV4Abi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'string',\n                name: 'factoryVersion',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'poolVersion',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'FactoryDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'string',\n                name: 'name',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'symbol',\n                type: 'string',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'normalizedWeights',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'rateProviders',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'salt',\n                type: 'bytes32',\n            },\n        ],\n        name: 'create',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'selector',\n                type: 'bytes4',\n            },\n        ],\n        name: 'getActionId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCode',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCodeContracts',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'contractA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'contractB',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseConfiguration',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeePercentagesProvider',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'isPoolFromFactory',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const weightedPoolAbi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'normalizedWeights',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'contract IRateProvider[]',\n                        name: 'rateProviders',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'assetManagers',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct WeightedPool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'string', name: 'version', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'feeType',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'protocolFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'ProtocolFeePercentageCacheUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'RecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getATHRateProduct',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getActualSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastPostJoinExitInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNormalizedWeights',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'feeType', type: 'uint256' }],\n        name: 'getProtocolFeePercentageCache',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolSwapFeeDelegation',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRateProviders',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider[]',\n                name: '',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'inRecoveryMode',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'updateProtocolFeePercentageCache',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const linearPoolAbi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IVault',\n                        name: 'vault',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'mainToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'wrappedToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'assetManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'upperTarget',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'pauseWindowDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'bufferPeriodDuration',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'owner',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'version',\n                        type: 'string',\n                    },\n                ],\n                internalType: 'struct AaveLinearPool.ConstructorArgs',\n                name: 'args',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'RecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lowerTarget',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'upperTarget',\n                type: 'uint256',\n            },\n        ],\n        name: 'TargetsSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBptIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMainIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMainToken',\n        outputs: [\n            { internalType: 'contract IERC20', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTargets',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lowerTarget',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'upperTarget',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVirtualSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedIndex',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedToken',\n        outputs: [\n            { internalType: 'contract IERC20', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWrappedTokenRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'inRecoveryMode',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFees',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'dueProtocolFees',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'indexIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'indexOut', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: '', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: '', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'newLowerTarget',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'newUpperTarget',\n                type: 'uint256',\n            },\n        ],\n        name: 'setTargets',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const stablePoolAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'symbol', type: 'string' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amplificationParameter',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endTime',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStarted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'currentValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStopped',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAmplificationParameter',\n        outputs: [\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'bool', name: 'isUpdating', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'precision',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'swapRequest',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'indexIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'indexOut', type: 'uint256' },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'rawEndValue',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n        ],\n        name: 'startAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'stopAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","import { PublicClient, Address, Abi, Hex } from 'viem';\nimport { getPoolAddress } from '../utils';\nimport { OnChainPoolData } from './enrichers/onChainPoolDataEnricher';\nimport { SwapOptions } from '../types';\n\nimport * as abis from '../abi';\n\nconst requiredAbis = [\n    ...abis.composabableStablePoolV5Abi,\n    ...abis.fxPoolAbi,\n    ...abis.gyroEV2Abi,\n    ...abis.linearPoolAbi,\n    ...abis.liquidityBootstrappingPoolAbi,\n    ...abis.managedPoolAbi,\n    ...abis.metaStablePoolAbi,\n    ...abis.phantomStablePoolAbi,\n    ...abis.stablePoolAbi,\n    ...abis.weightedPoolAbi,\n    ...abis.vaultAbi,\n];\n\n// remove duplicate abi elements\nconst uniqueAbiElements = new Map(\n    requiredAbis.map((abi) => [JSON.stringify(abi), abi]),\n);\n\n// filters out non-function abi elements\nconst abi = Array.from(uniqueAbiElements.values()).filter(\n    (a) => a.type === 'function',\n) as Abi;\n\ntype Result =\n    | {\n          error: Error;\n          result?: undefined;\n          status: 'failure';\n      }\n    | {\n          error?: undefined;\n          result: any;\n          status: 'success';\n      };\n[];\n\ntype Results = Result[];\n\n// Extract the functionName property values into a union type\ntype FunctionNameUnion = string;\n\ntype BuildReturn = {\n    address: Address;\n    abi: Abi;\n    functionName: FunctionNameUnion;\n    args?: readonly [`0x${string}`];\n};\n\nconst getTotalSupplyFn = (poolType: string) => {\n    if (poolType.includes('Linear') || ['StablePhantom'].includes(poolType)) {\n        return 'getVirtualSupply';\n    }\n    if (poolType === 'ComposableStable') {\n        return 'getActualSupply';\n    }\n    return 'totalSupply';\n};\n\nconst getSwapFeeFn = (poolType: string) => {\n    if (poolType === 'Element') {\n        return 'percentFee';\n    }\n    if (poolType === 'FX') {\n        return 'protocolPercentFee';\n    }\n    return 'getSwapFeePercentage';\n};\n\nconst defaultCalls = {\n    count: 4,\n    build: (id: string, poolType: string, vault: Address): BuildReturn[] => [\n        {\n            address: vault,\n            abi,\n            functionName: 'getPoolTokens',\n            args: [id as Hex],\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: getTotalSupplyFn(poolType),\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: getSwapFeeFn(poolType),\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getPausedState',\n        },\n    ],\n    parse: (results: Results, shift: number) => {\n        return {\n            balances: results[shift].result[1],\n            totalSupply: results[shift + 1].result,\n            swapFee: results[shift + 2].result,\n            isPaused: results[shift + 3].result,\n        };\n    },\n};\n\n// These don't exist on some earlier pool versions\nconst defaultCallsAux = {\n    count: 2 + defaultCalls.count,\n    build: (id: string, poolType: string, vault: Address): BuildReturn[] => [\n        ...defaultCalls.build(id, poolType, vault),\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'inRecoveryMode',\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getScalingFactors',\n        },\n    ],\n    parse: (results: Results, shift: number) => ({\n        ...defaultCalls.parse(results, shift),\n        ...{\n            inRecoveryMode: results[shift + defaultCalls.count].result,\n            scalingFactors: results[shift + defaultCalls.count + +1].result,\n        },\n    }),\n};\n\nconst weightedCalls = {\n    count: 1,\n    build: (id: string): BuildReturn[] => [\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getNormalizedWeights',\n        },\n    ],\n    parse: (results: Results, shift: number) => ({\n        weights: results[shift].result,\n    }),\n};\n\nconst linearCalls = {\n    count: 3,\n    build: (id: string): BuildReturn[] => [\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getTargets',\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getWrappedTokenRate',\n        },\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getRate',\n        },\n    ],\n    parse: (results: Results, shift: number) => ({\n        linearTargets: results[shift].result,\n        wrappedTokenRate: results[shift + 1].result,\n        poolRate: results[shift + 2].result,\n    }),\n};\n\nconst stableCalls = {\n    count: 1,\n    build: (id: string): BuildReturn[] => [\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getAmplificationParameter',\n        },\n    ],\n    parse: (results: Results, shift: number) => {\n        return {\n            amp: results[shift].result[0],\n        };\n    },\n};\n\nconst gyroECalls = {\n    count: 1,\n    build: (id: string): BuildReturn[] => [\n        {\n            address: getPoolAddress(id) as `0x${string}`,\n            abi,\n            functionName: 'getTokenRates',\n        },\n    ],\n    parse: (results: Results, shift: number) => ({\n        tokenRates: results[shift].result,\n    }),\n};\n\nconst poolTypeCalls = (\n    poolType: string,\n    poolTypeVersion: number,\n    vault: Address,\n) => {\n    const do_nothing = {\n        count: 0,\n        build: () => [],\n        parse: () => ({}),\n    };\n\n    switch (poolType) {\n        case 'Weighted':\n        case 'LiquidityBootstrapping':\n        case 'Investment': {\n            if (poolTypeVersion === 1) {\n                return {\n                    count: defaultCalls.count + weightedCalls.count,\n                    build: (id: string) => [\n                        ...defaultCalls.build(id, poolType, vault),\n                        ...weightedCalls.build(id),\n                    ],\n                    parse: (results: Results, shift: number) => ({\n                        ...defaultCalls.parse(results, shift),\n                        ...weightedCalls.parse(\n                            results,\n                            shift + defaultCalls.count,\n                        ),\n                    }),\n                };\n            }\n            return {\n                count: defaultCallsAux.count + weightedCalls.count,\n                build: (id: string) => [\n                    ...defaultCallsAux.build(id, poolType, vault),\n                    ...weightedCalls.build(id),\n                ],\n                parse: (results: Results, shift: number) => ({\n                    ...defaultCallsAux.parse(results, shift),\n                    ...weightedCalls.parse(\n                        results,\n                        shift + defaultCallsAux.count,\n                    ),\n                }),\n            };\n        }\n        case 'Stable': {\n            if (poolTypeVersion === 1) {\n                return {\n                    count: defaultCalls.count + stableCalls.count,\n                    build: (id: string) => [\n                        ...defaultCalls.build(id, poolType, vault),\n                        ...stableCalls.build(id),\n                    ],\n                    parse: (results: Results, shift: number) => ({\n                        ...defaultCalls.parse(results, shift),\n                        ...stableCalls.parse(\n                            results,\n                            shift + defaultCalls.count,\n                        ),\n                    }),\n                };\n            }\n            return {\n                count: defaultCallsAux.count + stableCalls.count,\n                build: (id: string) => [\n                    ...defaultCallsAux.build(id, poolType, vault),\n                    ...stableCalls.build(id),\n                ],\n                parse: (results: Results, shift: number) => ({\n                    ...defaultCallsAux.parse(results, shift),\n                    ...stableCalls.parse(\n                        results,\n                        shift + defaultCallsAux.count,\n                    ),\n                }),\n            };\n        }\n        case 'StablePhantom':\n        case 'MetaStable':\n            return {\n                count: defaultCalls.count + stableCalls.count,\n                build: (id: string) => [\n                    ...defaultCalls.build(id, poolType, vault),\n                    ...stableCalls.build(id),\n                ],\n                parse: (results: Results, shift: number) => ({\n                    ...defaultCalls.parse(results, shift),\n                    ...stableCalls.parse(results, shift + defaultCalls.count),\n                }),\n            };\n        case 'ComposableStable': {\n            return {\n                count: defaultCallsAux.count + stableCalls.count,\n                build: (id: string) => [\n                    ...defaultCallsAux.build(id, poolType, vault),\n                    ...stableCalls.build(id),\n                ],\n                parse: (results: Results, shift: number) => ({\n                    ...defaultCallsAux.parse(results, shift),\n                    ...stableCalls.parse(\n                        results,\n                        shift + defaultCallsAux.count,\n                    ),\n                }),\n            };\n        }\n        case 'GyroE':\n            if (poolTypeVersion === 1) {\n                return defaultCalls;\n            }\n            return {\n                count: defaultCalls.count + gyroECalls.count,\n                build: (id: string) => [\n                    ...defaultCalls.build(id, poolType, vault),\n                    ...gyroECalls.build(id),\n                ],\n                parse: (results: Results, shift: number) => ({\n                    ...defaultCalls.parse(results, shift),\n                    ...gyroECalls.parse(results, shift + defaultCalls.count),\n                }),\n            };\n\n        case 'AaveLinear':\n            if (poolTypeVersion === 1) {\n                return {\n                    count: defaultCalls.count + linearCalls.count,\n                    build: (id: string) => [\n                        ...defaultCalls.build(id, poolType, vault),\n                        ...linearCalls.build(id),\n                    ],\n                    parse: (results: Results, shift: number) => ({\n                        ...defaultCalls.parse(results, shift),\n                        ...linearCalls.parse(\n                            results,\n                            shift + defaultCalls.count,\n                        ),\n                    }),\n                };\n            }\n            return defaultCallsAux;\n        default:\n            return do_nothing;\n    }\n};\n\nexport const fetchAdditionalPoolData = async (\n    vault: Address,\n    pools: {\n        id: string;\n        poolType: string;\n        poolTypeVersion: number;\n    }[],\n    client: PublicClient,\n    options: SwapOptions,\n    batchSize: number,\n): Promise<OnChainPoolData[]> => {\n    if (pools.length === 0) {\n        return [];\n    }\n\n    const calls = pools.flatMap(({ id, poolType, poolTypeVersion }) =>\n        poolTypeCalls(poolType, poolTypeVersion, vault).build(\n            id,\n            poolType,\n            vault,\n        ),\n    );\n\n    const results = await client.multicall({\n        contracts: calls,\n        batchSize: batchSize,\n        blockNumber: options.block,\n    });\n\n    results.forEach((r, i) => {\n        if (r.status === 'failure')\n            console.error(\n                'Failed request in multicall',\n                calls[i].address,\n                calls[i].functionName,\n                r.error,\n            );\n    });\n\n    let shift = 0;\n\n    return pools.map(({ id, poolType, poolTypeVersion }) => {\n        const result = {\n            id,\n            ...poolTypeCalls(poolType, poolTypeVersion, vault).parse(\n                results,\n                shift,\n            ),\n        } as OnChainPoolData;\n        shift += poolTypeCalls(poolType, poolTypeVersion, vault).count;\n        return result;\n    });\n};\n","import { default as retry } from 'async-retry';\n\nexport async function fetchWithRetry<T>(\n    fetch: () => Promise<T>,\n    config = { retries: 1 },\n): Promise<T | null> {\n    let response: T | null = null;\n    await retry(\n        async () => {\n            response = await fetch();\n            return response;\n        },\n        {\n            retries: config.retries,\n        },\n    );\n\n    return response;\n}\n","import {\n    GetPoolsResponse,\n    PoolDataProvider,\n    ProviderSwapOptions,\n    RawPool,\n} from '../types';\nimport { fetchWithRetry } from '../../utils/fetch';\nimport { SUBGRAPH_URLS, brickedPools } from '../../utils';\n\n// biome-ignore lint/complexity/useLiteralKeys: BigInt prototype type doesn't have a toJSON method, which causes error for string literals\nBigInt.prototype['toJSON'] = function () {\n    return this.toString();\n};\n\nconst PAGE_SIZE = 1000;\nconst SECS_IN_HOUR = 3600n;\n\ninterface PoolUpdate {\n    poolId: {\n        id: string;\n    };\n}\n\ninterface SubgraphPoolProviderConfig {\n    retries: number;\n    timeout: number;\n    //pool type and id filters\n    poolTypeIn?: string[];\n    poolTypeNotIn?: string[];\n    poolIdIn?: string[];\n    poolIdNotIn?: string[];\n    // whether to include a query for active gradualWeightUpdates\n    loadActiveWeightUpdates?: boolean;\n    // whether to include a query for active ampUpdates\n    loadActiveAmpUpdates?: boolean;\n    // whether to apply pool filtering on the gql query or in code. Depending on the subgraph\n    // endpoint, it is sometimes more efficient to query the full data set and filter post.\n    addFilterToPoolQuery?: boolean;\n    // if you need to fetch additional pool fields, you can provide them here.\n    // this field is typed as a string to allow for the expansion of nested field values\n    gqlAdditionalPoolQueryFields?: string;\n}\n\nexport class SubgraphPoolProvider implements PoolDataProvider {\n    private readonly url: string;\n    private readonly config: SubgraphPoolProviderConfig;\n\n    constructor(\n        chainId: number,\n        subgraphUrl?: string,\n        config?: Partial<SubgraphPoolProviderConfig>,\n    ) {\n        // if subgraphUrl isnt provided, use the default for the chainId\n        const defaultSubgraphUrl = SUBGRAPH_URLS[chainId];\n        this.url = subgraphUrl ?? defaultSubgraphUrl;\n\n        const hasFilterConfig =\n            config &&\n            (config.poolIdNotIn ||\n                config.poolIdIn ||\n                config.poolTypeIn ||\n                config.poolTypeNotIn);\n\n        this.config = {\n            retries: 2,\n            timeout: 30000,\n            loadActiveAmpUpdates: true,\n            // we assume a public subgraph is being used, so default to false\n            addFilterToPoolQuery: false,\n            // by default, we exclude pool types with weight updates.\n            // if any filtering config is provided, this exclusion is removed.\n            poolTypeNotIn: !hasFilterConfig\n                ? ['Investment', 'LiquidityBootstrapping']\n                : undefined,\n            ...config,\n            poolIdNotIn: [...(config?.poolIdNotIn ?? []), ...brickedPools],\n        };\n    }\n\n    public async getPools(\n        options: ProviderSwapOptions,\n    ): Promise<GetPoolsResponse> {\n        const response = await fetchWithRetry<GetPoolsResponse>(() =>\n            this.fetchDataFromSubgraph(options),\n        );\n\n        return {\n            ...response,\n            pools: response?.pools || [],\n            syncedToBlockNumber: response?.syncedToBlockNumber || 0n,\n        };\n    }\n\n    private async fetchDataFromSubgraph(\n        options: ProviderSwapOptions,\n    ): Promise<GetPoolsResponse> {\n        let ampUpdates: PoolUpdate[] = [];\n        let syncedToBlockNumber = 0n;\n        let lastId = '';\n        let pools: RawPool[] = [];\n        let poolsPage: RawPool[] = [];\n        const nowMinusOneHour = options.timestamp - SECS_IN_HOUR;\n        const nowPlusOneHour = options.timestamp + SECS_IN_HOUR;\n\n        do {\n            const query = this.getPoolsQuery(lastId === '');\n            const variables = {\n                pageSize: PAGE_SIZE,\n                where: {\n                    id_gt: lastId || undefined,\n                    ...(this.config.addFilterToPoolQuery\n                        ? {\n                              totalShares_gt: 0.000000000001,\n                              swapEnabled: true,\n                              poolType_in: this.config.poolTypeIn,\n                              poolType_not_in: this.config.poolTypeNotIn,\n                              id_in: this.config.poolIdIn,\n                              id_not_in: this.config.poolIdNotIn,\n                          }\n                        : {}),\n                },\n                ...(options?.block\n                    ? {\n                          block: {\n                              number: Number(options.block),\n                          },\n                      }\n                    : {}),\n                ampUpdatesWhere: {\n                    endTimestamp_gte: nowMinusOneHour,\n                    startTimestamp_lte: nowPlusOneHour,\n                },\n                weightedUpdatesWhere: {\n                    endTimestamp_gte: nowMinusOneHour,\n                    startTimestamp_lte: nowPlusOneHour,\n                },\n            };\n\n            const response = await fetch(this.url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    query,\n                    variables,\n                }),\n            });\n\n            const poolsResult = await response.json();\n\n            poolsPage = poolsResult.data.pools;\n            pools = pools.concat(poolsPage);\n\n            if (lastId === '') {\n                ampUpdates = poolsResult.ampUpdates || [];\n            }\n\n            if (poolsResult._meta) {\n                syncedToBlockNumber = BigInt(poolsResult._meta.block.number);\n            }\n\n            lastId = pools[pools.length - 1]!.id;\n        } while (poolsPage.length === PAGE_SIZE);\n\n        // we apply the filter after querying if not set in the config\n        if (!this.config.addFilterToPoolQuery) {\n            pools = pools.filter((pool) => this.poolMatchesFilter(pool));\n        }\n\n        // Until a full graft finishes on polygon/arbitrum, there are instances where the index is not\n        // present. For these instances, we default to the index of the token in the array.\n        pools = pools.map((pool) => ({\n            ...pool,\n            tokens: pool.tokens.map((token, index) => ({\n                ...token,\n                index: typeof token.index === 'number' ? token.index : index,\n            })),\n        }));\n\n        return {\n            pools,\n            poolsWithActiveAmpUpdates: ampUpdates.map(\n                (update) => update.poolId.id,\n            ),\n            syncedToBlockNumber,\n        };\n    }\n\n    private getPoolsQuery(isFirstQuery: boolean) {\n        const {\n            loadActiveAmpUpdates,\n            loadActiveWeightUpdates,\n            gqlAdditionalPoolQueryFields,\n        } = this.config;\n\n        const blockNumberFragment = `\n            _meta {\n                block {\n                    number\n                }\n            }\n        `;\n\n        const ampUpdatesFragment = `\n            ampUpdates(where: $ampUpdatesWhere) {\n                poolId {\n                    id\n                }\n            }\n        `;\n\n        const weightUpdatesFragment = `\n            gradualWeightUpdates(where: $weightedUpdatesWhere) {\n                poolId {\n                    id\n                }\n            }\n        `;\n\n        return `\n            query poolsQuery(\n                $pageSize: Int!\n                $where: Pool_filter\n                $block: Block_height\n                $ampUpdatesWhere: AmpUpdate_filter\n                $weightedUpdatesWhere: GradualWeightUpdate_filter\n            ) {\n                pools(first: $pageSize, where: $where, block: $block) {\n                    id\n                    address\n                    poolType\n                    poolTypeVersion\n                    name\n                    tokens {\n                        address\n                        balance\n                        weight\n                        priceRate\n                        decimals\n                        name\n                        index\n                        symbol\n                        token {\n                            latestFXPrice\n                          }\n                    }\n                    tokensList\n                    swapEnabled\n                    swapFee\n                    amp\n                    totalLiquidity\n                    totalShares\n                    mainIndex\n                    wrappedIndex\n                    lowerTarget\n                    upperTarget\n                    alpha\n                    beta\n                    c\n                    delta\n                    dSq\n                    epsilon\n                    lambda\n                    root3Alpha\n                    s\n                    sqrtAlpha\n                    sqrtBeta\n                    tauAlphaX\n                    tauAlphaY\n                    tauBetaX\n                    tauBetaY\n                    u\n                    v\n                    w\n                    z\n                    ${gqlAdditionalPoolQueryFields || ''}\n                }\n                ${isFirstQuery ? blockNumberFragment : ''}\n                ${\n                    isFirstQuery && loadActiveAmpUpdates\n                        ? ampUpdatesFragment\n                        : ''\n                }\n                ${\n                    isFirstQuery && loadActiveWeightUpdates\n                        ? weightUpdatesFragment\n                        : ''\n                }\n            }\n        `;\n    }\n\n    private poolMatchesFilter(pool: RawPool) {\n        if (\n            !pool.swapEnabled ||\n            pool.totalShares === '0.000000000001' ||\n            pool.totalShares === '0'\n        ) {\n            return false;\n        }\n\n        if (\n            this.config.poolTypeIn &&\n            !this.config.poolTypeIn.includes(pool.poolType)\n        ) {\n            return false;\n        }\n\n        if (this.config.poolTypeNotIn?.includes(pool.poolType)) {\n            return false;\n        }\n\n        if (this.config.poolIdIn && !this.config.poolIdIn.includes(pool.id)) {\n            return false;\n        }\n\n        if (this.config.poolIdNotIn?.includes(pool.id)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { PoolType } from '../types';\n\nexport const poolTypeFromApi = {\n    WEIGHTED: PoolType.Weighted,\n    COMPOSABLE_STABLE: PoolType.ComposableStable,\n    GYRO3: PoolType.Gyro3,\n    GYRO2: PoolType.Gyro2,\n    GYROE: PoolType.GyroE,\n};\n","import { BalancerApiClient } from '../../client';\nimport { PoolState } from '../../../../../entities';\nimport { poolTypeFromApi } from '../../../../../utils/poolTypeMapper';\n\nexport class Pools {\n    readonly poolStateQuery = `query GetPool($id: String!){\n    poolGetPool(id:$id) {\n      id\n      address\n      name\n      type\n      version\n      ... on GqlPoolWeighted {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolStable {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolComposableStable {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolGyro {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolLiquidityBootstrapping {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolElement {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n      ... on GqlPoolLiquidityBootstrapping {\n        tokens {\n          ... on GqlPoolTokenBase {\n            address\n             decimals\n            index\n          }\n        }\n      }\n    }\n}`;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    async fetchPoolState(id: string): Promise<PoolState> {\n        const { data } = await this.balancerApiClient.fetch({\n            query: this.poolStateQuery,\n            variables: {\n                id,\n            },\n        });\n        const poolGetPool: PoolState = data.poolGetPool;\n        return { ...poolGetPool, type: poolTypeFromApi[poolGetPool.type] };\n    }\n}\n","import { ChainId } from '../../../../utils';\n\nexport class BalancerApiClient {\n    apiUrl: string;\n    chainId: ChainId;\n    constructor(apiUrl: string, chainId: ChainId) {\n        this.apiUrl = apiUrl;\n        this.chainId = chainId;\n    }\n\n    async fetch(requestQuery: {\n        operationName?: string;\n        query: string;\n        variables?: any;\n    }) {\n        const response = await fetch(this.apiUrl, {\n            method: 'post',\n            body: JSON.stringify(requestQuery),\n            headers: {\n                'Content-Type': 'application/json',\n                ChainId: this.chainId.toString(),\n            },\n        });\n        return response.json();\n    }\n}\n","import { BalancerApiClient } from '../../client';\nimport { NestedPool, NestedPoolState } from '../../../../../entities';\nimport { MinimalToken } from '../../../../types';\nimport { Address, Hex, PoolType } from '../../../../../types';\n\ntype PoolGetPool = {\n    id: Hex;\n    address: Address;\n    name: string;\n    type: string;\n    version: string;\n    nestingType: string;\n    allTokens: {\n        address: Address;\n        name: string;\n        symbol: string;\n        decimals: number;\n        isMainToken: boolean;\n    }[];\n    tokens: {\n        index: number;\n        name: string;\n        symbol: string;\n        address: Address;\n        decimals: number;\n        pool?: {\n            id: Hex;\n            name: string;\n            symbol: string;\n            address: Address;\n            type: string;\n            tokens: {\n                index: number;\n                name: string;\n                symbol: string;\n                address: Address;\n                decimals: number;\n            }[];\n        };\n    }[];\n};\n\nexport class NestedPools {\n    readonly nestedPoolStateQuery = `\n    query GetPool($id: String!){\n      poolGetPool(id:$id) {\n        id\n        address\n        name\n        type\n        version\n        allTokens {\n          id\n          address\n          name\n          symbol\n          decimals\n          isNested\n          isPhantomBpt\n          isMainToken\n        }\n        ... on GqlPoolWeighted {\n          nestingType\n          tokens {\n            ... on GqlPoolToken {\n              ...GqlPoolToken\n            }\n            ... on GqlPoolTokenLinear {\n              ...GqlPoolTokenLinear\n            }\n            ... on GqlPoolTokenPhantomStable {\n              ...GqlPoolTokenPhantomStable\n            }\n          }\n        }\n        ... on GqlPoolPhantomStable {\n          amp\n          nestingType\n          tokens {\n            ... on GqlPoolToken {\n              ...GqlPoolToken\n            }\n            ... on GqlPoolTokenLinear {\n              ...GqlPoolTokenLinear\n            }\n            ... on GqlPoolTokenPhantomStable {\n              ...GqlPoolTokenPhantomStable\n            }\n          }\n        }\n        ... on GqlPoolLiquidityBootstrapping {\n          name\n          nestingType\n          tokens {\n            ... on GqlPoolToken {\n              ...GqlPoolToken\n            }\n            ... on GqlPoolTokenLinear {\n              ...GqlPoolTokenLinear\n            }\n            ... on GqlPoolTokenPhantomStable {\n              ...GqlPoolTokenPhantomStable\n            }\n          }\n        }\n      }\n    }\n\n    fragment GqlPoolToken on GqlPoolToken {\n      index\n      name\n      symbol\n      address\n      decimals\n    }\n    \n    fragment GqlPoolTokenLinear on GqlPoolTokenLinear {\n      index\n      name\n      symbol\n      address\n      decimals\n      pool {\n        id\n        name\n        symbol\n        address\n        type\n        tokens {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    \n    fragment GqlPoolTokenPhantomStable on GqlPoolTokenPhantomStable {\n      index\n      name\n      symbol\n      address\n      decimals\n      pool {\n        id\n        name\n        symbol\n        address\n        type\n        tokens {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n          ... on GqlPoolTokenLinear {\n            ...GqlPoolTokenLinear\n          }\n        }\n      }\n    }`;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    fetchNestedPoolState = async (id: string): Promise<NestedPoolState> => {\n        const {\n            data: { poolGetPool },\n        } = await this.balancerApiClient.fetch({\n            query: this.nestedPoolStateQuery,\n            variables: {\n                id,\n            },\n        });\n\n        const nestedPoolState = this.mapPoolToNestedPoolState(\n            poolGetPool as PoolGetPool,\n        );\n\n        return nestedPoolState;\n    };\n\n    mapPoolToNestedPoolState = (pool: PoolGetPool): NestedPoolState => {\n        const pools: NestedPool[] = [\n            {\n                id: pool.id,\n                address: pool.address,\n                type: this.mapPoolType(pool.type),\n                level: 1,\n                tokens: pool.tokens.map((t) => {\n                    const minimalToken: MinimalToken = {\n                        address: t.address,\n                        decimals: t.decimals,\n                        index: t.index,\n                    };\n                    return minimalToken;\n                }),\n            },\n        ];\n\n        pool.tokens.forEach((token) => {\n            // Token represents nested pools only nested if they have a pool property\n            if (token.pool === undefined) return;\n\n            // map API result to NestedPool\n            pools.push({\n                id: token.pool.id,\n                address: token.pool.address,\n                level: 0,\n                type: this.mapPoolType(token.pool.type),\n                tokens: token.pool.tokens.map((t) => {\n                    const minimalToken: MinimalToken = {\n                        address: t.address,\n                        decimals: t.decimals,\n                        index: t.index,\n                    };\n                    return minimalToken;\n                }),\n            });\n        });\n\n        const mainTokens = pool.allTokens\n            .filter((t) => t.isMainToken)\n            .map((t) => {\n                return {\n                    address: t.address,\n                    decimals: t.decimals,\n                };\n            });\n\n        return {\n            pools,\n            mainTokens,\n        } as NestedPoolState;\n    };\n\n    mapPoolType = (type: string): PoolType => {\n        switch (type) {\n            case 'WEIGHTED':\n                return PoolType.Weighted;\n            case 'PHANTOM_STABLE':\n                return PoolType.ComposableStable;\n            default:\n                throw new Error(`Unsupported pool type ${type}`);\n        }\n    };\n}\n","import { Pools } from './modules/pool-state';\nimport { BalancerApiClient } from './client';\nimport { ChainId } from '../../../utils';\nimport { NestedPools } from './modules/nested-pool-state';\n\nexport class BalancerApi {\n    balancerApiClient: BalancerApiClient;\n    pools: Pools;\n    nestedPools: NestedPools;\n\n    constructor(balancerApiUrl: string, chainId: ChainId) {\n        this.balancerApiClient = new BalancerApiClient(balancerApiUrl, chainId);\n        this.pools = new Pools(this.balancerApiClient);\n        this.nestedPools = new NestedPools(this.balancerApiClient);\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { Address, Hex } from '../../types';\nimport { Token } from '../token';\nimport { BALANCER_RELAYER } from '../../utils';\nimport { Relayer } from '../relayer';\nimport { encodeCalls } from './encodeCalls';\nimport { TokenAmount } from '../tokenAmount';\nimport { balancerRelayerAbi } from '../../abi';\nimport {\n    AddLiquidityNestedInput,\n    AddLiquidityNestedQueryOutput,\n    AddLiquidityNestedCallInput,\n} from './types';\nimport { doAddLiquidityNestedQuery } from './doAddLiquidityNestedQuery';\nimport { getQueryCallsAttributes } from './getQueryCallsAttributes';\nimport { validateInputs } from './validateInputs';\nimport { NestedPoolState } from '../types';\n\nexport class AddLiquidityNested {\n    async query(\n        input: AddLiquidityNestedInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<AddLiquidityNestedQueryOutput> {\n        const amountsIn = validateInputs(input, nestedPoolState);\n\n        const callsAttributes = getQueryCallsAttributes(\n            input,\n            nestedPoolState.pools,\n        );\n\n        const { encodedCalls } = encodeCalls(callsAttributes);\n\n        // append peek call to get bptOut\n        const peekCall = Relayer.encodePeekChainedReferenceValue(\n            callsAttributes[callsAttributes.length - 1].outputReference,\n        );\n        encodedCalls.push(peekCall);\n\n        const encodedMulticall = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'vaultActionsQueryMulticall',\n            args: [encodedCalls],\n        });\n\n        const peekedValue = await doAddLiquidityNestedQuery(\n            input.chainId,\n            input.rpcUrl,\n            input.accountAddress,\n            encodedMulticall,\n        );\n\n        const tokenOut = new Token(\n            input.chainId,\n            callsAttributes[callsAttributes.length - 1].poolAddress,\n            18,\n        );\n        const bptOut = TokenAmount.fromRawAmount(tokenOut, peekedValue);\n\n        return { callsAttributes, amountsIn, bptOut };\n    }\n\n    buildCall(input: AddLiquidityNestedCallInput): {\n        call: Hex;\n        to: Address;\n        value: bigint | undefined;\n        minBptOut: bigint;\n    } {\n        // apply slippage to bptOut\n        const minBptOut = input.slippage.removeFrom(input.bptOut.amount);\n\n        // update last call with minBptOut limit in place\n        input.callsAttributes[input.callsAttributes.length - 1] = {\n            ...input.callsAttributes[input.callsAttributes.length - 1],\n            minBptOut,\n        };\n\n        const { encodedCalls, values } = encodeCalls(input.callsAttributes);\n\n        // prepend relayer approval if provided\n        if (input.relayerApprovalSignature !== undefined) {\n            encodedCalls.unshift(\n                Relayer.encodeSetRelayerApproval(\n                    BALANCER_RELAYER[input.callsAttributes[0].chainId],\n                    true,\n                    input.relayerApprovalSignature,\n                ),\n            );\n        }\n\n        const call = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'multicall',\n            args: [encodedCalls],\n        });\n\n        // aggregate values from all calls\n        const accumulatedValue = values.reduce((acc, value) => {\n            return acc + value;\n        }, 0n);\n\n        return {\n            call,\n            to: BALANCER_RELAYER[input.callsAttributes[0].chainId],\n            value: accumulatedValue,\n            minBptOut,\n        };\n    }\n}\n","import {\n    Client,\n    concat,\n    encodeFunctionData,\n    hexToBigInt,\n    pad,\n    PublicActions,\n    slice,\n    toHex,\n    WalletActions,\n} from 'viem';\nimport { Address, Hex } from '../../types';\nimport { batchRelayerLibraryAbi } from '../../abi/batchRelayerLibrary';\nimport { RelayerAuthorization } from './authorization';\nimport { vaultAbi } from '../../abi';\nimport { MAX_UINT256 } from '../../utils';\n\nexport class Relayer {\n    static CHAINED_REFERENCE_TEMP_PREFIX = '0xba10' as Hex; // Temporary reference: it is deleted after a read.\n    static CHAINED_REFERENCE_READONLY_PREFIX = '0xba11' as Hex; // Read-only reference: it is not deleted after a read.\n\n    static toChainedReference(key: bigint, isTemporary = true): bigint {\n        const prefix = isTemporary\n            ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n            : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n        // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n        const paddedKey = pad(toHex(key), { dir: 'left', size: 30 });\n        const chainedReferenceWithPrefix = concat([prefix, paddedKey]);\n        return hexToBigInt(chainedReferenceWithPrefix);\n    }\n\n    static fromChainedReference(ref: bigint): bigint {\n        const chainedReferenceWithoutPrefix = slice(toHex(ref), 2); // remove prefix\n        return hexToBigInt(chainedReferenceWithoutPrefix);\n    }\n\n    static encodePeekChainedReferenceValue(reference: bigint): Hex {\n        return encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'peekChainedReferenceValue',\n            args: [reference],\n        });\n    }\n\n    static encodeSetRelayerApproval(\n        relayerAddress: Address,\n        approved: boolean,\n        signature: Hex,\n    ): Hex {\n        return encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'setRelayerApproval',\n            args: [relayerAddress, approved, signature],\n        });\n    }\n\n    static signRelayerApproval = async (\n        relayerAddress: Address,\n        signerAddress: Address,\n        client: Client & WalletActions & PublicActions,\n    ): Promise<Hex> => {\n        const approval = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'setRelayerApproval',\n            args: [signerAddress, relayerAddress, true],\n        });\n\n        const signature =\n            await RelayerAuthorization.signSetRelayerApprovalAuthorization(\n                client,\n                signerAddress,\n                relayerAddress,\n                approval,\n            );\n\n        const encodedSignature =\n            RelayerAuthorization.encodeCalldataAuthorization(\n                '0x',\n                MAX_UINT256,\n                signature,\n            );\n\n        return encodedSignature;\n    };\n}\n","import {\n    Client,\n    concat,\n    hexToSignature,\n    pad,\n    PublicActions,\n    toHex,\n    WalletActions,\n} from 'viem';\nimport { BALANCER_VAULT, MAX_UINT256 } from '../../utils';\nimport { Address, Hex } from '../../types';\nimport { vaultAbi } from '../../abi';\n\nexport enum RelayerAction {\n    JoinPool = 'JoinPool',\n    ExitPool = 'ExitPool',\n    Swap = 'Swap',\n    BatchSwap = 'BatchSwap',\n    SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    static encodeCalldataAuthorization = (\n        calldata: Hex,\n        deadline: bigint,\n        signatureHex: Hex,\n    ): Hex => {\n        const encodedDeadline = pad(toHex(deadline), { size: 32 });\n        const { v, r, s } = hexToSignature(signatureHex);\n        const encodedV = pad(toHex(v), { size: 32 });\n        const encodedR = pad(r, { size: 32 });\n        const encodedS = pad(s, { size: 32 });\n        return concat([\n            calldata,\n            encodedDeadline,\n            encodedV,\n            encodedR,\n            encodedS,\n        ]);\n    };\n\n    static signJoinAuthorization = (\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.JoinPool,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signExitAuthorization = (\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.ExitPool,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signSwapAuthorization = (\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.Swap,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signBatchSwapAuthorization = (\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.BatchSwap,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signSetRelayerApprovalAuthorization = (\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.SetRelayerApproval,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signAuthorizationFor = async (\n        type: RelayerAction,\n        client: Client & WalletActions & PublicActions,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline: bigint = MAX_UINT256,\n        nonce?: bigint,\n    ): Promise<Hex> => {\n        const chainId = await client.getChainId();\n        const verifyingContract = BALANCER_VAULT;\n\n        const domain = {\n            name: 'Balancer V2 Vault',\n            version: '1',\n            chainId,\n            verifyingContract,\n        };\n\n        const types = {\n            [type]: [\n                { name: 'calldata', type: 'bytes' },\n                { name: 'sender', type: 'address' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint256' },\n            ],\n        };\n\n        let _nonce = nonce;\n        if (_nonce === undefined) {\n            _nonce = await client.readContract({\n                abi: vaultAbi,\n                address: verifyingContract,\n                functionName: 'getNextNonce',\n                args: [allowedSender],\n            });\n        }\n\n        const signature = client.signTypedData({\n            account: signerAddress,\n            domain,\n            types,\n            primaryType: type,\n            message: {\n                calldata: allowedCalldata,\n                sender: allowedSender,\n                nonce: _nonce,\n                deadline,\n            },\n        });\n\n        return signature;\n    };\n}\n","import { encodeAbiParameters } from 'viem';\nimport { Address } from '../../types';\nimport { AddLiquidityKind } from '../addLiquidity/types';\nimport {\n    AddLiquidityAmounts,\n    InitPoolAmounts,\n    RemoveLiquidityAmounts,\n} from '../types';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\n\nexport enum WeightedPoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,\n    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT = 3,\n}\n\nexport enum WeightedPoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    EXACT_BPT_IN_FOR_TOKENS_OUT = 1,\n    BPT_IN_FOR_EXACT_TOKENS_OUT = 2,\n    MANAGEMENT_FEE_TOKENS_OUT = 3,\n}\n\nexport class WeightedEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the User Data for initializing a WeightedPool\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeInitPoolUserData(amounts: InitPoolAmounts) {\n        return WeightedEncoder.initPool(amounts.maxAmountsIn);\n    }\n\n    /**\n     * Encodes the User Data for adding liquidity to a WeightedPool\n     * @param kind Kind of the Add Liquidity operation: Init, Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeAddLiquidityUserData(\n        kind: AddLiquidityKind,\n        amounts: AddLiquidityAmounts,\n    ) {\n        switch (kind) {\n            case AddLiquidityKind.Init:\n                throw new Error(\n                    'For this kind use initPool instead of addLiquidity',\n                );\n            case AddLiquidityKind.Unbalanced:\n                return WeightedEncoder.addLiquidityUnbalanced(\n                    amounts.maxAmountsIn,\n                    amounts.minimumBpt,\n                );\n            case AddLiquidityKind.SingleToken: {\n                if (amounts.tokenInIndex === undefined) throw Error('No Index');\n                return WeightedEncoder.addLiquiditySingleToken(\n                    amounts.minimumBpt,\n                    amounts.tokenInIndex,\n                );\n            }\n            case AddLiquidityKind.Proportional: {\n                return WeightedEncoder.addLiquidityProportional(\n                    amounts.minimumBpt,\n                );\n            }\n            default:\n                throw Error('Unsupported Add Liquidity Kind');\n        }\n    }\n\n    /**\n     * Encodes the User Data for removing liquidity from a WeightedPool\n     * @param kind Kind of the Remove Liquidity operation: Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be removed from the pool\n     * @returns\n     */\n    static encodeRemoveLiquidityUserData(\n        kind: RemoveLiquidityKind,\n        amounts: RemoveLiquidityAmounts,\n    ): Address {\n        switch (kind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return WeightedEncoder.removeLiquidityUnbalanced(\n                    amounts.minAmountsOut,\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.SingleToken:\n                if (amounts.tokenOutIndex === undefined)\n                    throw Error('No Index');\n\n                return WeightedEncoder.removeLiquiditySingleToken(\n                    amounts.maxBptAmountIn,\n                    amounts.tokenOutIndex,\n                );\n            case RemoveLiquidityKind.Proportional:\n                return WeightedEncoder.removeLiquidityProportional(\n                    amounts.maxBptAmountIn,\n                );\n            default:\n                throw Error('Unsupported Remove Liquidity Kind');\n        }\n    }\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static initPool = (amountsIn: bigint[]): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }],\n            [BigInt(WeightedPoolJoinKind.INIT), amountsIn],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static addLiquidityUnbalanced = (\n        amountsIn: bigint[],\n        minimumBPT: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT),\n                amountsIn,\n                minimumBPT,\n            ],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param tokenIndex - the index of the token to be provided as liquidity\n     */\n    static addLiquiditySingleToken = (\n        bptAmountOut: bigint,\n        tokenIndex: number,\n    ): Address => {\n        // if tokenIndex is provided, it's assumed to be an allTokensIn\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool proportionally to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     */\n    static addLiquidityProportional = (bptAmountOut: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param tokenIndex - the index of the token to removed from the pool\n     */\n    static removeLiquiditySingleToken = (\n        bptAmountIn: bigint,\n        tokenIndex: number,\n    ): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT),\n                bptAmountIn,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static removeLiquidityProportional = (bptAmountIn: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT),\n                bptAmountIn,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static removeLiquidityUnbalanced = (\n        amountsOut: bigint[],\n        maxBPTAmountIn: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT),\n                amountsOut,\n                maxBPTAmountIn,\n            ],\n        );\n}\n","import { TokenAmount } from '../tokenAmount';\nimport { Slippage } from '../slippage';\nimport { PoolState } from '../types';\nimport { Address, Hex, InputAmount } from '../../types';\n\nexport enum AddLiquidityKind {\n    Init = 'Init',\n    Unbalanced = 'Unbalanced',\n    SingleToken = 'SingleToken',\n    Proportional = 'Proportional',\n}\n\n// This will be extended for each pools specific input requirements\nexport type AddLiquidityBaseInput = {\n    chainId: number;\n    rpcUrl: string;\n    useNativeAssetAsWrappedAmountIn?: boolean;\n    fromInternalBalance?: boolean;\n};\n\nexport type AddLiquidityUnbalancedInput = AddLiquidityBaseInput & {\n    amountsIn: InputAmount[];\n    kind: AddLiquidityKind.Unbalanced;\n};\n\nexport type AddLiquiditySingleTokenInput = AddLiquidityBaseInput & {\n    bptOut: InputAmount;\n    tokenIn: Address;\n    kind: AddLiquidityKind.SingleToken;\n};\n\nexport type AddLiquidityProportionalInput = AddLiquidityBaseInput & {\n    bptOut: InputAmount;\n    kind: AddLiquidityKind.Proportional;\n};\n\nexport type AddLiquidityInput =\n    | AddLiquidityUnbalancedInput\n    | AddLiquiditySingleTokenInput\n    | AddLiquidityProportionalInput;\n\ntype AddLiquidityBaseQueryOutput = {\n    poolType: string;\n    poolId: Hex;\n    addLiquidityKind: AddLiquidityKind;\n    bptOut: TokenAmount;\n    amountsIn: TokenAmount[];\n    fromInternalBalance: boolean;\n    tokenInIndex?: number;\n    balancerVersion: 2 | 3;\n};\n\nexport type AddLiquidityWeightedQueryOutput = AddLiquidityBaseQueryOutput;\n\nexport type AddLiquidityComposableStableQueryOutput =\n    AddLiquidityBaseQueryOutput & {\n        bptIndex: number;\n    };\n\nexport type AddLiquidityQueryOutput =\n    | AddLiquidityWeightedQueryOutput\n    | AddLiquidityComposableStableQueryOutput;\n\ntype AddLiquidityBaseCall = {\n    slippage: Slippage;\n    sender: Address;\n    recipient: Address;\n};\n\nexport type AddLiquidityComposableStableCall = AddLiquidityBaseCall &\n    AddLiquidityComposableStableQueryOutput;\nexport type AddLiquidityWeightedCall = AddLiquidityBaseCall &\n    AddLiquidityBaseQueryOutput;\n\nexport type AddLiquidityCall =\n    | AddLiquidityWeightedCall\n    | AddLiquidityComposableStableCall;\n\nexport interface AddLiquidityBase {\n    query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput>;\n    buildCall(input: AddLiquidityCall): AddLiquidityBuildOutput;\n}\n\nexport type AddLiquidityBuildOutput = {\n    call: Hex;\n    to: Address;\n    value: bigint;\n    minBptOut: TokenAmount;\n    maxAmountsIn: TokenAmount[];\n};\n\nexport type AddLiquidityConfig = {\n    customAddLiquidityTypes: Record<string, AddLiquidityBase>;\n};\n","import { TokenAmount } from '../tokenAmount';\nimport { Slippage } from '../slippage';\nimport { Address, InputAmount } from '../../types';\nimport { PoolState } from '../types';\n\nexport enum RemoveLiquidityKind {\n    Unbalanced = 'Unbalanced', // exact out\n    SingleToken = 'SingleToken', // exact in (single token out)\n    Proportional = 'Proportional', // exact in (all tokens out)\n}\n\n// This will be extended for each pools specific output requirements\nexport type RemoveLiquidityBaseInput = {\n    chainId: number;\n    rpcUrl: string;\n    toNativeAsset?: boolean;\n    toInternalBalance?: boolean;\n};\n\nexport type RemoveLiquidityUnbalancedInput = RemoveLiquidityBaseInput & {\n    amountsOut: InputAmount[];\n    kind: RemoveLiquidityKind.Unbalanced;\n};\n\nexport type RemoveLiquiditySingleTokenInput = RemoveLiquidityBaseInput & {\n    bptIn: InputAmount;\n    tokenOut: Address;\n    kind: RemoveLiquidityKind.SingleToken;\n};\n\nexport type RemoveLiquidityProportionalInput = RemoveLiquidityBaseInput & {\n    bptIn: InputAmount;\n    kind: RemoveLiquidityKind.Proportional;\n};\n\nexport type RemoveLiquidityInput =\n    | RemoveLiquidityUnbalancedInput\n    | RemoveLiquiditySingleTokenInput\n    | RemoveLiquidityProportionalInput;\n\nexport type RemoveLiquidityQueryOutput =\n    | RemoveLiquidityBaseQueryOutput\n    | RemoveLiquidityComposableStableQueryOutput;\n\n// Returned from a remove liquidity query\nexport type RemoveLiquidityBaseQueryOutput = {\n    poolType: string;\n    poolId: Address;\n    removeLiquidityKind: RemoveLiquidityKind;\n    bptIn: TokenAmount;\n    amountsOut: TokenAmount[];\n    tokenOutIndex?: number;\n    toInternalBalance: boolean;\n    balancerVersion: 2 | 3;\n};\n\nexport type RemoveLiquidityComposableStableQueryOutput =\n    RemoveLiquidityBaseQueryOutput & {\n        bptIndex: number;\n    };\n\ntype RemoveLiquidityBaseCall = {\n    slippage: Slippage;\n    sender: Address;\n    recipient: Address;\n};\nexport type RemoveLiquidityComposableStableCall = RemoveLiquidityBaseCall &\n    RemoveLiquidityComposableStableQueryOutput;\nexport type RemoveLiquidityWeightedCall = RemoveLiquidityBaseCall &\n    RemoveLiquidityBaseQueryOutput;\n\nexport type RemoveLiquidityCall =\n    | RemoveLiquidityComposableStableCall\n    | RemoveLiquidityWeightedCall;\n\nexport type RemoveLiquidityBuildOutput = {\n    call: Address;\n    to: Address;\n    value: bigint;\n    maxBptIn: TokenAmount;\n    minAmountsOut: TokenAmount[];\n};\n\nexport interface RemoveLiquidityBase {\n    query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput>;\n    buildCall(input: RemoveLiquidityCall): RemoveLiquidityBuildOutput;\n}\n\nexport type RemoveLiquidityConfig = {\n    customRemoveLiquidityTypes: Record<string, RemoveLiquidityBase>;\n};\n\nexport type ExitPoolRequest = {\n    assets: Address[];\n    minAmountsOut: bigint[];\n    userData: Address;\n    toInternalBalance: boolean;\n};\n","import { SupportedRawPoolTypes } from '../../data/types';\nimport { WeightedEncoder } from './weighted';\n\nexport * from './weighted';\n\nexport const getEncoder = (\n    poolType: SupportedRawPoolTypes | string,\n): typeof WeightedEncoder | undefined => {\n    switch (poolType) {\n        case 'Weighted':\n            return WeightedEncoder;\n        default:\n            return undefined;\n    }\n};\n","import { encodeAbiParameters } from 'viem';\nimport { Address } from '../../types';\nimport { AddLiquidityKind } from '../addLiquidity/types';\nimport {\n    AddLiquidityAmounts,\n    InitPoolAmountsComposableStable,\n    RemoveLiquidityAmounts,\n} from '../types';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\n\nexport enum ComposableStablePoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,\n    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT = 3,\n}\n\nexport enum ComposableStablePoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    BPT_IN_FOR_EXACT_TOKENS_OUT = 1,\n    EXACT_BPT_IN_FOR_ALL_TOKENS_OUT = 2,\n}\n\nexport class ComposableStableEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the User Data for initializing a WeightedPool\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeInitPoolUserData(amounts: InitPoolAmountsComposableStable) {\n        return ComposableStableEncoder.initPool(amounts.amountsIn);\n    }\n\n    /**\n     * Encodes the User Data for adding liquidity to a ComposableStablePool\n     * @param kind Kind of the Add Liquidity operation: Init, Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeAddLiquidityUserData(\n        kind: AddLiquidityKind,\n        amounts: AddLiquidityAmounts & { maxAmountsInWithoutBpt: bigint[] },\n    ): Address {\n        switch (kind) {\n            case AddLiquidityKind.Init:\n                throw new Error(\n                    'For this kind use initPool instead of addLiquidity',\n                );\n            case AddLiquidityKind.Unbalanced:\n                return ComposableStableEncoder.addLiquidityUnbalanced(\n                    amounts.maxAmountsInWithoutBpt,\n                    amounts.minimumBpt,\n                );\n            case AddLiquidityKind.SingleToken: {\n                if (amounts.tokenInIndex === undefined) throw Error('No Index');\n                return ComposableStableEncoder.addLiquiditySingleToken(\n                    amounts.minimumBpt,\n                    amounts.tokenInIndex, // Has to be index without BPT\n                );\n            }\n            case AddLiquidityKind.Proportional: {\n                return ComposableStableEncoder.addLiquidityProportional(\n                    amounts.minimumBpt,\n                );\n            }\n            default:\n                throw Error('Unsupported Add Liquidity Kind');\n        }\n    }\n\n    /**\n     * Encodes the User Data for removing liquidity to a ComposableStablePool\n     * @param kind Kind of the Remove Liquidity operation: Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be removed from the pool\n     * @returns\n     */\n    static encodeRemoveLiquidityUserData(\n        kind: RemoveLiquidityKind,\n        amounts: RemoveLiquidityAmounts,\n    ): Address {\n        switch (kind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return ComposableStableEncoder.removeLiquidityUnbalanced(\n                    amounts.minAmountsOut,\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.SingleToken:\n                if (amounts.tokenOutIndex === undefined)\n                    throw new Error(\n                        'tokenOutIndex must be defined for RemoveLiquiditySingleToken',\n                    );\n\n                return ComposableStableEncoder.removeLiquiditySingleToken(\n                    amounts.maxBptAmountIn,\n                    amounts.tokenOutIndex,\n                );\n            case RemoveLiquidityKind.Proportional:\n                return ComposableStableEncoder.removeLiquidityProportional(\n                    amounts.maxBptAmountIn,\n                );\n            default:\n                throw Error('Unsupported Remove Liquidity Kind');\n        }\n    }\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a ComposableStablePool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static initPool = (amountsIn: bigint[]): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }],\n            [BigInt(ComposableStablePoolJoinKind.INIT), amountsIn],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static addLiquidityUnbalanced = (\n        amountsIn: bigint[],\n        minimumBPT: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n                ),\n                amountsIn,\n                minimumBPT,\n            ],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param tokenIndex - the index of the token to be provided as liquidity\n     */\n    static addLiquiditySingleToken = (\n        bptAmountOut: bigint,\n        tokenIndex: number,\n    ): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(ComposableStablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool proportionally to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     */\n    static addLiquidityProportional = (bptAmountOut: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n                ),\n                bptAmountOut,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param tokenIndex - the index of the token to be removed from the pool\n     */\n    static removeLiquiditySingleToken = (\n        bptAmountIn: bigint,\n        tokenIndex: number,\n    ): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n                ),\n                bptAmountIn,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static removeLiquidityProportional = (bptAmountIn: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\n                ),\n                bptAmountIn,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static removeLiquidityUnbalanced = (\n        amountsOut: bigint[],\n        maxBPTAmountIn: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n                ),\n                amountsOut,\n                maxBPTAmountIn,\n            ],\n        );\n}\n","import { Token } from '../token';\nimport { NATIVE_ASSETS, ZERO_ADDRESS } from '../../utils';\n\nexport function replaceWrapped(tokens: Token[], chainId: number): Token[] {\n    return tokens.map((token) => {\n        if (token.isUnderlyingEqual(NATIVE_ASSETS[chainId])) {\n            return new Token(chainId, ZERO_ADDRESS, 18);\n        }\n        return token;\n    });\n}\n","import { Hex, PoolType } from '../../types';\nimport { ZERO_ADDRESS } from '../../utils';\nimport { WeightedEncoder } from '../encoders';\nimport { ComposableStableEncoder } from '../encoders/composableStable';\nimport { AddLiquidityNestedCallAttributes } from './types';\nimport { replaceWrapped } from '../utils/replaceWrapped';\nimport { batchRelayerLibraryAbi } from '../../abi';\nimport { encodeFunctionData } from 'viem';\n\nexport const encodeCalls = (\n    callsAttributes: AddLiquidityNestedCallAttributes[],\n) => {\n    const encodedCalls: Hex[] = [];\n    const values: bigint[] = [];\n    for (const callAttributes of callsAttributes) {\n        const {\n            useNativeAssetAsWrappedAmountIn,\n            chainId,\n            sortedTokens,\n            poolId,\n            poolAddress,\n            poolType,\n            kind,\n            sender,\n            recipient,\n            maxAmountsIn,\n            minBptOut,\n            fromInternalBalance,\n            outputReference,\n        } = callAttributes;\n\n        // replace wrapped token with native asset if needed\n        let tokensIn = [...sortedTokens];\n\n        let value = 0n;\n        if (useNativeAssetAsWrappedAmountIn) {\n            tokensIn = replaceWrapped([...sortedTokens], chainId);\n            const nativeAssetIndex = tokensIn.findIndex((t) =>\n                t.isSameAddress(ZERO_ADDRESS),\n            );\n            if (nativeAssetIndex > -1) {\n                value = maxAmountsIn[nativeAssetIndex].amount;\n            }\n        }\n\n        const _maxAmountsIn = maxAmountsIn.map((a) => a.amount);\n        const amountsInWithoutBpt = _maxAmountsIn.filter(\n            (_, i) => !sortedTokens[i].isSameAddress(poolAddress),\n        );\n        const userData = getUserData(poolType, amountsInWithoutBpt, minBptOut);\n\n        const joinPoolRequest = {\n            assets: tokensIn.map((t) => t.address), // with BPT\n            maxAmountsIn: _maxAmountsIn, // with BPT\n            userData, // wihtout BPT\n            fromInternalBalance,\n        };\n\n        const encodedCall = encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'joinPool',\n            args: [\n                poolId,\n                kind,\n                sender,\n                recipient,\n                joinPoolRequest,\n                value,\n                outputReference,\n            ] as const,\n        });\n\n        encodedCalls.push(encodedCall);\n        values.push(value);\n    }\n    return { encodedCalls, values };\n};\n\nconst getUserData = (\n    poolType: PoolType,\n    amountsInWithoutBpt: bigint[],\n    minBptOut: bigint,\n) => {\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.addLiquidityUnbalanced(\n                amountsInWithoutBpt,\n                minBptOut,\n            );\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.addLiquidityUnbalanced(\n                amountsInWithoutBpt,\n                minBptOut,\n            );\n        default:\n            throw new Error(`Unsupported pool type: ${poolType}`);\n    }\n};\n","import {\n    createPublicClient,\n    decodeAbiParameters,\n    decodeFunctionResult,\n    http,\n} from 'viem';\nimport { Address, Hex } from '../../types';\nimport { BALANCER_RELAYER, CHAINS, ChainId } from '../../utils';\nimport { balancerRelayerAbi } from '../../abi';\n\nexport const doAddLiquidityNestedQuery = async (\n    chainId: ChainId,\n    rpcUrl: string,\n    accountAddress: Address,\n    encodedMulticall: Hex,\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { data } = await client.call({\n        account: accountAddress,\n        to: BALANCER_RELAYER[chainId],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const peekedValue = decodeAbiParameters(\n        [{ type: 'uint256' }],\n        result[result.length - 1],\n    )[0];\n\n    return peekedValue;\n};\n","import { MinimalToken } from '../data';\nimport { Address, Hex, PoolType } from '../types';\n\n// Returned from API and used as input\nexport type PoolState = {\n    id: Hex;\n    address: Address;\n    type: string;\n    tokens: MinimalToken[];\n    balancerVersion: 2 | 3;\n};\n\nexport type AddLiquidityAmounts = {\n    maxAmountsIn: bigint[];\n    tokenInIndex: number | undefined;\n    minimumBpt: bigint;\n};\n\nexport type RemoveLiquidityAmounts = {\n    minAmountsOut: bigint[];\n    tokenOutIndex: number | undefined;\n    maxBptAmountIn: bigint;\n};\n\nexport type NestedPool = {\n    id: Hex;\n    address: Address;\n    type: PoolType;\n    level: number; // 0 is the bottom and the highest level is the top\n    tokens: MinimalToken[]; // each token should have at least one\n};\n\nexport type NestedPoolState = {\n    pools: NestedPool[];\n    mainTokens: {\n        address: Address;\n        decimals: number;\n    }[];\n};\n\nexport enum PoolKind {\n    WEIGHTED = 0,\n    LEGACY_STABLE = 1,\n    COMPOSABLE_STABLE = 2,\n    COMPOSABLE_STABLE_V2 = 3,\n    // (note only Weighted and COMPOSABLE_STABLE_V2 will support proportional exits)\n}\nexport type InitPoolAmounts = {\n    maxAmountsIn: bigint[];\n};\n\nexport type InitPoolAmountsComposableStable = InitPoolAmounts & {\n    amountsIn: bigint[];\n};\n","import { Token } from '../token';\nimport { BALANCER_RELAYER, ChainId, getPoolAddress } from '../../utils';\nimport {\n    AddLiquidityNestedInput,\n    AddLiquidityNestedCallAttributes,\n} from './types';\nimport { NestedPool, PoolKind } from '../types';\nimport { Address, PoolType } from '../../types';\nimport { Relayer } from '../relayer';\n\nexport const getQueryCallsAttributes = (\n    {\n        amountsIn,\n        chainId,\n        accountAddress,\n        useNativeAssetAsWrappedAmountIn,\n        fromInternalBalance,\n    }: AddLiquidityNestedInput,\n    pools: NestedPool[],\n): AddLiquidityNestedCallAttributes[] => {\n    /**\n     * Overall logic to build sequence of add liquidity calls:\n     * 1. Go from bottom pool to up filling out input amounts and output refs\n     * 2. Inputs will be amountsIn provided, output of the previous level or 0n\n     * 3. Output at max level is the bptOut\n     */\n\n    const poolsSortedByLevel = pools.sort((a, b) => a.level - b.level);\n\n    const calls: AddLiquidityNestedCallAttributes[] = [];\n    for (const pool of poolsSortedByLevel) {\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n        const maxAmountsIn = getMaxAmountsIn(sortedTokens, amountsIn, calls);\n        calls.push({\n            chainId: chainId,\n            useNativeAssetAsWrappedAmountIn:\n                useNativeAssetAsWrappedAmountIn ?? false,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: getSender(maxAmountsIn, accountAddress, chainId),\n            recipient: '0x', // set as placeholder - will be updated after all calls are created\n            maxAmountsIn,\n            minBptOut: 0n, // limits set to zero for query calls\n            fromInternalBalance: fromInternalBalance ?? false,\n            outputReference: Relayer.toChainedReference(\n                BigInt(poolsSortedByLevel.indexOf(pool)),\n            ),\n        });\n    }\n    updateRecipients(calls, accountAddress);\n    return calls;\n};\n\nconst getMaxAmountsIn = (\n    sortedTokens: Token[],\n    amountsIn: { address: Address; rawAmount: bigint }[],\n    calls: AddLiquidityNestedCallAttributes[],\n): { amount: bigint; isRef: boolean }[] => {\n    return sortedTokens.map((token) => {\n        /**\n         * There are 3 possible scenarios:\n         * 1. token has amountIn provided by the user -> return amount\n         * 2. token is the output of a previous add liquidity call -> return outputRef\n         * 3. otherwise -> return zero\n         */\n\n        // 1. token has amountIn provided by the user -> return amount\n        const amountIn = amountsIn.find((a) => token.isSameAddress(a.address));\n        if (amountIn !== undefined) {\n            return {\n                amount: amountIn.rawAmount,\n                isRef: false,\n            };\n        }\n\n        // 2. token is the output of a previous add liquidity call -> return outputRef\n        const previousCall = calls.find(\n            (call) => getPoolAddress(call.poolId) === token.address,\n        );\n        if (previousCall !== undefined) {\n            return {\n                amount: previousCall.outputReference,\n                isRef: true,\n            };\n        }\n\n        // 3. otherwise -> return zero\n        return {\n            amount: 0n,\n            isRef: false,\n        };\n    });\n};\n\n// Sender's logic: if there is at least one amountIn that is not a reference,\n// then the sender is the user, otherwise it's the relayer.\nconst getSender = (\n    maxAmountsIn: { amount: bigint; isRef: boolean }[],\n    accountAddress: Address,\n    chainId: ChainId,\n): Address => {\n    return maxAmountsIn.some((a) => !a.isRef && a.amount > 0n)\n        ? accountAddress\n        : BALANCER_RELAYER[chainId];\n};\n\n// Recipient's logic: if there is a following call, then the recipient is the\n// sender of that call, otherwise it's the user.\nconst updateRecipients = (\n    calls: AddLiquidityNestedCallAttributes[],\n    accountAddress: Address,\n) => {\n    for (const call of calls) {\n        const followingCall = calls.find((_call) =>\n            _call.maxAmountsIn.some((a) => a.amount === call.outputReference),\n        );\n        if (followingCall !== undefined) {\n            call.recipient = followingCall.sender;\n        } else {\n            call.recipient = accountAddress;\n        }\n    }\n};\n","import { createPublicClient, http } from 'viem';\nimport { Address } from '../../types';\nimport { BALANCER_QUERIES, CHAINS } from '../../utils';\nimport { balancerQueriesAbi } from '../../abi';\n\nexport async function doAddLiquidityQuery(\n    rpcUrl: string,\n    chainId: number,\n    args: readonly [\n        Address,\n        Address,\n        Address,\n        {\n            assets: readonly Address[];\n            maxAmountsIn: readonly bigint[];\n            userData: Address;\n            fromInternalBalance: boolean;\n        },\n    ],\n): Promise<{\n    bptOut: bigint;\n    amountsIn: readonly bigint[];\n}> {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const {\n        result: [bptOut, amountsIn],\n    } = await client.simulateContract({\n        address: BALANCER_QUERIES[chainId],\n        abi: balancerQueriesAbi,\n        functionName: 'queryJoin',\n        args,\n    });\n    return {\n        bptOut,\n        amountsIn,\n    };\n}\n","import { InputAmount } from '../../types';\nimport { Token } from '../token';\n\n/**\n * Get amounts from array of TokenAmounts returning default if not a value for tokens.\n * @param tokens\n * @param amounts\n * @param defaultAmount\n * @returns\n */\nexport function getAmounts(\n    tokens: Token[],\n    amounts: InputAmount[],\n    defaultAmount = 0n,\n): bigint[] {\n    return tokens.map(\n        (t) =>\n            amounts.find((a) => t.isSameAddress(a.address))?.rawAmount ??\n            defaultAmount,\n    );\n}\n","import { MinimalToken } from '../../data/types';\nimport { Token } from '../token';\n\nexport function getSortedTokens(\n    tokens: MinimalToken[],\n    chainId: number,\n): Token[] {\n    return tokens\n        .sort((a, b) => a.index - b.index)\n        .map((t) => new Token(chainId, t.address, t.decimals));\n}\n","import { Address, Hex } from '../../types';\nimport { Token } from '../token';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function parseAddLiquidityArgs({\n    useNativeAssetAsWrappedAmountIn,\n    chainId,\n    sortedTokens,\n    poolId,\n    sender,\n    recipient,\n    maxAmountsIn,\n    userData,\n    fromInternalBalance,\n}: {\n    chainId?: number;\n    useNativeAssetAsWrappedAmountIn?: boolean;\n    sortedTokens: Token[];\n    poolId: Hex;\n    sender: Address;\n    recipient: Address;\n    maxAmountsIn: readonly bigint[];\n    userData: Hex;\n    fromInternalBalance: boolean;\n}) {\n    // replace wrapped token with native asset if needed\n    const tokensIn =\n        chainId && useNativeAssetAsWrappedAmountIn\n            ? replaceWrapped([...sortedTokens], chainId)\n            : [...sortedTokens];\n\n    const joinPoolRequest = {\n        assets: tokensIn.map((t) => t.address), // with BPT\n        maxAmountsIn, // with BPT\n        userData, // wihtout BPT\n        fromInternalBalance,\n    };\n\n    return {\n        args: [poolId, sender, recipient, joinPoolRequest] as const,\n        tokensIn,\n    };\n}\n","import { NestedPoolState } from '../types';\n\nexport function constraintValidation(\n    nestedPoolState: NestedPoolState,\n): boolean {\n    /*\n    General rules:\n      * Can only add/remove liquidity with the main tokens\n      * Main tokens only supported to a max of 1 level of nesting\n      * Can still pure add liquidity with > 1 level \n      * A main token can't be a token in > 1 pool\n\n    We can only do minimal validation without introducing complexity/data overhead that the API should be handling. \n    e.g. We can't validate pool state without constructing it which would require more complexity and data.\n    So we assume pool state is correct. \n    */\n    // pools may not be in order so find highest level which will be top pool\n    const topLevel = Math.max(...nestedPoolState.pools.map((p) => p.level));\n\n    nestedPoolState.mainTokens.forEach((t) => {\n        const poolsWithToken = nestedPoolState.pools.filter((p) =>\n            p.tokens.some((pt) => pt.address === t.address),\n        );\n\n        if (poolsWithToken.length < 1)\n            throw 'NestedPoolState, main token must exist as a token of a pool';\n\n        if (poolsWithToken.length > 1)\n            throw `NestedPoolState, main token can't be token of more than 1 pool`;\n\n        if (poolsWithToken[0]) {\n            if (topLevel - poolsWithToken[0].level > 1)\n                throw 'NestedPoolState, main token only supported to a max of 1 level of nesting';\n        }\n    });\n    return true;\n}\n","import { NATIVE_ASSETS } from '../../utils';\nimport { Token } from '../token';\nimport { TokenAmount } from '../tokenAmount';\nimport { NestedPoolState } from '../types';\nimport { constraintValidation } from '../utils';\nimport { AddLiquidityNestedInput } from './types';\n\nexport const validateInputs = (\n    input: AddLiquidityNestedInput,\n    nestedPoolState: NestedPoolState,\n): TokenAmount[] => {\n    constraintValidation(nestedPoolState);\n    const mainTokens = nestedPoolState.mainTokens.map(\n        (t) => new Token(input.chainId, t.address, t.decimals),\n    );\n\n    const amountsIn = input.amountsIn.map((amountIn) => {\n        const tokenIn = mainTokens.find((t) =>\n            t.isSameAddress(amountIn.address),\n        );\n        if (tokenIn === undefined) {\n            throw new Error(\n                `Adding liquidity with ${tokenIn} requires it to exist within mainTokens`,\n            );\n        }\n        return TokenAmount.fromRawAmount(tokenIn, amountIn.rawAmount);\n    });\n\n    if (input.useNativeAssetAsWrappedAmountIn) {\n        if (\n            !mainTokens.some((t) =>\n                t.isUnderlyingEqual(NATIVE_ASSETS[input.chainId]),\n            )\n        ) {\n            throw new Error(\n                'Adding liquidity with native asset requires wrapped native asset to exist within mainTokens',\n            );\n        }\n        if (\n            !amountsIn.some((a) =>\n                a.token.isUnderlyingEqual(NATIVE_ASSETS[input.chainId]),\n            )\n        ) {\n            throw new Error(\n                'Adding liquidity with native asset requires wrapped native asset to exist within amountsIn',\n            );\n        }\n    }\n\n    return amountsIn;\n};\n","import { encodeFunctionData } from 'viem';\nimport { Address, Hex } from '../../types';\nimport { BALANCER_RELAYER } from '../../utils';\nimport { Relayer } from '../relayer';\nimport { TokenAmount } from '../tokenAmount';\nimport { balancerRelayerAbi } from '../../abi';\nimport {\n    RemoveLiquidityNestedProportionalInput,\n    RemoveLiquidityNestedSingleTokenInput,\n    RemoveLiquidityNestedQueryOutput,\n    RemoveLiquidityNestedCallInput,\n} from './types';\nimport { NestedPoolState } from '../types';\nimport { doRemoveLiquidityNestedQuery } from './doRemoveLiquidityNestedQuery';\nimport { getQueryCallsAttributes } from './getQueryCallsAttributes';\nimport { encodeCalls } from './encodeCalls';\nimport { getPeekCalls } from './getPeekCalls';\nimport { validateInputs } from './validateInputs';\n\nexport class RemoveLiquidityNested {\n    async query(\n        input:\n            | RemoveLiquidityNestedProportionalInput\n            | RemoveLiquidityNestedSingleTokenInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<RemoveLiquidityNestedQueryOutput> {\n        const isProportional = validateInputs(input, nestedPoolState);\n\n        const { callsAttributes, bptAmountIn } = getQueryCallsAttributes(\n            input,\n            nestedPoolState.pools,\n            isProportional,\n        );\n\n        const encodedCalls = encodeCalls(callsAttributes, isProportional);\n\n        const { peekCalls, tokensOut } = getPeekCalls(\n            callsAttributes,\n            isProportional,\n        );\n\n        // append peek calls to get amountsOut\n        encodedCalls.push(...peekCalls);\n\n        const encodedMulticall = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'vaultActionsQueryMulticall',\n            args: [encodedCalls],\n        });\n\n        const peekedValues = await doRemoveLiquidityNestedQuery(\n            input.chainId,\n            input.rpcUrl,\n            input.accountAddress,\n            encodedMulticall,\n            tokensOut.length,\n        );\n\n        console.log('peekedValues ', peekedValues);\n\n        const amountsOut = tokensOut.map((tokenOut, i) =>\n            TokenAmount.fromRawAmount(tokenOut, peekedValues[i]),\n        );\n\n        return { callsAttributes, bptAmountIn, amountsOut, isProportional };\n    }\n\n    buildCall(input: RemoveLiquidityNestedCallInput): {\n        call: Hex;\n        to: Address;\n        minAmountsOut: TokenAmount[];\n    } {\n        // apply slippage to amountsOut\n        const minAmountsOut = input.amountsOut.map((amountOut) =>\n            TokenAmount.fromRawAmount(\n                amountOut.token,\n                input.slippage.removeFrom(amountOut.amount),\n            ),\n        );\n\n        input.callsAttributes.forEach((call) => {\n            // update relevant calls with minAmountOut limits in place\n            minAmountsOut.forEach((minAmountOut, j) => {\n                const minAmountOutIndex = call.sortedTokens.findIndex((t) =>\n                    t.isSameAddress(minAmountOut.token.address),\n                );\n                if (minAmountOutIndex !== -1) {\n                    call.minAmountsOut[minAmountOutIndex] =\n                        minAmountsOut[j].amount;\n                }\n            });\n        });\n\n        const encodedCalls = encodeCalls(\n            input.callsAttributes,\n            input.isProportional,\n        );\n\n        // prepend relayer approval if provided\n        if (input.relayerApprovalSignature !== undefined) {\n            encodedCalls.unshift(\n                Relayer.encodeSetRelayerApproval(\n                    BALANCER_RELAYER[input.callsAttributes[0].chainId],\n                    true,\n                    input.relayerApprovalSignature,\n                ),\n            );\n        }\n\n        const call = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'multicall',\n            args: [encodedCalls],\n        });\n\n        return {\n            call,\n            to: BALANCER_RELAYER[input.callsAttributes[0].chainId],\n            minAmountsOut,\n        };\n    }\n}\n","import {\n    createPublicClient,\n    decodeAbiParameters,\n    decodeFunctionResult,\n    http,\n} from 'viem';\nimport { Address, Hex } from '../../types';\nimport { BALANCER_RELAYER, CHAINS, ChainId } from '../../utils';\nimport { balancerRelayerAbi } from '../../abi';\n\nexport const doRemoveLiquidityNestedQuery = async (\n    chainId: ChainId,\n    rpcUrl: string,\n    accountAddress: Address,\n    encodedMulticall: Hex,\n    tokensOutLength: number,\n): Promise<bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { data } = await client.call({\n        account: accountAddress,\n        to: BALANCER_RELAYER[chainId],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const resultsToPeek = result.slice(result.length - tokensOutLength);\n\n    const peekedValues = resultsToPeek.map(\n        (r) => decodeAbiParameters([{ type: 'uint256' }], r)[0],\n    );\n\n    return peekedValues;\n};\n","import { Token } from '../token';\nimport {\n    RemoveLiquidityNestedProportionalInput,\n    RemoveLiquidityNestedSingleTokenInput,\n    RemoveLiquidityNestedCallAttributes,\n} from './types';\nimport { NestedPool, PoolKind } from '../types';\nimport { TokenAmount } from '../tokenAmount';\nimport { Address, PoolType } from '../../types';\nimport { BALANCER_RELAYER, ChainId } from '../../utils';\nimport { Relayer } from '../relayer';\n\nexport const getQueryCallsAttributes = (\n    input:\n        | RemoveLiquidityNestedProportionalInput\n        | RemoveLiquidityNestedSingleTokenInput,\n    pools: NestedPool[],\n    isProportional: boolean,\n): {\n    bptAmountIn: TokenAmount;\n    callsAttributes: RemoveLiquidityNestedCallAttributes[];\n} => {\n    const {\n        bptAmountIn,\n        chainId,\n        accountAddress,\n        useNativeAssetAsWrappedAmountOut = false,\n        toInternalBalance = false,\n    } = input;\n    let callsAttributes: RemoveLiquidityNestedCallAttributes[];\n\n    // sort pools by descending level\n    const poolsTopDown = pools.sort((a, b) => b.level - a.level);\n\n    if (isProportional) {\n        callsAttributes = getProportionalCallsAttributes(\n            poolsTopDown,\n            chainId,\n            useNativeAssetAsWrappedAmountOut,\n            accountAddress,\n            bptAmountIn,\n            toInternalBalance,\n        );\n    } else {\n        const { tokenOut } = input as RemoveLiquidityNestedSingleTokenInput;\n\n        callsAttributes = getSingleTokenCallsAttributes(\n            poolsTopDown,\n            chainId,\n            useNativeAssetAsWrappedAmountOut,\n            accountAddress,\n            bptAmountIn,\n            toInternalBalance,\n            tokenOut,\n        );\n    }\n\n    const bptIn = new Token(chainId, poolsTopDown[0].address, 18);\n    const _bptAmountIn = TokenAmount.fromRawAmount(bptIn, bptAmountIn);\n    return { callsAttributes, bptAmountIn: _bptAmountIn };\n};\n\nconst getProportionalCallsAttributes = (\n    poolsSortedByLevel: NestedPool[],\n    chainId: ChainId,\n    useNativeAssetAsWrappedAmountOut: boolean,\n    accountAddress: Address,\n    bptAmountIn: bigint,\n    toInternalBalance: boolean,\n) => {\n    /**\n     * Overall logic to build sequence of remove liquidity nested proportional calls:\n     * 1. Go from top pool to bottom filling out input amounts and output refs\n     * 2. Inputs will be bptAmountIn provided or output of the previous level\n     * 3. Output at bottom level is the amountsOut\n     */\n\n    const calls: RemoveLiquidityNestedCallAttributes[] = [];\n    for (const pool of poolsSortedByLevel) {\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n\n        const sortedTokensWithoutBpt = sortedTokens.filter(\n            (t) => !t.isSameAddress(pool.address),\n        );\n        calls.push({\n            chainId: chainId,\n            useNativeAssetAsWrappedAmountOut,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: getSenderProportional(calls, pool.address, accountAddress),\n            recipient: getRecipientProportional(\n                sortedTokensWithoutBpt,\n                poolsSortedByLevel,\n                accountAddress,\n                chainId,\n            ),\n            bptAmountIn: getBptAmountIn(pool, bptAmountIn, calls, true),\n            minAmountsOut: Array(sortedTokens.length).fill(0n), // limits set to zero for query calls\n            toInternalBalance,\n            outputReferences: sortedTokensWithoutBpt.map((token) => {\n                return {\n                    key: Relayer.toChainedReference(\n                        BigInt(poolsSortedByLevel.indexOf(pool)) * 10n +\n                            BigInt(sortedTokens.indexOf(token)),\n                    ),\n                    index: BigInt(sortedTokens.indexOf(token)),\n                };\n            }),\n        });\n    }\n    return calls;\n};\n\nconst getSingleTokenCallsAttributes = (\n    poolsTopDown: NestedPool[],\n    chainId: ChainId,\n    useNativeAssetAsWrappedAmountOut: boolean,\n    accountAddress: Address,\n    bptAmountIn: bigint,\n    toInternalBalance: boolean,\n    tokenOut: Address,\n) => {\n    /**\n     * Overall logic to build sequence of remove liquidity nested single token calls:\n     * 1. Go BOTTOM-UP building remove liquidity path to tokenOut\n     * 2. Go through remove liquidity path filling out input amounts and output refs\n     * 3. Inputs will be bptAmountIn provided or output of the previous level\n     * 4. Output at bottom level is the amountOut\n     */\n\n    const removeLiquidityPath: NestedPool[] = getRemoveLiquidityPath(\n        tokenOut,\n        poolsTopDown,\n    );\n    const calls: RemoveLiquidityNestedCallAttributes[] = [];\n\n    for (let i = 0; i < removeLiquidityPath.length; i++) {\n        const pool = removeLiquidityPath[i];\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n        const isLastCall = i === removeLiquidityPath.length - 1;\n        const currenTokenOut = isLastCall\n            ? tokenOut\n            : removeLiquidityPath[i + 1].address;\n        const tokenOutIndex = sortedTokens.findIndex((t) =>\n            t.isSameAddress(currenTokenOut),\n        );\n        calls.push({\n            chainId: chainId,\n            useNativeAssetAsWrappedAmountOut,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: i === 0 ? accountAddress : BALANCER_RELAYER[chainId],\n            recipient: isLastCall ? accountAddress : BALANCER_RELAYER[chainId],\n            bptAmountIn: getBptAmountIn(pool, bptAmountIn, calls, false),\n            minAmountsOut: Array(sortedTokens.length).fill(0n), // limits set to zero for query calls\n            toInternalBalance,\n            outputReferences: [\n                {\n                    key: Relayer.toChainedReference(\n                        BigInt(removeLiquidityPath.indexOf(pool)) * 10n +\n                            BigInt(tokenOutIndex),\n                    ),\n                    index: BigInt(tokenOutIndex),\n                },\n            ],\n            tokenOutIndex,\n        });\n    }\n    return calls;\n};\n\nconst getRemoveLiquidityPath = (\n    tokenOut: string,\n    poolsTopDown: NestedPool[],\n) => {\n    const topPool = poolsTopDown[0];\n    const removeLiquidityPath: NestedPool[] = [];\n    let tokenOutByLevel = tokenOut;\n    while (tokenOutByLevel !== topPool.address) {\n        const currentPool = poolsTopDown.find(\n            (p) =>\n                /**\n                 * Filter out pools that have tokenOutByLevel as it's own address\n                 * in order to prevent pools with BPT as token to be picked up\n                 * incorrectly - e.g. when removing liquidity from WETH/3-POOL to DAI, the\n                 * first iteration will pick 3-POOL as the \"bottom\" pool and update\n                 * tokenOutByLevel to 3-POOL-BPT. Since 3-POOL-BPT is contained\n                 * on both WETH/3-POOL and 3-POOL itself, simply checking if the\n                 * pool contains that token could result in the bottom pool being\n                 * picked up again.\n                 */\n                p.address !== tokenOutByLevel &&\n                p.tokens.some((t) => t.address === tokenOutByLevel),\n        ) as NestedPool;\n        removeLiquidityPath.unshift(currentPool);\n        tokenOutByLevel = currentPool.address;\n    }\n    return removeLiquidityPath;\n};\n\nconst getBptAmountIn = (\n    pool: NestedPool,\n    bptAmountIn: bigint,\n    calls: RemoveLiquidityNestedCallAttributes[],\n    isProportional: boolean,\n) => {\n    // first call has bptAmountIn provided as it's input\n    if (calls.length === 0) {\n        return {\n            amount: bptAmountIn,\n            isRef: false,\n        };\n    }\n\n    // following calls have their input as the outputReference of a previous call\n    let previousCall: RemoveLiquidityNestedCallAttributes;\n    let outputReferenceIndex: number;\n    if (isProportional) {\n        previousCall = calls.find((call) =>\n            call.sortedTokens\n                .map((token) => token.address)\n                .includes(pool.address),\n        ) as RemoveLiquidityNestedCallAttributes;\n        outputReferenceIndex = previousCall.sortedTokens\n            .map((token) => token.address)\n            .indexOf(pool.address);\n    } else {\n        previousCall = calls[calls.length - 1];\n        outputReferenceIndex = 0;\n    }\n    return {\n        amount: previousCall.outputReferences[outputReferenceIndex].key,\n        isRef: true,\n    };\n};\n\n// Sender's logic: if there is a previous call, then the sender is the\n// recipient of that call, otherwise it's the user.\nconst getSenderProportional = (\n    calls: RemoveLiquidityNestedCallAttributes[],\n    poolAddress: Address,\n    accountAddress: Address,\n): Address => {\n    const previousCall = calls.find((_call) =>\n        _call.sortedTokens.map((token) => token.address).includes(poolAddress),\n    );\n    return previousCall !== undefined ? previousCall.recipient : accountAddress;\n};\n\n// Recipient's logic: if there is at least one token that is an output of the\n// whole multicall, then the recipient is the user, otherwise it's the relayer.\nconst getRecipientProportional = (\n    sortedTokensWithoutBpt: Token[],\n    poolsSortedByLevel: NestedPool[],\n    accountAddress: Address,\n    chainId: ChainId,\n): Address => {\n    const containsOutputToken = sortedTokensWithoutBpt.some(\n        (token) =>\n            !poolsSortedByLevel.some((_pool) =>\n                token.isSameAddress(_pool.address),\n            ),\n    );\n    return containsOutputToken ? accountAddress : BALANCER_RELAYER[chainId];\n};\n","import { Hex, PoolType } from '../../types';\nimport { WeightedEncoder } from '../encoders';\nimport { ComposableStableEncoder } from '../encoders/composableStable';\nimport { RemoveLiquidityNestedCallAttributes } from './types';\nimport { replaceWrapped } from '../utils/replaceWrapped';\nimport { batchRelayerLibraryAbi } from '../../abi';\nimport { encodeFunctionData } from 'viem';\n\nexport const encodeCalls = (\n    callsAttributes: RemoveLiquidityNestedCallAttributes[],\n    isProportional: boolean,\n) => {\n    const encodedCalls: Hex[] = [];\n    for (const callAttributes of callsAttributes) {\n        const {\n            useNativeAssetAsWrappedAmountOut,\n            chainId,\n            sortedTokens,\n            poolId,\n            poolType,\n            kind,\n            sender,\n            recipient,\n            bptAmountIn,\n            minAmountsOut,\n            toInternalBalance,\n            outputReferences,\n            tokenOutIndex,\n        } = callAttributes;\n\n        // replace wrapped token with native asset if needed\n        let tokensOut = [...sortedTokens];\n        if (useNativeAssetAsWrappedAmountOut) {\n            tokensOut = replaceWrapped([...sortedTokens], chainId);\n        }\n\n        let userData: Hex;\n        if (isProportional) {\n            userData = getUserDataProportional(poolType, bptAmountIn.amount);\n        } else {\n            userData = getUserDataSingleToken(\n                tokenOutIndex,\n                poolType,\n                bptAmountIn.amount,\n            );\n        }\n\n        const exitPoolRequest = {\n            assets: tokensOut.map((t) => t.address), // with BPT\n            minAmountsOut, // with BPT\n            userData, // wihtout BPT\n            toInternalBalance,\n        };\n\n        const encodedCall = encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'exitPool',\n            args: [\n                poolId,\n                kind,\n                sender,\n                recipient,\n                exitPoolRequest,\n                outputReferences,\n            ] as const,\n        });\n\n        encodedCalls.push(encodedCall);\n    }\n\n    return encodedCalls;\n};\n\nconst getUserDataProportional = (poolType: PoolType, bptAmountIn: bigint) => {\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.removeLiquidityProportional(bptAmountIn);\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.removeLiquidityProportional(\n                bptAmountIn,\n            );\n        default:\n            throw new Error(`Unsupported pool type ${poolType}`);\n    }\n};\n\nconst getUserDataSingleToken = (\n    tokenOutIndex: number | undefined,\n    poolType: PoolType,\n    bptAmountIn: bigint,\n) => {\n    if (tokenOutIndex === undefined) {\n        throw new Error(\n            \"tokenOutIndex can't be undefined for removing liquidity to single token\",\n        );\n    }\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.removeLiquiditySingleToken(\n                bptAmountIn,\n                tokenOutIndex,\n            );\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.removeLiquiditySingleToken(\n                bptAmountIn,\n                tokenOutIndex,\n            );\n        default:\n            throw new Error(`Unsupported pool type ${poolType}`);\n    }\n};\n","import { Hex } from 'viem';\nimport { Token } from '../token';\nimport { RemoveLiquidityNestedCallAttributes } from './types';\nimport { Relayer } from '../relayer';\n\nexport const getPeekCalls = (\n    calls: RemoveLiquidityNestedCallAttributes[],\n    isProportional: boolean,\n) => {\n    const tokensOut: Token[] = [];\n    const peekCalls: Hex[] = [];\n\n    if (isProportional) {\n        /**\n         * Overall logic: every outputReference that is not being used as input\n         * on another call is an output of the multicall and should be peeked.\n         */\n        calls.forEach((call) => {\n            call.outputReferences.forEach((outputReference) => {\n                const tokenOut =\n                    call.sortedTokens[Number(outputReference.index)];\n                // check if tokenOut is a pool address of another call - this means that it's an input for that call\n                const isTokenBeingUsedAsInput = calls.some((_call) =>\n                    tokenOut.isSameAddress(_call.poolAddress),\n                );\n\n                if (!isTokenBeingUsedAsInput) {\n                    tokensOut.push(tokenOut);\n                    peekCalls.push(\n                        Relayer.encodePeekChainedReferenceValue(\n                            outputReference.key,\n                        ),\n                    );\n                }\n            });\n        });\n    } else {\n        // For removing liquidity to single token, the outputReference of the last call is the only output to be peeked\n        const lastCall = calls[calls.length - 1];\n        const tokenOut =\n            lastCall.sortedTokens[lastCall.tokenOutIndex as number];\n        tokensOut.push(tokenOut);\n        peekCalls.push(\n            Relayer.encodePeekChainedReferenceValue(\n                lastCall.outputReferences[0].key,\n            ),\n        );\n    }\n\n    return { peekCalls, tokensOut };\n};\n","import { NATIVE_ASSETS } from '../../utils';\nimport { Token } from '../token';\nimport { NestedPoolState } from '../types';\nimport { constraintValidation } from '../utils';\nimport {\n    RemoveLiquidityNestedProportionalInput,\n    RemoveLiquidityNestedSingleTokenInput,\n} from './types';\n\nexport const validateInputs = (\n    input:\n        | RemoveLiquidityNestedProportionalInput\n        | RemoveLiquidityNestedSingleTokenInput,\n    nestedPoolState: NestedPoolState,\n) => {\n    constraintValidation(nestedPoolState);\n    const tokenOut = 'tokenOut' in input ? input.tokenOut : undefined;\n    const isProportional = tokenOut === undefined;\n    const mainTokens = nestedPoolState.mainTokens.map(\n        (token) => new Token(input.chainId, token.address, token.decimals),\n    );\n    if (isProportional) {\n        validateInputsProportional(\n            input as RemoveLiquidityNestedProportionalInput,\n            mainTokens,\n        );\n    } else {\n        validateInputsSingleToken(\n            input as RemoveLiquidityNestedSingleTokenInput,\n            mainTokens,\n        );\n    }\n\n    return isProportional;\n};\n\nconst validateInputsProportional = (\n    input: RemoveLiquidityNestedProportionalInput,\n    mainTokens: Token[],\n) => {\n    if (\n        input.useNativeAssetAsWrappedAmountOut &&\n        !mainTokens.some((t) =>\n            t.isUnderlyingEqual(NATIVE_ASSETS[input.chainId]),\n        )\n    ) {\n        throw new Error(\n            'Removing liquidity to native asset requires wrapped native asset to exist within main tokens',\n        );\n    }\n};\n\nconst validateInputsSingleToken = (\n    input: RemoveLiquidityNestedSingleTokenInput,\n    mainTokens: Token[],\n) => {\n    const tokenOut = mainTokens.find((t) => t.isSameAddress(input.tokenOut));\n\n    if (tokenOut === undefined) {\n        throw new Error(\n            `Removing liquidity to ${input.tokenOut} requires it to exist within main tokens`,\n        );\n    }\n\n    if (\n        input.useNativeAssetAsWrappedAmountOut &&\n        !tokenOut.isUnderlyingEqual(NATIVE_ASSETS[input.chainId])\n    ) {\n        throw new Error(\n            'Removing liquidity to native asset requires wrapped native asset to be the tokenOut',\n        );\n    }\n};\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { BALANCER_VAULT, MAX_UINT256, ZERO_ADDRESS } from '@/utils';\nimport { vaultAbi } from '@/abi';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBuildOutput,\n    AddLiquidityInput,\n    AddLiquidityKind,\n    AddLiquidityComposableStableQueryOutput,\n    AddLiquidityComposableStableCall,\n} from '@/entities/addLiquidity/types';\nimport {\n    AddLiquidityAmounts as AddLiquidityAmountsBase,\n    PoolState,\n} from '@/entities/types';\nimport {\n    doAddLiquidityQuery,\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '@/entities/utils';\nimport { ComposableStableEncoder } from '@/entities/encoders/composableStable';\n\ntype AddLiquidityAmounts = AddLiquidityAmountsBase & {\n    maxAmountsInWithoutBpt: bigint[];\n};\n\nexport class AddLiquidityComposableStable implements AddLiquidityBase {\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityComposableStableQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const bptIndex = sortedTokens.findIndex(\n            (t) => t.address === poolState.address,\n        );\n        const amounts = this.getAmountsQuery(sortedTokens, input, bptIndex);\n\n        const userData = ComposableStableEncoder.encodeAddLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensIn } = parseAddLiquidityArgs({\n            useNativeAssetAsWrappedAmountIn:\n                !!input.useNativeAssetAsWrappedAmountIn,\n            chainId: input.chainId,\n            sortedTokens,\n            poolId: poolState.id,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n        });\n\n        const queryOutput = await doAddLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptOut = TokenAmount.fromRawAmount(bpt, queryOutput.bptOut);\n\n        const amountsIn = queryOutput.amountsIn.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensIn[i], a),\n        );\n\n        return {\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptOut,\n            amountsIn,\n            tokenInIndex: amounts.tokenInIndex,\n            fromInternalBalance: !!input.fromInternalBalance,\n            bptIndex,\n            balancerVersion: 2,\n        };\n    }\n\n    public buildCall(\n        input: AddLiquidityComposableStableCall,\n    ): AddLiquidityBuildOutput {\n        const amounts = this.getAmountsCall(input);\n\n        const userData = ComposableStableEncoder.encodeAddLiquidityUserData(\n            input.addLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            sortedTokens: input.amountsIn.map((a) => a.token),\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance,\n        });\n\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const value = input.amountsIn.find(\n            (a) => a.token.address === ZERO_ADDRESS,\n        )?.amount;\n\n        return {\n            call,\n            to: BALANCER_VAULT,\n            value: value === undefined ? 0n : value,\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    private getAmountsQuery(\n        poolTokens: Token[],\n        input: AddLiquidityInput,\n        bptIndex: number,\n    ): AddLiquidityAmounts {\n        let addLiquidityAmounts: AddLiquidityAmountsBase;\n        switch (input.kind) {\n            case AddLiquidityKind.Unbalanced: {\n                addLiquidityAmounts = {\n                    minimumBpt: 0n,\n                    maxAmountsIn: getAmounts(\n                        poolTokens,\n                        input.amountsIn,\n                        BigInt(0),\n                    ),\n                    tokenInIndex: undefined,\n                };\n                break;\n            }\n            case AddLiquidityKind.SingleToken: {\n                const tokenInIndex = poolTokens\n                    .filter((_, index) => index !== bptIndex) // Need to remove Bpt\n                    .findIndex((t) => t.isSameAddress(input.tokenIn));\n                if (tokenInIndex === -1)\n                    throw Error(\"Can't find index of SingleToken\");\n                const maxAmountsIn = Array(poolTokens.length).fill(0n);\n                maxAmountsIn[tokenInIndex] = MAX_UINT256;\n                addLiquidityAmounts = {\n                    minimumBpt: input.bptOut.rawAmount,\n                    maxAmountsIn,\n                    tokenInIndex,\n                };\n                break;\n            }\n            case AddLiquidityKind.Proportional: {\n                addLiquidityAmounts = {\n                    minimumBpt: input.bptOut.rawAmount,\n                    maxAmountsIn: Array(poolTokens.length).fill(MAX_UINT256),\n                    tokenInIndex: undefined,\n                };\n                break;\n            }\n        }\n\n        return {\n            ...addLiquidityAmounts,\n            maxAmountsInWithoutBpt: [\n                ...addLiquidityAmounts.maxAmountsIn.slice(0, bptIndex),\n                ...addLiquidityAmounts.maxAmountsIn.slice(bptIndex + 1),\n            ],\n        };\n    }\n\n    private getAmountsCall(\n        input: AddLiquidityComposableStableCall,\n    ): AddLiquidityAmounts {\n        let addLiquidityAmounts: AddLiquidityAmountsBase;\n        switch (input.addLiquidityKind) {\n            case AddLiquidityKind.Init:\n                throw Error(\n                    'Unsupported Add Liquidity Kind, for Init use InitPool instead of AddLiquidity',\n                );\n            case AddLiquidityKind.Unbalanced: {\n                const minimumBpt = input.slippage.removeFrom(\n                    input.bptOut.amount,\n                );\n                addLiquidityAmounts = {\n                    minimumBpt,\n                    maxAmountsIn: input.amountsIn.map((a) => a.amount),\n                    tokenInIndex: input.tokenInIndex,\n                };\n                break;\n            }\n            case AddLiquidityKind.SingleToken:\n            case AddLiquidityKind.Proportional: {\n                addLiquidityAmounts = {\n                    minimumBpt: input.bptOut.amount,\n                    maxAmountsIn: input.amountsIn.map((a) =>\n                        input.slippage.applyTo(a.amount),\n                    ),\n                    tokenInIndex: input.tokenInIndex,\n                };\n                break;\n            }\n            default:\n                throw Error('Unsupported Add Liquidity Kind');\n        }\n        return {\n            ...addLiquidityAmounts,\n            maxAmountsInWithoutBpt: [\n                ...addLiquidityAmounts.maxAmountsIn.slice(0, input.bptIndex),\n                ...addLiquidityAmounts.maxAmountsIn.slice(input.bptIndex + 1),\n            ],\n        };\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { WeightedEncoder } from '@/entities/encoders/weighted';\nimport { BALANCER_VAULT, MAX_UINT256, ZERO_ADDRESS } from '@/utils';\nimport { vaultAbi } from '@/abi';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBuildOutput,\n    AddLiquidityInput,\n    AddLiquidityKind,\n    AddLiquidityWeightedQueryOutput,\n    AddLiquidityWeightedCall,\n} from '@/entities/addLiquidity/types';\nimport { AddLiquidityAmounts, PoolState } from '@/entities/types';\nimport {\n    doAddLiquidityQuery,\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '@/entities/utils';\n\nexport class AddLiquidityWeighted implements AddLiquidityBase {\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityWeightedQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmountsQuery(sortedTokens, input);\n\n        const userData = WeightedEncoder.encodeAddLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensIn } = parseAddLiquidityArgs({\n            useNativeAssetAsWrappedAmountIn:\n                !!input.useNativeAssetAsWrappedAmountIn,\n            chainId: input.chainId,\n            sortedTokens,\n            poolId: poolState.id,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n        });\n\n        const queryOutput = await doAddLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptOut = TokenAmount.fromRawAmount(bpt, queryOutput.bptOut);\n\n        const amountsIn = queryOutput.amountsIn.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensIn[i], a),\n        );\n\n        return {\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptOut,\n            amountsIn,\n            tokenInIndex: amounts.tokenInIndex,\n            fromInternalBalance: !!input.fromInternalBalance,\n            balancerVersion: 2,\n        };\n    }\n\n    public buildCall(input: AddLiquidityWeightedCall): AddLiquidityBuildOutput {\n        const amounts = this.getAmountsCall(input);\n\n        const userData = WeightedEncoder.encodeAddLiquidityUserData(\n            input.addLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            sortedTokens: input.amountsIn.map((a) => a.token),\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance,\n        });\n\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const value = input.amountsIn.find(\n            (a) => a.token.address === ZERO_ADDRESS,\n        )?.amount;\n\n        return {\n            call,\n            to: BALANCER_VAULT,\n            value: value === undefined ? 0n : value,\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    private getAmountsQuery(\n        poolTokens: Token[],\n        input: AddLiquidityInput,\n    ): AddLiquidityAmounts {\n        switch (input.kind) {\n            case AddLiquidityKind.Unbalanced: {\n                return {\n                    minimumBpt: 0n,\n                    maxAmountsIn: getAmounts(poolTokens, input.amountsIn),\n                    tokenInIndex: undefined,\n                };\n            }\n            case AddLiquidityKind.SingleToken: {\n                const tokenInIndex = poolTokens.findIndex((t) =>\n                    t.isSameAddress(input.tokenIn),\n                );\n                if (tokenInIndex === -1)\n                    throw Error(\"Can't find index of SingleToken\");\n                const maxAmountsIn = Array(poolTokens.length).fill(0n);\n                maxAmountsIn[tokenInIndex] = MAX_UINT256;\n                return {\n                    minimumBpt: input.bptOut.rawAmount,\n                    maxAmountsIn,\n                    tokenInIndex,\n                };\n            }\n            case AddLiquidityKind.Proportional: {\n                return {\n                    minimumBpt: input.bptOut.rawAmount,\n                    maxAmountsIn: Array(poolTokens.length).fill(MAX_UINT256),\n                    tokenInIndex: undefined,\n                };\n            }\n        }\n    }\n\n    private getAmountsCall(\n        input: AddLiquidityWeightedCall,\n    ): AddLiquidityAmounts {\n        switch (input.addLiquidityKind) {\n            case AddLiquidityKind.Init:\n                throw Error('Unsupported Add Liquidity Kind');\n            case AddLiquidityKind.Unbalanced: {\n                const minimumBpt = input.slippage.removeFrom(\n                    input.bptOut.amount,\n                );\n                return {\n                    minimumBpt,\n                    maxAmountsIn: input.amountsIn.map((a) => a.amount),\n                    tokenInIndex: input.tokenInIndex,\n                };\n            }\n            case AddLiquidityKind.SingleToken:\n            case AddLiquidityKind.Proportional: {\n                return {\n                    minimumBpt: input.bptOut.amount,\n                    maxAmountsIn: input.amountsIn.map((a) =>\n                        input.slippage.applyTo(a.amount),\n                    ),\n                    tokenInIndex: input.tokenInIndex,\n                };\n            }\n            default:\n                throw Error('Unsupported Add Liquidity Kind');\n        }\n    }\n}\n","import {\n    AddLiquidityBase,\n    AddLiquidityBuildOutput,\n    AddLiquidityCall,\n    AddLiquidityConfig,\n    AddLiquidityInput,\n    AddLiquidityQueryOutput,\n    PoolState,\n} from '../..';\nimport { PoolType } from '../../../types';\nimport { AddLiquidityComposableStable } from './composableStable/addLiquidityComposableStable';\nimport { AddLiquidityWeighted } from './weighted/addLiquidityWeighted';\n\nexport class AddLiquidityV2 implements AddLiquidityBase {\n    private readonly addLiquidityTypes: Record<string, AddLiquidityBase> = {};\n\n    constructor(config?: AddLiquidityConfig) {\n        const { customAddLiquidityTypes } = config || {};\n        this.addLiquidityTypes = {\n            //GYRO2, GYRO3, GYROE pool types only support Add Liquidity Proportional (3 - ALL_TOKENS_IN_FOR_BPT_OUT)\n            [PoolType.Gyro2]: new AddLiquidityWeighted(),\n            [PoolType.Gyro3]: new AddLiquidityWeighted(),\n            [PoolType.GyroE]: new AddLiquidityWeighted(),\n            [PoolType.Weighted]: new AddLiquidityWeighted(),\n            [PoolType.ComposableStable]: new AddLiquidityComposableStable(),\n            // custom add liquidity types take precedence over base types\n            ...customAddLiquidityTypes,\n        };\n    }\n\n    public getAddLiquidity(poolType: string): AddLiquidityBase {\n        if (!this.addLiquidityTypes[poolType]) {\n            throw new Error('Unsupported pool type');\n        }\n        return this.addLiquidityTypes[poolType];\n    }\n\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput> {\n        return this.getAddLiquidity(poolState.type).query(input, poolState);\n    }\n\n    public buildCall(input: AddLiquidityCall): AddLiquidityBuildOutput {\n        return this.getAddLiquidity(input.poolType).buildCall(input);\n    }\n}\n","import {\n    AddLiquidityBase,\n    AddLiquidityBuildOutput,\n    AddLiquidityCall,\n    AddLiquidityInput,\n    AddLiquidityQueryOutput,\n    PoolState,\n} from '@/entities';\n\nexport class AddLiquidityV3 implements AddLiquidityBase {\n    query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput> {\n        console.log(input, poolState);\n\n        throw new Error('Method not implemented.');\n    }\n\n    buildCall(input: AddLiquidityCall): AddLiquidityBuildOutput {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import { Address } from '../../types';\n\nexport function areTokensInArray(tokens: Address[], tokenArray: Address[]) {\n    const sanitisedTokens = tokens.map((t) => t.toLowerCase() as Address);\n    const sanitisedTokenArray = tokenArray.map((t) => t.toLowerCase());\n    for (const token of sanitisedTokens) {\n        if (!sanitisedTokenArray.includes(token)) {\n            throw new Error(`Token ${token} not found in array`);\n        }\n    }\n}\n","import { AddLiquidityInput, AddLiquidityKind } from '../../addLiquidity/types';\nimport { InitPoolInput } from '../../initPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { areTokensInArray } from '../../utils/areTokensInArray';\n\nexport const validateTokensAddLiquidity = (\n    addLiquidityInput: AddLiquidityInput | InitPoolInput,\n    poolState: PoolState,\n) => {\n    switch (addLiquidityInput.kind) {\n        case AddLiquidityKind.Unbalanced:\n            areTokensInArray(\n                addLiquidityInput.amountsIn.map((a) => a.address),\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case AddLiquidityKind.SingleToken:\n            areTokensInArray(\n                [addLiquidityInput.tokenIn],\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case AddLiquidityKind.Proportional:\n            areTokensInArray(\n                [addLiquidityInput.bptOut.address],\n                [poolState.address],\n            );\n            break;\n        default:\n            break;\n    }\n};\n\nexport const validateTokensRemoveLiquidity = (\n    removeLiquidityInput: RemoveLiquidityInput,\n    poolState: PoolState,\n) => {\n    switch (removeLiquidityInput.kind) {\n        case RemoveLiquidityKind.Unbalanced:\n            areTokensInArray(\n                removeLiquidityInput.amountsOut.map((a) => a.address),\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case RemoveLiquidityKind.SingleToken:\n            areTokensInArray(\n                [removeLiquidityInput.tokenOut],\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case RemoveLiquidityKind.Proportional:\n            areTokensInArray(\n                [removeLiquidityInput.bptIn.address],\n                [poolState.address],\n            );\n            break;\n        default:\n            break;\n    }\n};\n\nexport const validatePoolHasBpt = (poolState: PoolState) => {\n    const { tokens, address } = poolState;\n    const bptIndex = tokens.findIndex((t) => t.address === address);\n    if (bptIndex < 0) {\n        throw new Error(\n            'INPUT_ERROR: Pool State should have BPT token included',\n        );\n    }\n};\n\nexport const validateCreatePoolTokens = (\n    tokens: { tokenAddress: string }[],\n) => {\n    const tokenAddresses = tokens.map((t) => t.tokenAddress);\n    if (tokenAddresses.length !== new Set(tokenAddresses).size) {\n        throw new Error('Duplicate token addresses');\n    }\n    if (tokens.length < 2) {\n        throw new Error('Minimum of 2 tokens required');\n    }\n};\n","import { AddLiquidityInput } from '../../addLiquidity/types';\nimport { CreatePoolComposableStableInput } from '../../createPool/types';\nimport { InitPoolInput } from '../../initPool/types';\nimport { RemoveLiquidityInput } from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { InputValidatorBase } from '../types';\nimport {\n    validateCreatePoolTokens,\n    validatePoolHasBpt,\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n} from '../utils/validateTokens';\n\nexport class InputValidatorComposableStable implements InputValidatorBase {\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput | InitPoolInput,\n        poolState: PoolState,\n    ): void {\n        validatePoolHasBpt(poolState);\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        validatePoolHasBpt(poolState);\n        validateTokensRemoveLiquidity(input, poolState);\n    }\n\n    validateCreatePool(input: CreatePoolComposableStableInput): void {\n        validateCreatePoolTokens(input.tokens);\n        if (input.tokens.length > 5) {\n            throw new Error(\n                'Composable stable pools can have a maximum of 5 tokens',\n            );\n        }\n        if (input.amplificationParameter <= BigInt(0)) {\n            throw new Error('Amplification parameter must be greater than 0');\n        }\n        if (input.amplificationParameter > BigInt(5000)) {\n            throw new Error(\n                'Amplification parameter must be equal or lower than 5000',\n            );\n        }\n        return;\n    }\n}\n","import { AddLiquidityInput, AddLiquidityKind } from '../../addLiquidity/types';\nimport { CreatePoolWeightedInput } from '../../createPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { InputValidatorBase } from '../types';\nimport {\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n} from '../utils/validateTokens';\n\nexport class InputValidatorGyro implements InputValidatorBase {\n    static readonly addLiquidityKindNotSupportedByGyro =\n        'INPUT_ERROR: Gyro pools do not implement this add liquidity kind, only Add Liquidity Proportional (3 - ALL_TOKENS_IN_FOR_BPT_OUT) is supported';\n\n    static readonly removeLiquidityKindNotSupportedByGyro =\n        'INPUT_ERROR: Gyro pools do not implement this remove liquidity kind, only Remove Liquidity Proportional (1 - EXACT_BPT_IN_FOR_TOKENS_OUT) is supported';\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (addLiquidityInput.kind !== AddLiquidityKind.Proportional) {\n            throw new Error(\n                InputValidatorGyro.addLiquidityKindNotSupportedByGyro,\n            );\n        }\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        removeLiquidityInput: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (removeLiquidityInput.kind !== RemoveLiquidityKind.Proportional) {\n            throw new Error(\n                InputValidatorGyro.removeLiquidityKindNotSupportedByGyro,\n            );\n        }\n        validateTokensRemoveLiquidity(removeLiquidityInput, poolState);\n    }\n\n    validateCreatePool(input: CreatePoolWeightedInput): void {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import { AddLiquidityInput } from '../../addLiquidity';\nimport { CreatePoolWeightedInput } from '../../createPool/types';\nimport { InitPoolInput } from '../../initPool/types';\nimport { RemoveLiquidityInput } from '../../removeLiquidity';\nimport { PoolState } from '../../types';\nimport { InputValidatorBase } from '../types';\nimport {\n    validateCreatePoolTokens,\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n} from '../utils/validateTokens';\n\nexport class InputValidatorWeighted implements InputValidatorBase {\n    validateCreatePool(input: CreatePoolWeightedInput) {\n        validateCreatePoolTokens(input.tokens);\n        if (input.tokens.length > 8) {\n            throw new Error('Weighted pools can have a maximum of 8 tokens');\n        }\n        const weightsSum = input.tokens.reduce(\n            (acc, { weight }) => acc + weight,\n            0n,\n        );\n        if (weightsSum !== BigInt(1e18)) {\n            throw new Error('Weights must sum to 1e18');\n        }\n        if (input.tokens.find(({ weight }) => weight === 0n)) {\n            throw new Error('Weight cannot be 0');\n        }\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput | InitPoolInput,\n        poolState: PoolState,\n    ): void {\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        validateTokensRemoveLiquidity(input, poolState);\n    }\n}\n","import { PoolType } from '../../types';\nimport { AddLiquidityInput } from '../addLiquidity/types';\nimport { CreatePoolInput } from '../createPool/types';\nimport { InitPoolInput } from '../initPool/types';\nimport { PoolState } from '../types';\nimport { InputValidatorComposableStable } from './composableStable/inputValidatorComposableStable';\nimport { InputValidatorGyro } from './gyro/inputValidatorGyro';\nimport { InputValidatorBase } from './types';\nimport { InputValidatorWeighted } from './weighted/inputValidatorWeighted';\n\nexport class InputValidator {\n    validators: Record<string, InputValidatorBase> = {};\n\n    constructor() {\n        this.validators = {\n            [PoolType.Weighted]: new InputValidatorWeighted(),\n            [PoolType.Gyro2]: new InputValidatorGyro(),\n            [PoolType.Gyro3]: new InputValidatorGyro(),\n            [PoolType.GyroE]: new InputValidatorGyro(),\n            [PoolType.ComposableStable]: new InputValidatorComposableStable(),\n        };\n    }\n\n    getValidator(poolType: string): InputValidatorBase {\n        if (!this.validators[poolType])\n            throw new Error('This Pool type does not have a validator');\n        return this.validators[poolType];\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput | InitPoolInput,\n        poolState: PoolState,\n    ): void {\n        this.getValidator(poolState.type).validateAddLiquidity(\n            addLiquidityInput,\n            poolState,\n        );\n    }\n\n    validateRemoveLiquidity(removeLiquidityInput: any, poolState: any): void {\n        this.getValidator(poolState.type).validateRemoveLiquidity(\n            removeLiquidityInput,\n            poolState,\n        );\n    }\n\n    validateCreatePool(input: CreatePoolInput): void {\n        this.getValidator(input.poolType).validateCreatePool(input);\n    }\n}\n","import {\n    AddLiquidityBase,\n    AddLiquidityBuildOutput,\n    AddLiquidityInput,\n    AddLiquidityQueryOutput,\n    AddLiquidityCall,\n    AddLiquidityConfig,\n} from './types';\nimport { PoolState } from '../types';\nimport { AddLiquidityV2 } from './addLiquidityV2';\nimport { AddLiquidityV3 } from './addLiquidityV3';\nimport { InputValidator } from '../inputValidator/inputValidator';\n\nexport class AddLiquidity implements AddLiquidityBase {\n    constructor(public config?: AddLiquidityConfig) {}\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput> {\n        this.inputValidator.validateAddLiquidity(input, poolState);\n        switch (poolState.balancerVersion) {\n            case 2: {\n                const addLiquidity = new AddLiquidityV2(this.config);\n                return addLiquidity.query(input, poolState);\n            }\n            case 3: {\n                const addLiquidity = new AddLiquidityV3();\n                return addLiquidity.query(input, poolState);\n            }\n        }\n    }\n\n    buildCall(input: AddLiquidityCall): AddLiquidityBuildOutput {\n        switch (input.balancerVersion) {\n            case 2: {\n                const addLiquidity = new AddLiquidityV2(this.config);\n                return addLiquidity.buildCall(input);\n            }\n            case 3: {\n                const addLiquidity = new AddLiquidityV3();\n                return addLiquidity.buildCall(input);\n            }\n        }\n    }\n}\n","import { Address, encodeFunctionData, parseEther } from 'viem';\nimport { composableStableFactoryV5Abi } from '../../../../abi/composableStableFactoryV5';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolComposableStableArgs,\n    CreatePoolComposableStableInput,\n} from '../../types';\nimport { getRandomBytes32 } from '../../../utils/getRandomBytes32';\n\nexport class CreatePoolComposableStable implements CreatePoolBase {\n    buildCall(\n        input: CreatePoolComposableStableInput,\n    ): CreatePoolBuildCallOutput {\n        const args = this.parseCreateFunctionArgs(input);\n        const encodedCall = encodeFunctionData({\n            abi: composableStableFactoryV5Abi,\n            functionName: 'create',\n            args,\n        });\n        return { call: encodedCall };\n    }\n\n    private parseCreateFunctionArgs(\n        input: CreatePoolComposableStableInput,\n    ): CreatePoolComposableStableArgs {\n        const sortedTokenParams = input.tokens.sort(\n            ({ tokenAddress: address1 }, { tokenAddress: address2 }) => {\n                const diff = BigInt(address1) - BigInt(address2);\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n            },\n        );\n\n        const [tokens, rateProviders, tokenRateCacheDurations] =\n            sortedTokenParams.reduce(\n                (acc, curr) => {\n                    acc[0].push(curr.tokenAddress);\n                    acc[1].push(curr.rateProvider);\n                    acc[2].push(curr.tokenRateCacheDuration);\n                    return acc;\n                },\n                [[], [], []] as [Address[], Address[], bigint[]],\n            );\n\n        return [\n            input.name || input.symbol,\n            input.symbol,\n            tokens,\n            input.amplificationParameter,\n            rateProviders,\n            tokenRateCacheDurations,\n            input.exemptFromYieldProtocolFeeFlag,\n            parseEther(input.swapFee),\n            input.poolOwnerAddress,\n            input.salt || getRandomBytes32(),\n        ];\n    }\n}\n","export const composableStableFactoryV5Abi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'factoryVersion', type: 'string' },\n            { internalType: 'string', name: 'poolVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { anonymous: false, inputs: [], name: 'FactoryDisabled', type: 'event' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'symbol', type: 'string' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amplificationParameter',\n                type: 'uint256',\n            },\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'rateProviders',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'tokenRateCacheDurations',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'bool',\n                name: 'exemptFromYieldProtocolFeeFlag',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'create',\n        outputs: [\n            {\n                internalType: 'contract ComposableStablePool',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCode',\n        outputs: [{ internalType: 'bytes', name: '', type: 'bytes' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCodeContracts',\n        outputs: [\n            { internalType: 'address', name: 'contractA', type: 'address' },\n            { internalType: 'address', name: 'contractB', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseConfiguration',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeePercentagesProvider',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolFromFactory',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","import { Hex } from 'viem';\n\nexport const getRandomBytes32 = (): Hex => {\n    const getRandomBytes8 = () => Math.random().toString(16).slice(2, 10);\n    const randomBytes32 = Array(8).fill(null).map(getRandomBytes8).join('');\n    return `0x${randomBytes32}`;\n};\n","import { Address, encodeFunctionData, parseEther } from 'viem';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolWeightedArgs,\n    CreatePoolWeightedInput,\n} from '../../types';\nimport { getRandomBytes32 } from '../../../utils/getRandomBytes32';\nimport { weightedFactoryV4Abi } from '../../../../abi/weightedFactoryV4';\n\nexport class CreatePoolWeighted implements CreatePoolBase {\n    buildCall(input: CreatePoolWeightedInput): CreatePoolBuildCallOutput {\n        const args = this.parseCreateFunctionArgs(input);\n        const encodedCall = encodeFunctionData({\n            abi: weightedFactoryV4Abi,\n            functionName: 'create',\n            args,\n        });\n        return { call: encodedCall };\n    }\n\n    private parseCreateFunctionArgs(\n        input: CreatePoolWeightedInput,\n    ): CreatePoolWeightedArgs {\n        const sortedTokenParams = input.tokens.sort(\n            ({ tokenAddress: address1 }, { tokenAddress: address2 }) => {\n                const diff = BigInt(address1) - BigInt(address2);\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n            },\n        );\n\n        const [tokens, weights, rateProviders] = sortedTokenParams.reduce(\n            (acc, curr) => {\n                acc[0].push(curr.tokenAddress);\n                acc[1].push(curr.weight);\n                acc[2].push(curr.rateProvider);\n                return acc;\n            },\n            [[], [], []] as [Address[], bigint[], Address[]],\n        );\n\n        return [\n            input.name || input.symbol,\n            input.symbol,\n            tokens,\n            weights,\n            rateProviders,\n            parseEther(input.swapFee),\n            input.poolOwnerAddress,\n            input.salt || getRandomBytes32(),\n        ];\n    }\n}\n","import { PoolType } from '@/types';\nimport { CreatePoolComposableStable } from './composableStable/createPoolComposableStable';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from '../types';\nimport { CreatePoolWeighted } from './weighted/createPoolWeighted';\n\nexport class CreatePoolV2 implements CreatePoolBase {\n    // TODO: should we allow for custom create pool types?\n    private readonly createPoolTypes: Record<string, CreatePoolBase> = {};\n\n    constructor() {\n        this.createPoolTypes = {\n            [PoolType.Weighted]: new CreatePoolWeighted(),\n            [PoolType.ComposableStable]: new CreatePoolComposableStable(),\n        };\n    }\n\n    private getCreatePool(poolType: string): CreatePoolBase {\n        if (!this.createPoolTypes[poolType]) {\n            throw new Error('Unsupported pool type: ${poolType}');\n        }\n        return this.createPoolTypes[poolType];\n    }\n\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        return this.getCreatePool(input.poolType).buildCall(input);\n    }\n}\n","import {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from './types';\n\nexport class CreatePoolV3 implements CreatePoolBase {\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import { InputValidator } from '../inputValidator/inputValidator';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from './types';\nimport { CreatePoolV2 } from './createPoolV2';\nimport { CreatePoolV3 } from './createPoolV3';\n\nexport * from './types';\n\nexport class CreatePool implements CreatePoolBase {\n    private readonly inputValidator: InputValidator;\n\n    constructor() {\n        this.inputValidator = new InputValidator();\n    }\n\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        this.inputValidator.validateCreatePool(input);\n        switch (input.balancerVersion) {\n            case 2:\n                return new CreatePoolV2().buildCall(input);\n            case 3:\n                return new CreatePoolV3().buildCall(input);\n        }\n    }\n}\n","import { Address, encodeFunctionData } from 'viem';\nimport { ComposableStableEncoder } from '../../../encoders/composableStable';\nimport { InitPoolAmountsComposableStable, PoolState } from '../../../types';\nimport {\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '../../../utils';\nimport { InitPoolBase, InitPoolBuildOutput, InitPoolInput } from '../../types';\nimport { vaultAbi } from '../../../../abi';\nimport { BALANCER_VAULT, MAX_UINT256, ZERO_ADDRESS } from '../../../../utils';\nimport { Token } from '@/entities/token';\n\nexport class InitPoolComposableStable implements InitPoolBase {\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmounts(input, poolState.address, sortedTokens);\n\n        const userData =\n            ComposableStableEncoder.encodeInitPoolUserData(amounts);\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            poolId: poolState.id,\n            sortedTokens,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n        });\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const value = input.amountsIn.find(\n            (a) => a.address === ZERO_ADDRESS,\n        )?.rawAmount;\n\n        return {\n            call,\n            to: BALANCER_VAULT as Address,\n            value: value === undefined ? 0n : value,\n        };\n    }\n\n    private getAmounts(\n        input: InitPoolInput,\n        poolAddress: Address,\n        poolTokens: Token[],\n    ): InitPoolAmountsComposableStable {\n        const bptIndex = poolTokens.findIndex((t) => t.address === poolAddress);\n        const maxAmountsIn = getAmounts(poolTokens, [\n            ...input.amountsIn.slice(0, bptIndex),\n            {\n                address: poolAddress,\n                decimals: 18,\n                rawAmount: MAX_UINT256,\n            },\n            ...input.amountsIn.slice(bptIndex),\n        ]);\n        const amountsIn = getAmounts(poolTokens, [\n            ...input.amountsIn.slice(0, bptIndex),\n            {\n                address: poolAddress,\n                decimals: 18,\n                rawAmount: BigInt(0),\n            },\n            ...input.amountsIn.slice(bptIndex),\n        ]);\n        return {\n            maxAmountsIn,\n            amountsIn,\n        };\n    }\n}\n","import { Address, encodeFunctionData } from 'viem';\nimport { InitPoolAmounts, PoolState } from '../../../types';\nimport { InitPoolBase, InitPoolBuildOutput, InitPoolInput } from '../../types';\nimport { BALANCER_VAULT, ZERO_ADDRESS } from '../../../../utils';\nimport { vaultAbi } from '../../../../abi';\nimport {\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '../../../utils';\nimport { Token } from '../../../token';\nimport { WeightedEncoder } from '../../../encoders';\n\nexport class InitPoolWeighted implements InitPoolBase {\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmounts(input, sortedTokens);\n        const userData = WeightedEncoder.encodeInitPoolUserData(amounts);\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            poolId: poolState.id,\n            sortedTokens,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n        });\n\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const value = input.amountsIn.find(\n            (a) => a.address === ZERO_ADDRESS,\n        )?.rawAmount;\n\n        return {\n            call,\n            to: BALANCER_VAULT as Address,\n            value: value === undefined ? 0n : value,\n        };\n    }\n\n    private getAmounts(\n        input: InitPoolInput,\n        poolTokens: Token[],\n    ): InitPoolAmounts {\n        return {\n            maxAmountsIn: getAmounts(poolTokens, input.amountsIn),\n        };\n    }\n}\n","import { PoolState } from '@/entities/types';\nimport { PoolType } from '@/types';\n\nimport { InitPoolComposableStable } from './composableStable/initPoolComposableStable';\nimport {\n    InitPoolBase,\n    InitPoolBuildOutput,\n    InitPoolConfig,\n    InitPoolInput,\n} from '../types';\nimport { InitPoolWeighted } from './weighted/initPoolWeighted';\n\nexport class InitPoolV2 implements InitPoolBase {\n    initPoolTypes: Record<string, InitPoolBase> = {};\n\n    constructor(config?: InitPoolConfig) {\n        const { initPoolTypes: customAddLiquidityInitTypes } = config || {};\n        this.initPoolTypes = {\n            [PoolType.Weighted]: new InitPoolWeighted(),\n            [PoolType.ComposableStable]: new InitPoolComposableStable(),\n            ...customAddLiquidityInitTypes,\n        };\n    }\n\n    getInitPool(poolType: string): InitPoolBase {\n        if (!this.initPoolTypes[poolType]) {\n            throw new Error('Unsupported pool type: ${poolType}');\n        }\n        return this.initPoolTypes[poolType];\n    }\n\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        return this.getInitPool(poolState.type).buildCall(input, poolState);\n    }\n}\n","import { PoolState } from '../types';\nimport { InitPoolBase, InitPoolBuildOutput, InitPoolInput } from './types';\n\nexport class InitPoolV3 implements InitPoolBase {\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        console.log(input, poolState);\n        throw new Error('Method not implemented.');\n    }\n}\n","import { InputValidator } from '../inputValidator/inputValidator';\nimport { PoolState } from '../types';\nimport { InitPoolBuildOutput, InitPoolConfig, InitPoolInput } from './types';\nimport { InitPoolV2 } from './initPoolV2';\nimport { InitPoolV3 } from './initPoolV3';\n\nexport * from './types';\n\nexport class InitPool {\n    inputValidator: InputValidator = new InputValidator();\n\n    constructor(public config?: InitPoolConfig) {}\n\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        this.inputValidator.validateAddLiquidity(input, poolState);\n        switch (poolState.balancerVersion) {\n            case 2:\n                return new InitPoolV2().buildCall(input, poolState);\n            case 3:\n                return new InitPoolV3().buildCall(input, poolState);\n        }\n    }\n}\n","import { BasePool } from './pools';\nimport { Token } from './token';\nimport { TokenAmount } from './tokenAmount';\nimport { SwapKind } from '../types';\n\nexport class Path {\n    public readonly pools: BasePool[];\n    public readonly tokens: Token[];\n\n    public constructor(tokens: Token[], pools: BasePool[]) {\n        if (pools.length === 0 || tokens.length < 2) {\n            throw new Error(\n                'Invalid path: must contain at least 1 pool and 2 tokens.',\n            );\n        }\n        if (tokens.length !== pools.length + 1) {\n            throw new Error(\n                'Invalid path: tokens length must equal pools length + 1',\n            );\n        }\n\n        this.pools = pools;\n        this.tokens = tokens;\n    }\n}\n\nexport class PathWithAmount extends Path {\n    public readonly swapAmount: TokenAmount;\n    public readonly swapKind: SwapKind;\n    public readonly outputAmount: TokenAmount;\n    public readonly inputAmount: TokenAmount;\n    private readonly mutateBalances: boolean;\n    private readonly printPath: any = [];\n\n    public constructor(\n        tokens: Token[],\n        pools: BasePool[],\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ) {\n        super(tokens, pools);\n        this.swapAmount = swapAmount;\n        this.mutateBalances = Boolean(mutateBalances);\n\n        //call to super ensures this array access is safe\n        if (tokens[0].isUnderlyingEqual(swapAmount.token)) {\n            this.swapKind = SwapKind.GivenIn;\n        } else {\n            this.swapKind = SwapKind.GivenOut;\n        }\n\n        try {\n            if (this.swapKind === SwapKind.GivenIn) {\n                const amounts: TokenAmount[] = new Array(this.tokens.length);\n                amounts[0] = this.swapAmount;\n                for (let i = 0; i < this.pools.length; i++) {\n                    const pool = this.pools[i];\n                    const outputAmount = pool.swapGivenIn(\n                        this.tokens[i],\n                        this.tokens[i + 1],\n                        amounts[i],\n                        this.mutateBalances,\n                    );\n                    amounts[i + 1] = outputAmount;\n                    this.printPath.push({\n                        pool: pool.id,\n                        input: `${amounts[i].amount.toString()} ${\n                            this.tokens[i].symbol\n                        }`,\n                        output: `${outputAmount.amount.toString()} ${\n                            this.tokens[i + 1].symbol\n                        }`,\n                    });\n                }\n                this.outputAmount = amounts[amounts.length - 1];\n                this.inputAmount = this.swapAmount;\n            } else {\n                const amounts: TokenAmount[] = new Array(this.tokens.length);\n                amounts[amounts.length - 1] = this.swapAmount;\n                for (let i = this.pools.length; i >= 1; i--) {\n                    const pool = this.pools[i - 1];\n                    const inputAmount = pool.swapGivenOut(\n                        this.tokens[i - 1],\n                        this.tokens[i],\n                        amounts[i],\n                        this.mutateBalances,\n                    );\n                    amounts[i - 1] = inputAmount;\n                    this.printPath.push({\n                        pool: pool.id,\n                        input: `${inputAmount.amount.toString()} ${\n                            this.tokens[i - 1].symbol\n                        }`,\n                        output: `${amounts[i].amount.toString()} ${\n                            this.tokens[i].symbol\n                        }`,\n                    });\n                }\n                this.printPath = this.printPath.reverse();\n                this.inputAmount = amounts[0];\n                this.outputAmount = this.swapAmount;\n            }\n        } catch {\n            throw new Error(\n                'Invalid path, swap amount exceeds maximum for pool',\n            );\n        }\n    }\n\n    public print(): void {\n        console.table(this.printPath);\n    }\n}\n","import { formatUnits } from 'viem';\nimport { MathSol, abs, max, min } from '../../utils';\nimport { AddLiquidity } from '../addLiquidity';\nimport {\n    AddLiquidityKind,\n    AddLiquiditySingleTokenInput,\n    AddLiquidityUnbalancedInput,\n} from '../addLiquidity/types';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport { RemoveLiquidity } from '../removeLiquidity';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquiditySingleTokenInput,\n    RemoveLiquidityUnbalancedInput,\n} from '../removeLiquidity/types';\nimport { TokenAmount } from '../tokenAmount';\nimport { PoolState } from '../types';\nimport { getSortedTokens } from '../utils';\nimport { SingleSwap, SwapKind } from '../../types';\nimport { SingleSwapInput, doSingleSwapQuery } from '../utils/doSingleSwapQuery';\n\nexport class PriceImpact {\n    static addLiquiditySingleToken = async (\n        input: AddLiquiditySingleTokenInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within AddLiquidity\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidity = new AddLiquidity();\n        const { amountsIn } = await addLiquidity.query(input, poolState);\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidity = new RemoveLiquidity();\n        const removeLiquidityInput: RemoveLiquidityInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            bptIn: input.bptOut,\n            tokenOut: input.tokenIn,\n            kind: RemoveLiquidityKind.SingleToken,\n        };\n        const { amountsOut } = await removeLiquidity.query(\n            removeLiquidityInput,\n            poolState,\n        );\n\n        // get relevant amounts for price impact calculation\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const tokenIndex = sortedTokens.findIndex((t) =>\n            t.isSameAddress(input.tokenIn),\n        );\n        const amountInitial = parseFloat(amountsIn[tokenIndex].toSignificant());\n        const amountFinal = parseFloat(amountsOut[tokenIndex].toSignificant());\n\n        // calculate price impact using ABA method\n        const priceImpact = (amountInitial - amountFinal) / amountInitial / 2;\n        return PriceImpactAmount.fromDecimal(`${priceImpact}`);\n    };\n\n    static addLiquidityUnbalanced = async (\n        input: AddLiquidityUnbalancedInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within AddLiquidity\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidity = new AddLiquidity();\n        const { amountsIn, bptOut } = await addLiquidity.query(\n            input,\n            poolState,\n        );\n        const poolTokens = amountsIn.map((a) => a.token);\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidity = new RemoveLiquidity();\n        const removeLiquidityInput: RemoveLiquidityInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            bptIn: bptOut.toInputAmount(),\n            kind: RemoveLiquidityKind.Proportional,\n        };\n        const { amountsOut } = await removeLiquidity.query(\n            removeLiquidityInput,\n            poolState,\n        );\n\n        // deltas between unbalanced and proportional amounts\n        const deltas = amountsOut.map((a, i) => a.amount - amountsIn[i].amount);\n\n        // get how much BPT each delta would mint\n        const deltaBPTs: bigint[] = [];\n        for (let i = 0; i < deltas.length; i++) {\n            if (deltas[i] === 0n) {\n                deltaBPTs.push(0n);\n            } else {\n                deltaBPTs.push(await queryAddLiquidityForTokenDelta(i));\n            }\n        }\n\n        // zero out deltas by swapping between tokens from proportionalAmounts\n        // to exactAmountsIn, leaving the remaining delta within a single token\n        const remainingDeltaIndex = await zeroOutDeltas(deltas, deltaBPTs);\n\n        // get relevant amounts for price impact calculation\n        const amountInitial = parseFloat(\n            formatUnits(\n                amountsIn[remainingDeltaIndex].amount,\n                amountsIn[remainingDeltaIndex].token.decimals,\n            ),\n        );\n        const amountDelta = parseFloat(\n            formatUnits(\n                abs(deltas[remainingDeltaIndex]),\n                amountsIn[remainingDeltaIndex].token.decimals,\n            ),\n        );\n\n        // calculate price impact using ABA method\n        const priceImpact = amountDelta / amountInitial / 2;\n        return PriceImpactAmount.fromDecimal(`${priceImpact}`);\n\n        // helper functions\n\n        async function zeroOutDeltas(deltas: bigint[], deltaBPTs: bigint[]) {\n            let minNegativeDeltaIndex = 0;\n            const nonZeroDeltas = deltas.filter((d) => d !== 0n);\n            for (let i = 0; i < nonZeroDeltas.length - 1; i++) {\n                const minPositiveDeltaIndex = deltaBPTs.findIndex(\n                    (deltaBPT) =>\n                        deltaBPT === min(deltaBPTs.filter((a) => a > 0n)),\n                );\n                minNegativeDeltaIndex = deltaBPTs.findIndex(\n                    (deltaBPT) =>\n                        deltaBPT === max(deltaBPTs.filter((a) => a < 0n)),\n                );\n\n                let kind: SwapKind;\n                let givenTokenIndex: number;\n                let resultTokenIndex: number;\n                if (\n                    deltaBPTs[minPositiveDeltaIndex] <\n                    abs(deltaBPTs[minNegativeDeltaIndex])\n                ) {\n                    kind = SwapKind.GivenIn;\n                    givenTokenIndex = minPositiveDeltaIndex;\n                    resultTokenIndex = minNegativeDeltaIndex;\n                } else {\n                    kind = SwapKind.GivenOut;\n                    givenTokenIndex = minNegativeDeltaIndex;\n                    resultTokenIndex = minPositiveDeltaIndex;\n                }\n\n                const singleSwap: SingleSwap = {\n                    poolId: poolState.id,\n                    kind,\n                    assetIn: poolTokens[minPositiveDeltaIndex].address,\n                    assetOut: poolTokens[minNegativeDeltaIndex].address,\n                    amount: abs(deltas[givenTokenIndex]),\n                    userData: '0x',\n                };\n\n                /**\n                 * TODO V3: right now swap exists only as part of the SOR.\n                 * We could make it a proper entity with v2/v3 variations and\n                 * consume it here as a higher level abstraction.\n                 */\n                const resultAmount = await doSingleSwapQuery({\n                    ...singleSwap,\n                    rpcUrl: input.rpcUrl,\n                    chainId: input.chainId,\n                });\n\n                deltas[givenTokenIndex] = 0n;\n                deltaBPTs[givenTokenIndex] = 0n;\n                deltas[resultTokenIndex] =\n                    deltas[resultTokenIndex] + resultAmount;\n                deltaBPTs[resultTokenIndex] =\n                    await queryAddLiquidityForTokenDelta(resultTokenIndex);\n            }\n            return minNegativeDeltaIndex;\n        }\n\n        async function queryAddLiquidityForTokenDelta(\n            tokenIndex: number,\n        ): Promise<bigint> {\n            const absDelta = TokenAmount.fromRawAmount(\n                poolTokens[tokenIndex],\n                abs(deltas[tokenIndex]),\n            );\n            const { bptOut: deltaBPT } = await addLiquidity.query(\n                {\n                    ...input,\n                    amountsIn: [absDelta.toInputAmount()],\n                },\n                poolState,\n            );\n            const signal = deltas[tokenIndex] >= 0n ? 1n : -1n;\n            return deltaBPT.amount * signal;\n        }\n    };\n\n    static removeLiquidity = async (\n        input: RemoveLiquiditySingleTokenInput | RemoveLiquidityUnbalancedInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within RemoveLiquidity\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidity = new RemoveLiquidity();\n        const { bptIn, amountsOut } = await removeLiquidity.query(\n            input,\n            poolState,\n        );\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidity = new AddLiquidity();\n        const addLiquidityInput: AddLiquidityUnbalancedInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            amountsIn: amountsOut.map((a) => a.toInputAmount()),\n            kind: AddLiquidityKind.Unbalanced,\n        };\n        const { bptOut } = await addLiquidity.query(\n            addLiquidityInput,\n            poolState,\n        );\n\n        // get relevant amounts for price impact calculation\n        const amountInitial = parseFloat(bptIn.toSignificant());\n        const amountFinal = parseFloat(bptOut.toSignificant());\n\n        // calculate price impact using ABA method\n        const priceImpact = (amountInitial - amountFinal) / amountInitial / 2;\n        return PriceImpactAmount.fromDecimal(`${priceImpact}`);\n    };\n\n    static singleSwap = async ({\n        poolId,\n        kind,\n        assetIn,\n        assetOut,\n        amount,\n        userData,\n        rpcUrl,\n        chainId,\n    }: SingleSwapInput): Promise<PriceImpactAmount> => {\n        // simulate swap in original direction\n        const amountResult = await doSingleSwapQuery({\n            poolId,\n            kind,\n            assetIn,\n            assetOut,\n            amount,\n            userData,\n            rpcUrl,\n            chainId,\n        });\n\n        // simulate swap in the reverse direction\n        const amountFinal = await doSingleSwapQuery({\n            poolId: poolId,\n            kind: kind,\n            assetIn: assetOut,\n            assetOut: assetIn,\n            amount: amountResult,\n            userData,\n            rpcUrl,\n            chainId,\n        });\n\n        // calculate price impact using ABA method\n        const priceImpact = MathSol.divDownFixed(\n            abs(amount - amountFinal),\n            amount * 2n,\n        );\n\n        return PriceImpactAmount.fromRawAmount(priceImpact);\n    };\n}\n","import { formatEther, parseEther } from 'viem';\nimport { BigintIsh } from './tokenAmount';\n\nexport class PriceImpactAmount {\n    public amount: bigint; // raw amount in wei (i.e. 18 decimals)\n    public decimal: number; // decimal = wei * 1e-18\n    public percentage: number; // percentage = decimal * 1e-2\n    public bps: number; // bps = basis points = decimal * 1e-4\n\n    public static fromRawAmount(rawAmount: BigintIsh) {\n        return new PriceImpactAmount(rawAmount);\n    }\n\n    public static fromDecimal(decimalAmount: `${number}`) {\n        const rawAmount = parseEther(decimalAmount);\n        return PriceImpactAmount.fromRawAmount(rawAmount);\n    }\n\n    public static fromPercentage(percentageAmount: `${number}`) {\n        const decimalAmount = Number(percentageAmount) / 100;\n        return PriceImpactAmount.fromDecimal(`${decimalAmount}`);\n    }\n\n    public static fromBasisPoints(bpsAmount: `${number}`) {\n        const decimalAmount = Number(bpsAmount) / 10000;\n        return PriceImpactAmount.fromDecimal(`${decimalAmount}`);\n    }\n\n    protected constructor(amount: BigintIsh) {\n        this.amount = BigInt(amount);\n        this.decimal = parseFloat(formatEther(this.amount));\n        this.percentage = this.decimal * 100;\n        this.bps = this.decimal * 10000;\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '../../../token';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { WeightedEncoder } from '../../../encoders/weighted';\nimport {\n    BALANCER_VAULT,\n    MAX_UINT256,\n    ZERO_ADDRESS,\n} from '../../../../utils/constants';\nimport { vaultAbi } from '../../../../abi';\nimport { parseRemoveLiquidityArgs } from '../../../utils/parseRemoveLiquidityArgs';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildOutput,\n    RemoveLiquidityCall,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityQueryOutput,\n    RemoveLiquidityWeightedCall,\n} from '../../types';\nimport { RemoveLiquidityAmounts, PoolState } from '../../../types';\nimport { doRemoveLiquidityQuery } from '../../../utils/doRemoveLiquidityQuery';\nimport { getAmounts, getSortedTokens } from '../../../utils';\n\nexport class RemoveLiquidityWeighted implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmountsQuery(sortedTokens, input);\n\n        const userData = WeightedEncoder.encodeRemoveLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        // tokensOut will have zero address if removing liquidity to native asset\n        const { args, tokensOut } = parseRemoveLiquidityArgs({\n            chainId: input.chainId,\n            toNativeAsset: !!input.toNativeAsset,\n            poolId: poolState.id,\n            sortedTokens,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n        });\n\n        const queryOutput = await doRemoveLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(bpt, queryOutput.bptIn);\n\n        const amountsOut = queryOutput.amountsOut.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensOut[i], a),\n        );\n\n        return {\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: amounts.tokenOutIndex,\n            toInternalBalance: !!input.toInternalBalance,\n            balancerVersion: poolState.balancerVersion,\n        };\n    }\n\n    private getAmountsQuery(\n        tokens: Token[],\n        input: RemoveLiquidityInput,\n    ): RemoveLiquidityAmounts {\n        switch (input.kind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return {\n                    minAmountsOut: getAmounts(tokens, input.amountsOut),\n                    tokenOutIndex: undefined,\n                    maxBptAmountIn: MAX_UINT256,\n                };\n            case RemoveLiquidityKind.SingleToken:\n                return {\n                    minAmountsOut: Array(tokens.length).fill(0n),\n                    tokenOutIndex: tokens.findIndex((t) =>\n                        t.isSameAddress(input.tokenOut),\n                    ),\n                    maxBptAmountIn: input.bptIn.rawAmount,\n                };\n            case RemoveLiquidityKind.Proportional:\n                return {\n                    minAmountsOut: Array(tokens.length).fill(0n),\n                    tokenOutIndex: undefined,\n                    maxBptAmountIn: input.bptIn.rawAmount,\n                };\n        }\n    }\n\n    public buildCall(\n        input: RemoveLiquidityWeightedCall,\n    ): RemoveLiquidityBuildOutput {\n        const amounts = this.getAmountsCall(input);\n\n        const userData = WeightedEncoder.encodeRemoveLiquidityUserData(\n            input.removeLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseRemoveLiquidityArgs({\n            poolId: input.poolId,\n            sortedTokens: input.amountsOut.map((a) => a.token),\n            sender: input.sender,\n            recipient: input.recipient,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n        });\n\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'exitPool',\n            args,\n        });\n\n        return {\n            call,\n            to: BALANCER_VAULT,\n            value: 0n,\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    private getAmountsCall(input: RemoveLiquidityCall): RemoveLiquidityAmounts {\n        switch (input.removeLiquidityKind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return {\n                    minAmountsOut: input.amountsOut.map((a) => a.amount),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.slippage.applyTo(input.bptIn.amount),\n                };\n            case RemoveLiquidityKind.SingleToken:\n                if (input.tokenOutIndex === undefined) {\n                    throw new Error(\n                        'tokenOutIndex must be defined for RemoveLiquiditySingleToken',\n                    );\n                }\n                return {\n                    minAmountsOut: input.amountsOut.map((a) =>\n                        input.slippage.removeFrom(a.amount),\n                    ),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.bptIn.amount,\n                };\n            case RemoveLiquidityKind.Proportional:\n                return {\n                    minAmountsOut: input.amountsOut.map((a) =>\n                        input.slippage.removeFrom(a.amount),\n                    ),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.bptIn.amount,\n                };\n            default:\n                throw Error('Unsupported Remove Liquidity Kind');\n        }\n    }\n}\n","import { Address } from '../../types';\nimport { Token } from '../token';\nimport { ExitPoolRequest } from '../removeLiquidity/types';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function parseRemoveLiquidityArgs({\n    chainId,\n    toNativeAsset,\n    sortedTokens,\n    poolId,\n    sender,\n    recipient,\n    minAmountsOut,\n    userData,\n    toInternalBalance,\n}: {\n    chainId?: number;\n    toNativeAsset?: boolean;\n    sortedTokens: Token[];\n    poolId: Address;\n    sender: Address;\n    recipient: Address;\n    minAmountsOut: bigint[];\n    userData: Address;\n    toInternalBalance: boolean;\n}) {\n    // replace wrapped token with native asset if needed\n    const tokensOut =\n        chainId && toNativeAsset\n            ? replaceWrapped([...sortedTokens], chainId)\n            : [...sortedTokens];\n\n    const exitPoolRequest: ExitPoolRequest = {\n        assets: tokensOut.map((t) => t.address), // with BPT\n        minAmountsOut, // with BPT\n        userData, // wihtout BPT\n        toInternalBalance,\n    };\n\n    return {\n        args: [poolId, sender, recipient, exitPoolRequest] as const,\n        tokensOut,\n    };\n}\n","import { createPublicClient, http } from 'viem';\nimport { Address } from '../../types';\nimport {  BALANCER_QUERIES, CHAINS } from '../../utils/constants';\nimport {  balancerQueriesAbi } from '../../abi';\nimport { ExitPoolRequest } from '../removeLiquidity/types';\n\nexport async function doRemoveLiquidityQuery(\n    rpcUrl: string,\n    chainId: number,\n    args: readonly [Address, Address, Address, ExitPoolRequest],\n): Promise<{\n    bptIn: bigint;\n    amountsOut: readonly bigint[];\n}> {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const {\n        result: [bptIn, amountsOut],\n    } = await client.simulateContract({\n        address: BALANCER_QUERIES[chainId],\n        abi: balancerQueriesAbi,\n        functionName: 'queryExit',\n        args,\n    });\n\n    return {\n        bptIn,\n        amountsOut,\n    };\n}\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '../../../token';\nimport { TokenAmount } from '../../../tokenAmount';\nimport {\n    BALANCER_VAULT,\n    MAX_UINT256,\n    ZERO_ADDRESS,\n} from '../../../../utils/constants';\nimport { vaultAbi } from '../../../../abi';\nimport { parseRemoveLiquidityArgs } from '../../../utils/parseRemoveLiquidityArgs';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityComposableStableCall,\n    RemoveLiquidityBuildOutput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityQueryOutput,\n} from '../../types';\nimport { RemoveLiquidityAmounts, PoolState } from '../../../types';\nimport { doRemoveLiquidityQuery } from '../../../utils/doRemoveLiquidityQuery';\nimport { ComposableStableEncoder } from '../../../encoders/composableStable';\nimport { getAmounts, getSortedTokens } from '../../../utils';\n\nexport class RemoveLiquidityComposableStable implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const bptIndex = poolState.tokens.findIndex(\n            (t) => t.address === poolState.address,\n        );\n        const amounts = this.getAmountsQuery(sortedTokens, input, bptIndex);\n        const amountsWithoutBpt = {\n            ...amounts,\n            minAmountsOut: [\n                ...amounts.minAmountsOut.slice(0, bptIndex),\n                ...amounts.minAmountsOut.slice(bptIndex + 1),\n            ],\n        };\n        const userData = ComposableStableEncoder.encodeRemoveLiquidityUserData(\n            input.kind,\n            amountsWithoutBpt,\n        );\n\n        // tokensOut will have zero address if removing liquidity to native asset\n        const { args, tokensOut } = parseRemoveLiquidityArgs({\n            chainId: input.chainId,\n            toNativeAsset: !!input.toNativeAsset,\n            poolId: poolState.id,\n            sortedTokens,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n        });\n        const queryOutput = await doRemoveLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(bpt, queryOutput.bptIn);\n\n        const amountsOut = queryOutput.amountsOut.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensOut[i], a),\n        );\n\n        return {\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: amounts.tokenOutIndex,\n            toInternalBalance: !!input.toInternalBalance,\n            bptIndex,\n            balancerVersion: poolState.balancerVersion,\n        };\n    }\n\n    private getAmountsQuery(\n        tokens: Token[],\n        input: RemoveLiquidityInput,\n        bptIndex: number,\n    ): RemoveLiquidityAmounts {\n        switch (input.kind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return {\n                    minAmountsOut: getAmounts(tokens, input.amountsOut),\n                    tokenOutIndex: undefined,\n                    maxBptAmountIn: MAX_UINT256,\n                };\n            case RemoveLiquidityKind.SingleToken:\n                return {\n                    minAmountsOut: Array(tokens.length).fill(0n),\n                    tokenOutIndex: tokens\n                        .filter((_, index) => index !== bptIndex)\n                        .findIndex((t) => t.isSameAddress(input.tokenOut)),\n                    maxBptAmountIn: input.bptIn.rawAmount,\n                };\n            case RemoveLiquidityKind.Proportional:\n                return {\n                    minAmountsOut: Array(tokens.length).fill(0n),\n                    tokenOutIndex: undefined,\n                    maxBptAmountIn: input.bptIn.rawAmount,\n                };\n        }\n    }\n\n    public buildCall(\n        input: RemoveLiquidityComposableStableCall,\n    ): RemoveLiquidityBuildOutput {\n        const amounts = this.getAmountsCall(input);\n        const amountsWithoutBpt = {\n            ...amounts,\n            minAmountsOut: [\n                ...amounts.minAmountsOut.slice(0, input.bptIndex),\n                ...amounts.minAmountsOut.slice(input.bptIndex + 1),\n            ],\n        };\n        const userData = ComposableStableEncoder.encodeRemoveLiquidityUserData(\n            input.removeLiquidityKind,\n            amountsWithoutBpt,\n        );\n\n        const { args } = parseRemoveLiquidityArgs({\n            poolId: input.poolId,\n            sortedTokens: input.amountsOut.map((a) => a.token),\n            sender: input.sender,\n            recipient: input.recipient,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n        });\n        const call = encodeFunctionData({\n            abi: vaultAbi,\n            functionName: 'exitPool',\n            args,\n        });\n\n        return {\n            call,\n            to: BALANCER_VAULT,\n            value: 0n,\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    private getAmountsCall(\n        input: RemoveLiquidityComposableStableCall,\n    ): RemoveLiquidityAmounts {\n        switch (input.removeLiquidityKind) {\n            case RemoveLiquidityKind.Unbalanced:\n                return {\n                    minAmountsOut: input.amountsOut.map((a) => a.amount),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.slippage.applyTo(input.bptIn.amount),\n                };\n            case RemoveLiquidityKind.SingleToken:\n                if (input.tokenOutIndex === undefined) {\n                    throw new Error(\n                        'tokenOutIndex must be defined for RemoveLiquiditySingleToken',\n                    );\n                }\n                return {\n                    minAmountsOut: input.amountsOut.map((a) =>\n                        input.slippage.removeFrom(a.amount),\n                    ),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.bptIn.amount,\n                };\n            case RemoveLiquidityKind.Proportional:\n                return {\n                    minAmountsOut: input.amountsOut.map((a) =>\n                        input.slippage.removeFrom(a.amount),\n                    ),\n                    tokenOutIndex: input.tokenOutIndex,\n                    maxBptAmountIn: input.bptIn.amount,\n                };\n            default:\n                throw Error('Unsupported Remove Liquidity Kind');\n        }\n    }\n}\n","import {\n    PoolState,\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildOutput,\n    RemoveLiquidityCall,\n    RemoveLiquidityConfig,\n    RemoveLiquidityInput,\n    RemoveLiquidityQueryOutput,\n} from '@/entities';\nimport { RemoveLiquidityWeighted } from './weighted/removeLiquidityWeighted';\nimport { RemoveLiquidityComposableStable } from './composableStable/removeLiquidityComposableStable';\nimport { PoolType } from '@/types';\n\nexport class RemoveLiquidityV2 implements RemoveLiquidityBase {\n    private readonly removeLiquidityTypes: Record<string, RemoveLiquidityBase> =\n        {};\n\n    constructor(config?: RemoveLiquidityConfig) {\n        const { customRemoveLiquidityTypes } = config || {};\n        this.removeLiquidityTypes = {\n            //GYRO2, GYRO3, GYROE only support Remove Liquidity Proportional(1 - EXACT_BPT_IN_FOR_TOKENS_OUT)\n            [PoolType.Gyro2]: new RemoveLiquidityWeighted(),\n            [PoolType.Gyro3]: new RemoveLiquidityWeighted(),\n            [PoolType.GyroE]: new RemoveLiquidityWeighted(),\n            [PoolType.Weighted]: new RemoveLiquidityWeighted(),\n            [PoolType.ComposableStable]: new RemoveLiquidityComposableStable(),\n            // custom remove liquidity types take precedence over base types\n            ...customRemoveLiquidityTypes,\n        };\n    }\n\n    public getRemoveLiquidity(poolType: string): RemoveLiquidityBase {\n        if (!this.removeLiquidityTypes[poolType]) {\n            throw new Error('Unsupported pool type');\n        }\n\n        return this.removeLiquidityTypes[poolType];\n    }\n\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        return this.getRemoveLiquidity(poolState.type).query(input, poolState);\n    }\n\n    public buildCall(input: RemoveLiquidityCall): RemoveLiquidityBuildOutput {\n        return this.getRemoveLiquidity(input.poolType).buildCall(input);\n    }\n}\n","import {\n    PoolState,\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildOutput,\n    RemoveLiquidityCall,\n    RemoveLiquidityInput,\n    RemoveLiquidityQueryOutput,\n} from '@/entities';\n\nexport class RemoveLiquidityV3 implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        console.log(input, poolState);\n        throw new Error('Method not implemented.');\n    }\n\n    public buildCall(input: RemoveLiquidityCall): RemoveLiquidityBuildOutput {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildOutput,\n    RemoveLiquidityCall,\n    RemoveLiquidityConfig,\n    RemoveLiquidityInput,\n    RemoveLiquidityQueryOutput,\n} from './types';\nimport { PoolState } from '../types';\nimport { InputValidator } from '../inputValidator/inputValidator';\nimport { RemoveLiquidityV2 } from './removeLiquidityV2';\nimport { RemoveLiquidityV3 } from './removeLiquidityV3';\n\nexport class RemoveLiquidity implements RemoveLiquidityBase {\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    constructor(public config?: RemoveLiquidityConfig) {}\n\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        this.inputValidator.validateRemoveLiquidity(input, poolState);\n        switch (poolState.balancerVersion) {\n            case 2: {\n                const removeLiquidity = new RemoveLiquidityV2(this.config);\n                return removeLiquidity.query(input, poolState);\n            }\n            case 3: {\n                const removeLiquidity = new RemoveLiquidityV3();\n                return removeLiquidity.query(input, poolState);\n            }\n        }\n    }\n\n    public buildCall(input: RemoveLiquidityCall): RemoveLiquidityBuildOutput {\n        switch (input.balancerVersion) {\n            case 2: {\n                const removeLiquidity = new RemoveLiquidityV2(this.config);\n                return removeLiquidity.buildCall(input);\n            }\n            case 3: {\n                const removeLiquidity = new RemoveLiquidityV3();\n                return removeLiquidity.buildCall(input);\n            }\n        }\n    }\n}\n","import { createPublicClient, getContract, http } from 'viem';\nimport { BALANCER_QUERIES, ChainId, DEFAULT_FUND_MANAGMENT } from '../../utils';\nimport { SingleSwap } from '../../types';\nimport { balancerQueriesAbi } from '../../abi';\n\nexport type SingleSwapInput = SingleSwap & {\n    rpcUrl: string;\n    chainId: ChainId;\n};\n\nexport const doSingleSwapQuery = async ({\n    rpcUrl,\n    chainId,\n    ...swap\n}: SingleSwapInput): Promise<bigint> => {\n    const publicClient = createPublicClient({\n        transport: http(rpcUrl),\n    });\n\n    const queriesContract = getContract({\n        address: BALANCER_QUERIES[chainId],\n        abi: balancerQueriesAbi,\n        publicClient,\n    });\n\n    const { result } = await queriesContract.simulate.querySwap([\n        swap,\n        DEFAULT_FUND_MANAGMENT,\n    ]);\n\n    return result;\n};\n","import { PathWithAmount } from './path';\nimport { TokenAmount } from './tokenAmount';\nimport { SingleSwap, SwapKind, BatchSwapStep } from '../types';\nimport {\n    abs,\n    BALANCER_QUERIES,\n    DEFAULT_USERDATA,\n    DEFAULT_FUND_MANAGMENT,\n    ZERO_ADDRESS,\n    NATIVE_ADDRESS,\n    MathSol,\n} from '../utils';\nimport {\n    Address,\n    createPublicClient,\n    encodeFunctionData,\n    getContract,\n    http,\n} from 'viem';\nimport { balancerQueriesAbi } from '../abi';\nimport { PriceImpactAmount } from './priceImpactAmount';\n// import { cloneDeep } from 'lodash';\n\nconst cloneDeep = (foo)=> foo\n\n// A Swap can be a single or multiple paths\nexport class Swap {\n    public constructor({\n        paths,\n        swapKind,\n    }: { paths: PathWithAmount[]; swapKind: SwapKind }) {\n        if (paths.length === 0)\n            throw new Error('Invalid swap: must contain at least 1 path.');\n\n        // paths with immutable pool balances\n        this.pathsImmutable = cloneDeep(paths);\n\n        // Recalculate paths while mutating pool balances\n        this.paths = paths.map(\n            (path) =>\n                new PathWithAmount(\n                    path.tokens,\n                    path.pools,\n                    path.swapAmount,\n                    true,\n                ),\n        );\n        this.chainId = paths[0].tokens[0].chainId;\n        this.swapKind = swapKind;\n        this.isBatchSwap = paths.length > 1 || paths[0].pools.length > 1;\n        this.assets = [\n            ...new Set(paths.flatMap((p) => p.tokens).map((t) => t.address)),\n        ];\n        const swaps = this.getSwaps(this.paths);\n\n        this.assets = this.assets.map((a) => {\n            return this.convertNativeAddressToZero(a);\n        });\n\n        this.swaps = swaps;\n    }\n\n    public readonly chainId: number;\n    public readonly isBatchSwap: boolean;\n    public readonly paths: PathWithAmount[];\n    public readonly pathsImmutable: PathWithAmount[];\n    public readonly assets: Address[];\n    public readonly swapKind: SwapKind;\n    public swaps: BatchSwapStep[] | SingleSwap;\n\n    public get quote(): TokenAmount {\n        return this.swapKind === SwapKind.GivenIn\n            ? this.outputAmount\n            : this.inputAmount;\n    }\n\n    public get inputAmount(): TokenAmount {\n        return this.getInputAmount(this.paths);\n    }\n\n    public get outputAmount(): TokenAmount {\n        return this.getOutputAmount(this.paths);\n    }\n\n    // rpcUrl is optional, but recommended to prevent rate limiting\n    public async query(rpcUrl?: string, block?: bigint): Promise<TokenAmount> {\n        const publicClient = createPublicClient({\n            transport: http(rpcUrl),\n        });\n\n        const queriesContract = getContract({\n            address: BALANCER_QUERIES[this.chainId],\n            abi: balancerQueriesAbi,\n            publicClient,\n        });\n\n        let amount: TokenAmount;\n        if (this.isBatchSwap) {\n            const { result } = await queriesContract.simulate.queryBatchSwap(\n                [\n                    this.swapKind,\n                    this.swaps as BatchSwapStep[],\n                    this.assets,\n                    DEFAULT_FUND_MANAGMENT,\n                ],\n                {\n                    blockNumber: block,\n                },\n            );\n\n            amount =\n                this.swapKind === SwapKind.GivenIn\n                    ? TokenAmount.fromRawAmount(\n                          this.outputAmount.token,\n                          abs(\n                              result[\n                                  this.assets.indexOf(\n                                      this.convertNativeAddressToZero(\n                                          this.outputAmount.token.address,\n                                      ),\n                                  )\n                              ],\n                          ),\n                      )\n                    : TokenAmount.fromRawAmount(\n                          this.inputAmount.token,\n                          abs(\n                              result[\n                                  this.assets.indexOf(\n                                      this.convertNativeAddressToZero(\n                                          this.inputAmount.token.address,\n                                      ),\n                                  )\n                              ],\n                          ),\n                      );\n        } else {\n            const { result } = await queriesContract.simulate.querySwap(\n                [this.swaps as SingleSwap, DEFAULT_FUND_MANAGMENT],\n                { blockNumber: block },\n            );\n\n            amount =\n                this.swapKind === SwapKind.GivenIn\n                    ? TokenAmount.fromRawAmount(this.outputAmount.token, result)\n                    : TokenAmount.fromRawAmount(this.inputAmount.token, result);\n        }\n\n        return amount;\n    }\n\n    private convertNativeAddressToZero(address: Address): Address {\n        return address === NATIVE_ADDRESS ? ZERO_ADDRESS : address;\n    }\n\n    public queryCallData(): string {\n        let callData: string;\n        if (this.isBatchSwap) {\n            callData = encodeFunctionData({\n                abi: balancerQueriesAbi,\n                functionName: 'queryBatchSwap',\n                args: [\n                    this.swapKind,\n                    this.swaps as BatchSwapStep[],\n                    this.assets,\n                    DEFAULT_FUND_MANAGMENT,\n                ],\n            });\n        } else {\n            callData = encodeFunctionData({\n                abi: balancerQueriesAbi,\n                functionName: 'querySwap',\n                args: [this.swaps as SingleSwap, DEFAULT_FUND_MANAGMENT],\n            });\n        }\n        return callData;\n    }\n\n    public get priceImpact(): PriceImpactAmount {\n        const paths = this.pathsImmutable;\n\n        const pathsReverse = paths.map(\n            (path) =>\n                new PathWithAmount(\n                    [...path.tokens].reverse(),\n                    [...path.pools].reverse(),\n                    this.swapKind === SwapKind.GivenIn\n                        ? path.outputAmount\n                        : path.inputAmount,\n                ),\n        );\n\n        const amountInitial =\n            this.swapKind === SwapKind.GivenIn\n                ? this.getInputAmount(paths).amount\n                : this.getOutputAmount(paths).amount;\n\n        const amountFinal =\n            this.swapKind === SwapKind.GivenIn\n                ? this.getOutputAmount(pathsReverse).amount\n                : this.getInputAmount(pathsReverse).amount;\n\n        const priceImpact = MathSol.divDownFixed(\n            abs(amountInitial - amountFinal),\n            amountInitial * 2n,\n        );\n        return PriceImpactAmount.fromRawAmount(priceImpact);\n    }\n\n    // public get executionPrice(): Price {}\n\n    // helper methods\n\n    private getSwaps(paths: PathWithAmount[]) {\n        let swaps: BatchSwapStep[] | SingleSwap;\n        if (this.isBatchSwap) {\n            swaps = [] as BatchSwapStep[];\n            if (this.swapKind === SwapKind.GivenIn) {\n                paths.map((p) => {\n                    p.pools.map((pool, i) => {\n                        (swaps as BatchSwapStep[]).push({\n                            poolId: pool.id,\n                            assetInIndex: BigInt(\n                                this.assets.indexOf(p.tokens[i].address),\n                            ),\n                            assetOutIndex: BigInt(\n                                this.assets.indexOf(p.tokens[i + 1].address),\n                            ),\n                            amount: i === 0 ? p.inputAmount.amount : 0n,\n                            userData: DEFAULT_USERDATA,\n                        });\n                    });\n                });\n            } else {\n                paths.map((p) => {\n                    // Vault expects given out swaps to be in reverse order\n                    const reversedPools = [...p.pools].reverse();\n                    const reversedTokens = [...p.tokens].reverse();\n                    reversedPools.map((pool, i) => {\n                        (swaps as BatchSwapStep[]).push({\n                            poolId: pool.id,\n                            assetInIndex: BigInt(\n                                this.assets.indexOf(\n                                    reversedTokens[i + 1].address,\n                                ),\n                            ),\n                            assetOutIndex: BigInt(\n                                this.assets.indexOf(reversedTokens[i].address),\n                            ),\n                            amount: i === 0 ? p.outputAmount.amount : 0n,\n                            userData: DEFAULT_USERDATA,\n                        });\n                    });\n                });\n            }\n        } else {\n            const path = this.paths[0];\n            const pool = path.pools[0];\n            const assetIn = this.convertNativeAddressToZero(\n                path.tokens[0].address,\n            );\n            const assetOut = this.convertNativeAddressToZero(\n                path.tokens[1].address,\n            );\n            swaps = {\n                poolId: pool.id,\n                kind: this.swapKind,\n                assetIn,\n                assetOut,\n                amount: path.swapAmount.amount,\n                userData: DEFAULT_USERDATA,\n            } as SingleSwap;\n        }\n        return swaps;\n    }\n\n    private getInputAmount(paths: PathWithAmount[]): TokenAmount {\n        if (\n            !paths.every((p) =>\n                p.inputAmount.token.isEqual(paths[0].inputAmount.token),\n            )\n        ) {\n            throw new Error(\n                'Input amount can only be calculated if all paths have the same input token',\n            );\n        }\n        const amounts = paths.map((path) => path.inputAmount);\n        return amounts.reduce((a, b) => a.add(b));\n    }\n\n    private getOutputAmount(paths: PathWithAmount[]): TokenAmount {\n        if (\n            !paths.every((p) =>\n                p.outputAmount.token.isEqual(paths[0].outputAmount.token),\n            )\n        ) {\n            throw new Error(\n                'Output amount can only be calculated if all paths have the same output token',\n            );\n        }\n        const amounts = paths.map((path) => path.outputAmount);\n        return amounts.reduce((a, b) => a.add(b));\n    }\n}\n","import { formatEther, parseEther } from 'viem';\nimport { BigintIsh } from './tokenAmount';\nimport { MathSol, WAD } from '../utils';\n\nexport class Slippage {\n    public amount: bigint;\n    public decimal: number;\n    public percentage: number;\n    public bps: number;\n\n    public static fromRawAmount(rawAmount: BigintIsh) {\n        return new Slippage(rawAmount);\n    }\n\n    public static fromDecimal(decimalAmount: `${number}`) {\n        const rawAmount = parseEther(decimalAmount);\n        return Slippage.fromRawAmount(rawAmount);\n    }\n\n    public static fromPercentage(percentageAmount: `${number}`) {\n        const decimalAmount = Number(percentageAmount) / 100;\n        return Slippage.fromDecimal(`${decimalAmount}`);\n    }\n\n    public static fromBasisPoints(bpsAmount: `${number}`) {\n        const decimalAmount = Number(bpsAmount) / 10000;\n        return Slippage.fromDecimal(`${decimalAmount}`);\n    }\n\n    protected constructor(amount: BigintIsh) {\n        this.amount = BigInt(amount);\n        this.decimal = parseFloat(formatEther(this.amount));\n        this.percentage = this.decimal * 100;\n        this.bps = this.decimal * 10000;\n    }\n\n    public applyTo(amount: bigint): bigint {\n        return MathSol.mulDownFixed(amount, this.amount + WAD);\n    }\n\n    public removeFrom(amount: bigint): bigint {\n        return MathSol.divDownFixed(amount, this.amount + WAD);\n    }\n}\n","import pino from 'pino';\n\nconst LOG_LEVEL = process.env.LOG_LEVEL || 'info';\n\nexport const logger = pino({\n    formatters: {\n        level(level) {\n            return { level };\n        },\n    },\n    base: undefined,\n    level: LOG_LEVEL,\n});\n","import { BasePool, Path, Token, TokenAmount } from '../entities';\nimport { PathGraphEdgeData, PathGraphTraversalConfig } from './pathGraphTypes';\nimport { PoolType, SwapKind } from '../types';\n\nconst DEFAULT_MAX_PATHS_PER_TOKEN_PAIR = 2;\n\nexport class PathGraph {\n    private nodes: Map<string, { isPhantomBpt: boolean }>;\n    private edges: Map<string, Map<string, PathGraphEdgeData[]>>;\n    private poolAddressMap: Map<string, BasePool>;\n    private maxPathsPerTokenPair = DEFAULT_MAX_PATHS_PER_TOKEN_PAIR;\n\n    constructor() {\n        this.nodes = new Map();\n        this.edges = new Map();\n        this.poolAddressMap = new Map();\n    }\n\n    // We build a directed graph for all pools.\n    // Nodes are tokens and edges are triads: [pool.id, tokenIn, tokenOut].\n    // The current criterion for including a pool path into this graph is the following:\n    // (a) We include every path that includes a phantom BPT.\n    // (b) For any token pair x -> y, we include only the most liquid ${maxPathsPerTokenPair}\n    // pool pairs (default 2).\n    public buildGraph({\n        pools,\n        maxPathsPerTokenPair = DEFAULT_MAX_PATHS_PER_TOKEN_PAIR,\n    }: {\n        pools: BasePool[];\n        maxPathsPerTokenPair?: number;\n    }) {\n        this.poolAddressMap = new Map();\n        this.nodes = new Map();\n        this.edges = new Map();\n        this.maxPathsPerTokenPair = maxPathsPerTokenPair;\n\n        this.buildPoolAddressMap(pools);\n\n        this.addAllTokensAsGraphNodes(pools);\n\n        this.addTokenPairsAsGraphEdges({ pools, maxPathsPerTokenPair });\n    }\n\n    // Since the path combinations here can get quite large, we use configurable parameters\n    // to enforce upper limits across several dimensions, defined in the pathConfig.\n    // (a) maxDepth - the max depth of the traversal (length of token path), defaults to 7.\n    // (b) maxNonBoostedPathDepth - the max depth for any path that does not contain a phantom bpt.\n    // (c) maxNonBoostedHopTokensInBoostedPath - The max number of non boosted hop tokens\n    // allowed in a boosted path.\n    // (d) approxPathsToReturn - search for up to this many paths. Since all paths for a single traversal\n    // are added, its possible that the amount returned is larger than this number.\n    // (e) poolIdsToInclude - Only include paths with these poolIds (optional)\n\n    // Additionally, we impose the following requirements for a path to be considered valid\n    // (a) It does not visit the same token twice\n    // (b) It does not use the same pool twice\n    public getCandidatePaths({\n        tokenIn,\n        tokenOut,\n        graphTraversalConfig,\n    }: {\n        tokenIn: Token;\n        tokenOut: Token;\n        graphTraversalConfig?: Partial<PathGraphTraversalConfig>;\n    }): Path[] {\n        // apply defaults, allowing caller override whatever they'd like\n        const config: PathGraphTraversalConfig = {\n            maxDepth: 6,\n            maxNonBoostedPathDepth: 3,\n            maxNonBoostedHopTokensInBoostedPath: 2,\n            approxPathsToReturn: 5,\n            ...graphTraversalConfig,\n        };\n\n        const tokenPaths = this.findAllValidTokenPaths({\n            token: tokenIn.wrapped,\n            tokenIn: tokenIn.wrapped,\n            tokenOut: tokenOut.wrapped,\n            config,\n            tokenPath: [tokenIn.wrapped],\n        }).sort((a, b) => (a.length < b.length ? -1 : 1));\n\n        const paths: PathGraphEdgeData[][] = [];\n        const selectedPathIds: string[] = [];\n\n        // the tokenPairIndex refers to the nth most liquid path for a token\n        // pair x -> y. maxPathsPerTokenPair is provided as a config on graph init\n        for (let idx = 0; idx < this.maxPathsPerTokenPair; idx++) {\n            for (let i = 0; i < tokenPaths.length; i++) {\n                const path = this.expandTokenPath({\n                    tokenPath: tokenPaths[i],\n                    tokenPairIndex: idx,\n                });\n\n                if (\n                    this.isValidPath({\n                        path,\n                        seenPoolAddresses: [],\n                        selectedPathIds,\n                        config,\n                    })\n                ) {\n                    selectedPathIds.push(this.getIdForPath(path));\n                    paths.push(path);\n                }\n            }\n\n            // we've found enough paths, there's no need to go deeper into the token pair options.\n            if (paths.length >= config.approxPathsToReturn) {\n                break;\n            }\n        }\n\n        return this.sortAndFilterPaths(paths).map((path) => {\n            const pathTokens: Token[] = [\n                ...path.map((segment) => segment.tokenOut),\n            ];\n            pathTokens.unshift(tokenIn);\n            pathTokens[pathTokens.length - 1] = tokenOut;\n\n            return {\n                tokens: pathTokens,\n                pools: path.map((segment) => segment.pool),\n            };\n        });\n    }\n\n    private sortAndFilterPaths(\n        paths: PathGraphEdgeData[][],\n    ): PathGraphEdgeData[][] {\n        const pathsWithLimits = paths\n            .map((path) => {\n                try {\n                    const limit = this.getLimitAmountSwapForPath(\n                        path,\n                        SwapKind.GivenIn,\n                    );\n                    return { path, limit };\n                } catch (_e) {\n                    console.error(\n                        'Error getting limit for path',\n                        path.map((p) => p.pool.id).join(' -> '),\n                    );\n                    return undefined;\n                }\n            })\n            .filter(\n                (path): path is { path: PathGraphEdgeData[]; limit: bigint } =>\n                    !!path,\n            )\n            .sort((a, b) => (a.limit < b.limit ? 1 : -1));\n\n        const filtered: PathGraphEdgeData[][] = [];\n\n        // Remove any paths with duplicate pools. since the paths are now sorted by limit,\n        // selecting the first path will always be the optimal.\n        for (const { path } of pathsWithLimits) {\n            let seenPools: string[] = [];\n            let isValid = true;\n\n            for (const segment of path) {\n                if (seenPools.includes(segment.pool.id)) {\n                    isValid = false;\n                    break;\n                }\n            }\n\n            if (isValid) {\n                filtered.push(path);\n                seenPools = [\n                    ...seenPools,\n                    ...path.map((segment) => segment.pool.id),\n                ];\n            }\n        }\n\n        return filtered;\n    }\n\n    private buildPoolAddressMap(pools: BasePool[]) {\n        for (const pool of pools) {\n            this.poolAddressMap.set(pool.address, pool);\n        }\n    }\n\n    private addAllTokensAsGraphNodes(pools: BasePool[]) {\n        for (const pool of pools) {\n            for (const tokenAmount of pool.tokens) {\n                const token = tokenAmount.token;\n\n                if (!this.nodes.has(token.wrapped)) {\n                    this.addNode(token);\n                }\n            }\n        }\n    }\n\n    private addTokenPairsAsGraphEdges({\n        pools,\n        maxPathsPerTokenPair,\n    }: {\n        pools: BasePool[];\n        maxPathsPerTokenPair: number;\n    }) {\n        for (const pool of pools) {\n            for (let i = 0; i < pool.tokens.length - 1; i++) {\n                for (let j = i + 1; j < pool.tokens.length; j++) {\n                    const tokenI = pool.tokens[i].token;\n                    const tokenJ = pool.tokens[j].token;\n\n                    this.addEdge({\n                        edgeProps: {\n                            pool,\n                            tokenIn: tokenI,\n                            tokenOut: tokenJ,\n                            normalizedLiquidity: pool.getNormalizedLiquidity(\n                                tokenI,\n                                tokenJ,\n                            ),\n                        },\n                        maxPathsPerTokenPair,\n                    });\n\n                    this.addEdge({\n                        edgeProps: {\n                            pool,\n                            tokenIn: tokenJ,\n                            tokenOut: tokenI,\n                            normalizedLiquidity: pool.getNormalizedLiquidity(\n                                tokenJ,\n                                tokenI,\n                            ),\n                        },\n                        maxPathsPerTokenPair,\n                    });\n                }\n            }\n        }\n    }\n\n    private addNode(token: Token): void {\n        this.nodes.set(token.wrapped, {\n            isPhantomBpt: !!this.poolAddressMap[token.wrapped],\n        });\n\n        if (!this.edges.has(token.wrapped)) {\n            this.edges.set(token.wrapped, new Map());\n        }\n    }\n\n    /**\n     * Returns the vertices connected to a given vertex\n     */\n    public getConnectedVertices(tokenAddress: string): string[] {\n        const result: string[] = [];\n        const edges = this.edges.get(tokenAddress) || [];\n\n        for (const [otherToken] of edges) {\n            result.push(otherToken);\n        }\n\n        return result;\n    }\n\n    /**\n     * Adds a directed edge from a source vertex to a destination\n     */\n    private addEdge({\n        edgeProps,\n        maxPathsPerTokenPair,\n    }: {\n        edgeProps: PathGraphEdgeData;\n        maxPathsPerTokenPair: number;\n    }): void {\n        const tokenInVertex = this.nodes.get(edgeProps.tokenIn.wrapped);\n        const tokenOutVertex = this.nodes.get(edgeProps.tokenOut.wrapped);\n        const tokenInNode = this.edges.get(edgeProps.tokenIn.wrapped);\n\n        if (!tokenInVertex || !tokenOutVertex || !tokenInNode) {\n            throw new Error('Attempting to add invalid edge');\n        }\n\n        const hasPhantomBpt =\n            tokenInVertex.isPhantomBpt || tokenOutVertex.isPhantomBpt;\n        const existingEdges = tokenInNode.get(edgeProps.tokenOut.wrapped) || [];\n\n        //TODO: ideally we don't call sort every time, this isn't performant\n        const sorted = [...existingEdges, edgeProps].sort((a, b) =>\n            a.normalizedLiquidity > b.normalizedLiquidity ? -1 : 1,\n        );\n\n        tokenInNode.set(\n            edgeProps.tokenOut.wrapped,\n            sorted.length > maxPathsPerTokenPair && !hasPhantomBpt\n                ? sorted.slice(0, 2)\n                : sorted,\n        );\n    }\n\n    public findAllValidTokenPaths(args: {\n        token: string;\n        tokenIn: string;\n        tokenOut: string;\n        tokenPath: string[];\n        config: PathGraphTraversalConfig;\n    }): string[][] {\n        const tokenPaths: string[][] = [];\n\n        this.traverseBfs({\n            ...args,\n            callback: (tokenPath) => {\n                tokenPaths.push(tokenPath);\n            },\n        });\n\n        return tokenPaths;\n    }\n\n    public expandTokenPath({\n        tokenPath,\n        tokenPairIndex,\n    }: {\n        tokenPath: string[];\n        tokenPairIndex: number;\n    }) {\n        const segments: PathGraphEdgeData[] = [];\n\n        for (let i = 0; i < tokenPath.length - 1; i++) {\n            const edge = this.edges.get(tokenPath[i])?.get(tokenPath[i + 1]);\n\n            if (!edge || edge.length === 0) {\n                throw new Error(\n                    `Missing edge for pair ${tokenPath[i]} -> ${\n                        tokenPath[i + 1]\n                    }`,\n                );\n            }\n\n            segments.push(edge[tokenPairIndex] || edge[0]);\n        }\n\n        return segments;\n    }\n\n    private traverseBfs({\n        token,\n        tokenIn,\n        tokenOut,\n        tokenPath,\n        callback,\n        config,\n    }: {\n        token: string;\n        tokenIn: string;\n        tokenOut: string;\n        tokenPath: string[];\n        callback: (tokenPath: string[]) => void;\n        config: PathGraphTraversalConfig;\n    }): void {\n        const neighbors = this.getConnectedVertices(token);\n\n        for (const neighbor of neighbors) {\n            const validTokenPath = this.isValidTokenPath({\n                tokenPath: [...tokenPath, neighbor],\n                tokenIn,\n                tokenOut,\n                config,\n            });\n\n            if (validTokenPath && neighbor === tokenOut) {\n                callback([...tokenPath, neighbor]);\n            } else if (validTokenPath && !tokenPath.includes(neighbor)) {\n                this.traverseBfs({\n                    tokenPath: [...tokenPath, neighbor],\n                    token: neighbor,\n                    tokenIn,\n                    tokenOut,\n                    callback,\n                    config,\n                });\n            }\n        }\n    }\n\n    private isValidTokenPath({\n        tokenPath,\n        config,\n        tokenIn,\n        tokenOut,\n    }: {\n        tokenPath: string[];\n        config: PathGraphTraversalConfig;\n        tokenIn: string;\n        tokenOut: string;\n    }) {\n        const isCompletePath = tokenPath[tokenPath.length - 1] === tokenOut;\n        const hopTokens = tokenPath.filter(\n            (token) => token !== tokenIn && token !== tokenOut,\n        );\n        const numStandardHopTokens = hopTokens.filter(\n            (token) => !this.poolAddressMap.has(token),\n        ).length;\n        const isBoostedPath =\n            tokenPath.filter((token) => this.poolAddressMap.has(token)).length >\n            0;\n\n        if (tokenPath.length > config.maxDepth) {\n            return false;\n        }\n\n        if (\n            isBoostedPath &&\n            numStandardHopTokens > config.maxNonBoostedHopTokensInBoostedPath\n        ) {\n            return false;\n        }\n\n        // if the path length is greater than maxNonBoostedPathDepth, then this path\n        // will only be valid if its a boosted path, so it must honor maxNonBoostedHopTokensInBoostedPath\n        if (\n            tokenPath.length > config.maxNonBoostedPathDepth &&\n            numStandardHopTokens > config.maxNonBoostedHopTokensInBoostedPath\n        ) {\n            return false;\n        }\n\n        if (\n            isCompletePath &&\n            !isBoostedPath &&\n            tokenPath.length > config.maxNonBoostedPathDepth\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private isValidPath({\n        path,\n        seenPoolAddresses,\n        selectedPathIds,\n        config,\n    }: {\n        path: PathGraphEdgeData[];\n        seenPoolAddresses: string[];\n        selectedPathIds: string[];\n        config: PathGraphTraversalConfig;\n    }) {\n        const poolIdsInPath = path.map((segment) => segment.pool.id);\n        const uniquePools = [...new Set(poolIdsInPath)];\n\n        if (config.poolIdsToInclude) {\n            for (const poolId of poolIdsInPath) {\n                if (!config.poolIdsToInclude.includes(poolId)) {\n                    //path includes a pool that is not allowed for this traversal\n                    return false;\n                }\n            }\n        }\n\n        //dont include any path that hops through the same pool twice\n        if (uniquePools.length !== poolIdsInPath.length) {\n            return false;\n        }\n\n        for (const segment of path) {\n            if (seenPoolAddresses.includes(segment.pool.address)) {\n                //this path contains a pool that has already been used\n                return false;\n            }\n        }\n\n        //this is a duplicate path\n        if (selectedPathIds.includes(this.getIdForPath(path))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private getIdForPath(path: PathGraphEdgeData[]): string {\n        let id = '';\n\n        for (const segment of path) {\n            if (id.length > 0) {\n                id += '_';\n            }\n\n            id += `${segment.pool.id}-${segment.tokenIn}-${segment.tokenOut}`;\n        }\n\n        return id;\n    }\n\n    private filterVolatilePools(poolAddresses: string[]): string[] {\n        const filtered: string[] = [];\n\n        for (const poolAddress of poolAddresses) {\n            if (\n                this.poolAddressMap.get(poolAddress)?.poolType ===\n                PoolType.Weighted\n            ) {\n                filtered.push(poolAddress);\n            }\n        }\n\n        return filtered;\n    }\n\n    private getLimitAmountSwapForPath(\n        path: PathGraphEdgeData[],\n        swapKind: SwapKind,\n    ): bigint {\n        let limit = path[path.length - 1].pool.getLimitAmountSwap(\n            path[path.length - 1].tokenIn,\n            path[path.length - 1].tokenOut,\n            swapKind,\n        );\n\n        for (let i = path.length - 2; i >= 0; i--) {\n            const poolLimitExactIn = path[i].pool.getLimitAmountSwap(\n                path[i].tokenIn,\n                path[i].tokenOut,\n                SwapKind.GivenIn,\n            );\n            const poolLimitExactOut = path[i].pool.getLimitAmountSwap(\n                path[i].tokenIn,\n                path[i].tokenOut,\n                SwapKind.GivenOut,\n            );\n\n            if (poolLimitExactOut <= limit) {\n                limit = poolLimitExactIn;\n            } else {\n                const pulledLimit = path[i].pool.swapGivenOut(\n                    path[i].tokenIn,\n                    path[i].tokenOut,\n                    TokenAmount.fromRawAmount(path[i].tokenOut, limit),\n                ).amount;\n\n                limit =\n                    pulledLimit > poolLimitExactIn\n                        ? poolLimitExactIn\n                        : pulledLimit;\n            }\n        }\n\n        return limit;\n    }\n}\n","import { SwapKind } from './types';\nimport { logger } from './utils/logger';\nimport { WAD } from './utils/math';\nimport { BasePool, Path, PathWithAmount, Token, TokenAmount } from './entities';\nimport { PathGraph } from './pathGraph/pathGraph';\nimport { PathGraphTraversalConfig } from './pathGraph/pathGraphTypes';\n\nexport class Router {\n    private readonly pathGraph: PathGraph;\n\n    constructor() {\n        this.pathGraph = new PathGraph();\n    }\n\n    public getCandidatePaths(\n        tokenIn: Token,\n        tokenOut: Token,\n        pools: BasePool[],\n        graphTraversalConfig?: Partial<PathGraphTraversalConfig>,\n    ): Path[] {\n        this.pathGraph.buildGraph({ pools });\n\n        const candidatePaths = this.pathGraph.getCandidatePaths({\n            tokenIn,\n            tokenOut,\n            graphTraversalConfig,\n        });\n\n        return candidatePaths;\n    }\n\n    public getBestPaths(\n        paths: Path[],\n        swapKind: SwapKind,\n        swapAmount: TokenAmount,\n    ): PathWithAmount[] | null {\n        if (paths.length === 0) {\n            throw new Error('No potential swap paths provided');\n        }\n\n        const quotePaths: PathWithAmount[] = [];\n\n        // Check if PathWithAmount is valid (each hop pool swap limit)\n        paths.forEach((path) => {\n            try {\n                quotePaths.push(\n                    new PathWithAmount(path.tokens, path.pools, swapAmount),\n                );\n            } catch {\n                logger.trace('Invalid path:');\n                logger.trace(\n                    path.tokens.map((token) => token.symbol).join(' -> '),\n                );\n                logger.trace(path.pools.map((pool) => pool.id).join(' -> '));\n                return;\n            }\n        });\n\n        if (quotePaths.length === 0) {\n            logger.info('No valid paths found');\n            return null;\n        }\n\n        let valueArr: { item: PathWithAmount; value: number }[];\n\n        if (swapKind === SwapKind.GivenIn) {\n            valueArr = quotePaths.map((item) => {\n                return {\n                    item,\n                    value: Number(item.outputAmount.amount),\n                };\n            });\n            valueArr.sort((a, b) => b.value - a.value);\n        } else {\n            valueArr = quotePaths.map((item) => {\n                return {\n                    item,\n                    value: Number(item.inputAmount.amount),\n                };\n            });\n            valueArr.sort((a, b) => a.value - b.value);\n        }\n\n        const orderedQuotePaths = valueArr.map((item) => item.item);\n\n        // If there is only one path, return it\n        if (orderedQuotePaths.length === 1) {\n            return orderedQuotePaths;\n        }\n\n        // Split swapAmount in half, making sure not to lose dust\n        const swapAmount50up = swapAmount.mulDownFixed(WAD / 2n);\n        const swapAmount50down = swapAmount.sub(swapAmount50up);\n\n        const path50up = new PathWithAmount(\n            orderedQuotePaths[0].tokens,\n            orderedQuotePaths[0].pools,\n            swapAmount50up,\n        );\n        const path50down = new PathWithAmount(\n            orderedQuotePaths[1].tokens,\n            orderedQuotePaths[1].pools,\n            swapAmount50down,\n        );\n\n        if (swapKind === SwapKind.GivenIn) {\n            if (\n                orderedQuotePaths[0].outputAmount.amount >\n                path50up.outputAmount.amount + path50down.outputAmount.amount\n            ) {\n                return orderedQuotePaths.slice(0, 1);\n            }\n            return [path50up, path50down];\n        }\n        if (\n            orderedQuotePaths[0].inputAmount.amount <\n            path50up.inputAmount.amount + path50down.inputAmount.amount\n        ) {\n            return orderedQuotePaths.slice(0, 1);\n        }\n        return [path50up, path50down];\n    }\n}\n","import { Hex, parseEther } from 'viem';\nimport { PoolType, SwapKind } from '../../../types';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { BasePool } from '..';\nimport { MathSol, WAD, getPoolAddress } from '../../../utils';\nimport { _calcOutGivenIn, _calcInGivenOut } from './weightedMath';\nimport { RawWeightedPool } from '../../../data/types';\n\nclass WeightedPoolToken extends TokenAmount {\n    public readonly weight: bigint;\n    public readonly index: number;\n\n    public constructor(\n        token: Token,\n        amount: BigintIsh,\n        weight: BigintIsh,\n        index: number,\n    ) {\n        super(token, amount);\n        this.weight = BigInt(weight);\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n}\n\nexport class WeightedPool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.Weighted;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly tokens: WeightedPoolToken[];\n\n    private readonly tokenMap: Map<string, WeightedPoolToken>;\n    private readonly MAX_IN_RATIO = 300000000000000000n; // 0.3\n    private readonly MAX_OUT_RATIO = 300000000000000000n; // 0.3\n\n    static fromRawPool(chainId: number, pool: RawWeightedPool): WeightedPool {\n        const poolTokens: WeightedPoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            if (!t.weight) {\n                throw new Error('Weighted pool token does not have a weight');\n            }\n\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            poolTokens.push(\n                new WeightedPoolToken(\n                    token,\n                    tokenAmount.amount,\n                    parseEther(t.weight),\n                    t.index,\n                ),\n            );\n        }\n\n        return new WeightedPool(\n            pool.id,\n            pool.poolTypeVersion,\n            parseEther(pool.swapFee),\n            poolTokens,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        swapFee: bigint,\n        tokens: WeightedPoolToken[],\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.address = getPoolAddress(id);\n        this.swapFee = swapFee;\n        this.tokens = tokens;\n        this.tokenMap = new Map(\n            tokens.map((token) => [token.token.address, token]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        return (tIn.amount * tOut.weight) / (tIn.weight + tOut.weight);\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        if (swapKind === SwapKind.GivenIn) {\n            return (tIn.amount * this.MAX_IN_RATIO) / WAD;\n        }\n        return (tOut.amount * this.MAX_OUT_RATIO) / WAD;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        if (\n            swapAmount.amount >\n            this.getLimitAmountSwap(tokenIn, tokenOut, SwapKind.GivenIn)\n        ) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const amountWithFee = this.subtractSwapFeeAmount(swapAmount);\n\n        const tokenOutScale18 = _calcOutGivenIn(\n            tIn.scale18,\n            tIn.weight,\n            tOut.scale18,\n            tOut.weight,\n            amountWithFee.scale18,\n            this.poolTypeVersion,\n        );\n\n        const tokenOutAmount = TokenAmount.fromScale18Amount(\n            tokenOut,\n            tokenOutScale18,\n        );\n\n        if (mutateBalances) {\n            tIn.increase(swapAmount.amount);\n            tOut.decrease(tokenOutAmount.amount);\n        }\n\n        return tokenOutAmount;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        if (\n            swapAmount.amount >\n            this.getLimitAmountSwap(tokenIn, tokenOut, SwapKind.GivenOut)\n        ) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const tokenInScale18 = _calcInGivenOut(\n            tIn.scale18,\n            tIn.weight,\n            tOut.scale18,\n            tOut.weight,\n            swapAmount.scale18,\n            this.poolTypeVersion,\n        );\n\n        const tokenInAmount = this.addSwapFeeAmount(\n            TokenAmount.fromScale18Amount(tokenIn, tokenInScale18, true),\n        );\n\n        if (mutateBalances) {\n            tIn.increase(tokenInAmount.amount);\n            tOut.decrease(swapAmount.amount);\n        }\n\n        return tokenInAmount;\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    private getRequiredTokenPair(\n        tokenIn: Token,\n        tokenOut: Token,\n    ): { tIn: WeightedPoolToken; tOut: WeightedPoolToken } {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut) {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        return { tIn, tOut };\n    }\n}\n","import { MathSol, WAD } from '../../../utils/math';\n\nexport function _calcOutGivenIn(\n    balanceIn: bigint,\n    weightIn: bigint,\n    balanceOut: bigint,\n    weightOut: bigint,\n    amountIn: bigint,\n    version?: number,\n): bigint {\n    const denominator = balanceIn + amountIn;\n    const base = MathSol.divUpFixed(balanceIn, denominator);\n    const exponent = MathSol.divDownFixed(weightIn, weightOut);\n    const power = MathSol.powUpFixed(base, exponent, version);\n    return MathSol.mulDownFixed(balanceOut, MathSol.complementFixed(power));\n}\n\nexport function _calcInGivenOut(\n    balanceIn: bigint,\n    weightIn: bigint,\n    balanceOut: bigint,\n    weightOut: bigint,\n    amountOut: bigint,\n    version?: number,\n): bigint {\n    const base = MathSol.divUpFixed(balanceOut, balanceOut - amountOut);\n    const exponent = MathSol.divUpFixed(weightOut, weightIn);\n    const power = MathSol.powUpFixed(base, exponent, version);\n    const ratio = power - WAD;\n    return MathSol.mulUpFixed(balanceIn, ratio);\n}\n","import { BasePool, BasePoolFactory } from '../index';\nimport { WeightedPool } from './weightedPool';\nimport { RawPool, RawWeightedPool } from '../../../data/types';\n\nexport class WeightedPoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType === 'Weighted';\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return WeightedPool.fromRawPool(chainId, pool as RawWeightedPool);\n    }\n}\n","import { Hex, parseEther, parseUnits } from 'viem';\nimport { PoolType, SwapKind } from '../../../types';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { BasePool } from '..';\nimport { getPoolAddress, MathSol, WAD } from '../../../utils';\nimport {\n    _calcBptInGivenExactTokensOut,\n    _calcBptOutGivenExactTokensIn,\n    _calcInGivenOut,\n    _calcOutGivenIn,\n    _calcTokenInGivenExactBptOut,\n    _calcTokenOutGivenExactBptIn,\n    _calculateInvariant,\n} from './stableMath';\nimport { RawComposableStablePool } from '../../../data/types';\n\nexport class StablePoolToken extends TokenAmount {\n    public readonly rate: bigint;\n    public readonly index: number;\n    public scale18: bigint;\n\n    public constructor(\n        token: Token,\n        amount: BigintIsh,\n        rate: BigintIsh,\n        index: number,\n    ) {\n        super(token, amount);\n        this.rate = BigInt(rate);\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        return this;\n    }\n}\n\nexport class StablePool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.ComposableStable;\n    public readonly amp: bigint;\n    public readonly swapFee: bigint;\n    public readonly bptIndex: number;\n\n    public totalShares: bigint;\n    public tokens: StablePoolToken[];\n\n    private readonly tokenMap: Map<string, StablePoolToken>;\n    private readonly tokenIndexMap: Map<string, number>;\n\n    static fromRawPool(\n        chainId: number,\n        pool: RawComposableStablePool,\n    ): StablePool {\n        const poolTokens: StablePoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            if (!t.priceRate)\n                throw new Error('Stable pool token does not have a price rate');\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            const tokenIndex =\n                t.index ??\n                pool.tokensList.findIndex((t) => t === token.address);\n\n            poolTokens.push(\n                new StablePoolToken(\n                    token,\n                    tokenAmount.amount,\n                    parseEther(t.priceRate),\n                    tokenIndex,\n                ),\n            );\n        }\n\n        const totalShares = parseEther(pool.totalShares);\n        const amp = parseUnits(pool.amp, 3);\n\n        return new StablePool(\n            pool.id,\n            amp,\n            parseEther(pool.swapFee),\n            poolTokens,\n            totalShares,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        amp: bigint,\n        swapFee: bigint,\n        tokens: StablePoolToken[],\n        totalShares: bigint,\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.address = getPoolAddress(id);\n        this.amp = amp;\n        this.swapFee = swapFee;\n        this.totalShares = totalShares;\n\n        this.tokens = tokens.sort((a, b) => a.index - b.index);\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n        this.tokenIndexMap = new Map(\n            this.tokens.map((token) => [token.token.address, token.index]),\n        );\n\n        this.bptIndex = this.tokens.findIndex(\n            (t) => t.token.address === this.address,\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix stable normalized liquidity calc\n        return tOut.amount * this.amp;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const tInIndex = this.tokenIndexMap.get(tokenIn.wrapped);\n        const tOutIndex = this.tokenIndexMap.get(tokenOut.wrapped);\n\n        if (typeof tInIndex !== 'number' || typeof tOutIndex !== 'number') {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        const balancesNoBpt = this.dropBptItem(\n            this.tokens.map((t) => t.scale18),\n        );\n\n        // TODO: Fix stable swap limit\n        if (swapAmount.scale18 > this.tokens[tInIndex].scale18) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const invariant = _calculateInvariant(this.amp, balancesNoBpt);\n\n        let tokenOutScale18: bigint;\n        if (tokenIn.isUnderlyingEqual(this.tokens[this.bptIndex].token)) {\n            const amountInWithRate = swapAmount.mulDownFixed(\n                this.tokens[tInIndex].rate,\n            );\n\n            tokenOutScale18 = _calcTokenOutGivenExactBptIn(\n                this.amp,\n                [...balancesNoBpt],\n                this.skipBptIndex(tOutIndex),\n                amountInWithRate.scale18,\n                this.totalShares,\n                invariant,\n                this.swapFee,\n            );\n        } else if (\n            tokenOut.isUnderlyingEqual(this.tokens[this.bptIndex].token)\n        ) {\n            const amountsIn = new Array(balancesNoBpt.length).fill(0n);\n\n            const amountInWithRate = swapAmount.mulDownFixed(\n                this.tokens[tInIndex].rate,\n            );\n            amountsIn[this.skipBptIndex(tInIndex)] = amountInWithRate.scale18;\n\n            tokenOutScale18 = _calcBptOutGivenExactTokensIn(\n                this.amp,\n                [...balancesNoBpt],\n                amountsIn,\n                this.totalShares,\n                invariant,\n                this.swapFee,\n            );\n        } else {\n            const amountInWithFee = this.subtractSwapFeeAmount(swapAmount);\n            const amountInWithRate = amountInWithFee.mulDownFixed(\n                this.tokens[tInIndex].rate,\n            );\n\n            tokenOutScale18 = _calcOutGivenIn(\n                this.amp,\n                [...balancesNoBpt],\n                this.skipBptIndex(tInIndex),\n                this.skipBptIndex(tOutIndex),\n                amountInWithRate.scale18,\n                invariant,\n            );\n        }\n\n        const amountOut = TokenAmount.fromScale18Amount(\n            tokenOut,\n            tokenOutScale18,\n        );\n        const amountOutWithRate = amountOut.divDownFixed(\n            this.tokens[tOutIndex].rate,\n        );\n\n        if (amountOutWithRate.amount < 0n)\n            throw new Error('Swap output negative');\n\n        if (mutateBalances) {\n            this.tokens[tInIndex].increase(swapAmount.amount);\n            this.tokens[tOutIndex].decrease(amountOutWithRate.amount);\n\n            if (tInIndex === this.bptIndex) {\n                this.totalShares = this.totalShares - swapAmount.amount;\n            } else if (tOutIndex === this.bptIndex) {\n                this.totalShares = this.totalShares + amountOutWithRate.amount;\n            }\n        }\n\n        return amountOutWithRate;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const tInIndex = this.tokenIndexMap.get(tokenIn.wrapped);\n        const tOutIndex = this.tokenIndexMap.get(tokenOut.wrapped);\n\n        if (typeof tInIndex !== 'number' || typeof tOutIndex !== 'number') {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        const balancesNoBpt = this.dropBptItem(\n            this.tokens.map((t) => t.scale18),\n        );\n\n        // TODO: Fix stable swap limit\n        if (swapAmount.scale18 > this.tokens[tOutIndex].scale18) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const amountOutWithRate = swapAmount.mulDownFixed(\n            this.tokens[tOutIndex].rate,\n        );\n\n        const invariant = _calculateInvariant(this.amp, balancesNoBpt);\n\n        let amountIn: TokenAmount;\n        if (tokenIn.isUnderlyingEqual(this.tokens[this.bptIndex].token)) {\n            const amountsOut = new Array(balancesNoBpt.length).fill(0n);\n            amountsOut[this.skipBptIndex(tOutIndex)] =\n                amountOutWithRate.scale18;\n\n            const tokenInScale18 = _calcBptInGivenExactTokensOut(\n                this.amp,\n                [...balancesNoBpt],\n                amountsOut,\n                this.totalShares,\n                invariant,\n                this.swapFee,\n            );\n\n            amountIn = TokenAmount.fromScale18Amount(\n                tokenIn,\n                tokenInScale18,\n                true,\n            ).divDownFixed(this.tokens[tInIndex].rate);\n        } else if (\n            tokenOut.isUnderlyingEqual(this.tokens[this.bptIndex].token)\n        ) {\n            const tokenInScale18 = _calcTokenInGivenExactBptOut(\n                this.amp,\n                [...balancesNoBpt],\n                this.skipBptIndex(tInIndex),\n                amountOutWithRate.scale18,\n                this.totalShares,\n                invariant,\n                this.swapFee,\n            );\n\n            amountIn = TokenAmount.fromScale18Amount(\n                tokenIn,\n                tokenInScale18,\n                true,\n            ).divDownFixed(this.tokens[tInIndex].rate);\n        } else {\n            const tokenInScale18 = _calcInGivenOut(\n                this.amp,\n                [...balancesNoBpt],\n                this.skipBptIndex(tInIndex),\n                this.skipBptIndex(tOutIndex),\n                amountOutWithRate.scale18,\n                invariant,\n            );\n\n            const amountInWithoutFee = TokenAmount.fromScale18Amount(\n                tokenIn,\n                tokenInScale18,\n                true,\n            );\n            const amountInWithFee = this.addSwapFeeAmount(amountInWithoutFee);\n\n            amountIn = amountInWithFee.divDownFixed(this.tokens[tInIndex].rate);\n        }\n\n        if (amountIn.amount < 0n) throw new Error('Swap output negative');\n\n        if (mutateBalances) {\n            this.tokens[tInIndex].increase(amountIn.amount);\n            this.tokens[tOutIndex].decrease(swapAmount.amount);\n\n            if (tInIndex === this.bptIndex) {\n                this.totalShares = this.totalShares - amountIn.amount;\n            } else if (tOutIndex === this.bptIndex) {\n                this.totalShares = this.totalShares + swapAmount.amount;\n            }\n        }\n\n        return amountIn;\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const tIn = this.tokenMap.get(tokenIn.address);\n        const tOut = this.tokenMap.get(tokenOut.address);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n\n        if (swapKind === SwapKind.GivenIn) {\n            // Return max valid amount of tokenIn\n            return (tIn.amount * WAD) / tIn.rate;\n        }\n        // Return max amount of tokenOut - approx is almost all balance\n        return (tOut.amount * WAD) / tOut.rate;\n    }\n\n    public skipBptIndex(index: number): number {\n        if (index === this.bptIndex) throw new Error('Cannot skip BPT index');\n        return index < this.bptIndex ? index : index - 1;\n    }\n\n    public dropBptItem(amounts: bigint[]): bigint[] {\n        const amountsWithoutBpt = new Array(amounts.length - 1).fill(0n);\n        for (let i = 0; i < amountsWithoutBpt.length; i++) {\n            amountsWithoutBpt[i] = amounts[i < this.bptIndex ? i : i + 1];\n        }\n        return amountsWithoutBpt;\n    }\n}\n","const AMP_PRECISION = 1000n;\nimport { MathSol, WAD } from '../../../utils';\n\nexport function _calculateInvariant(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    roundUp?: boolean,\n): bigint {\n    let sum = 0n;\n    const numTokens = balances.length;\n    for (let i = 0; i < numTokens; i++) {\n        sum += balances[i];\n    }\n\n    if (sum === 0n) {\n        return 0n;\n    }\n\n    let prevInvariant: bigint;\n    let invariant = sum;\n    const ampTimesTotal = amplificationParameter * BigInt(numTokens);\n\n    for (let i = 0; i < 255; i++) {\n        let D_P = invariant;\n\n        for (let j = 0; j < numTokens; j++) {\n            D_P = roundUp\n                ? MathSol.divUp(\n                      D_P * invariant,\n                      balances[j] * BigInt(numTokens),\n                  )\n                : (D_P * invariant) / (balances[j] * BigInt(numTokens));\n        }\n\n        prevInvariant = invariant;\n\n        invariant = roundUp\n            ? MathSol.divUp(\n                  ((ampTimesTotal * sum) / AMP_PRECISION +\n                      D_P * BigInt(numTokens)) *\n                      invariant,\n                  MathSol.divUp(\n                      (ampTimesTotal - AMP_PRECISION) * invariant,\n                      AMP_PRECISION,\n                  ) +\n                      (BigInt(numTokens) + 1n) * D_P,\n              )\n            : (((ampTimesTotal * sum) / AMP_PRECISION +\n                  D_P * BigInt(numTokens)) *\n                  invariant) /\n              (((ampTimesTotal - AMP_PRECISION) * invariant) / AMP_PRECISION +\n                  (BigInt(numTokens) + 1n) * D_P);\n\n        if (invariant > prevInvariant) {\n            if (invariant - prevInvariant <= 1n) {\n                return invariant;\n            }\n        } else if (prevInvariant - invariant <= 1n) {\n            return invariant;\n        }\n    }\n\n    throw new Error('Errors.STABLE_INVARIANT_DIDNT_CONVERGE');\n}\n\nexport function _calcOutGivenIn(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    tokenIndexIn: number,\n    tokenIndexOut: number,\n    tokenAmountIn: bigint,\n    invariant: bigint,\n): bigint {\n    balances[tokenIndexIn] = balances[tokenIndexIn] + tokenAmountIn;\n\n    const finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances(\n        amplificationParameter,\n        balances,\n        invariant,\n        tokenIndexOut,\n    );\n\n    balances[tokenIndexIn] = balances[tokenIndexIn] - tokenAmountIn;\n\n    return balances[tokenIndexOut] - finalBalanceOut - 1n;\n}\n\nexport function _calcInGivenOut(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    tokenIndexIn: number,\n    tokenIndexOut: number,\n    tokenAmountOut: bigint,\n    invariant: bigint,\n): bigint {\n    balances[tokenIndexOut] = balances[tokenIndexOut] - tokenAmountOut;\n\n    const finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances(\n        amplificationParameter,\n        balances,\n        invariant,\n        tokenIndexIn,\n    );\n\n    balances[tokenIndexOut] = balances[tokenIndexOut] - tokenAmountOut;\n\n    return finalBalanceIn - balances[tokenIndexIn] + 1n;\n}\n\nexport function _calcBptOutGivenExactTokensIn(\n    amp: bigint,\n    balances: bigint[],\n    amountsIn: bigint[],\n    bptTotalSupply: bigint,\n    currentInvariant: bigint,\n    swapFee: bigint,\n): bigint {\n    let sumBalances = 0n;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances += balances[i];\n    }\n\n    const balanceRatiosWithFee = new Array(amountsIn.length);\n    let invariantRatioWithFees = 0n;\n\n    for (let i = 0; i < balances.length; i++) {\n        const currentWeight = MathSol.divDownFixed(balances[i], sumBalances);\n        balanceRatiosWithFee[i] = MathSol.divDownFixed(\n            balances[i] + amountsIn[i],\n            balances[i],\n        );\n        invariantRatioWithFees =\n            invariantRatioWithFees +\n            MathSol.mulDownFixed(balanceRatiosWithFee[i], currentWeight);\n    }\n\n    const newBalances = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        let amountInWithoutFee: bigint;\n\n        if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\n            const nonTaxableAmount = MathSol.mulDownFixed(\n                balances[i],\n                invariantRatioWithFees - WAD,\n            );\n            const taxableAmount = amountsIn[i] - nonTaxableAmount;\n\n            amountInWithoutFee =\n                nonTaxableAmount +\n                MathSol.mulDownFixed(taxableAmount, WAD - swapFee);\n        } else {\n            amountInWithoutFee = amountsIn[i];\n        }\n\n        newBalances[i] = balances[i] + amountInWithoutFee;\n    }\n\n    const newInvariant = _calculateInvariant(amp, newBalances);\n    const invariantRatio = MathSol.divDownFixed(newInvariant, currentInvariant);\n\n    if (invariantRatio > WAD) {\n        return MathSol.mulDownFixed(bptTotalSupply, invariantRatio - WAD);\n    }\n    return 0n;\n}\n\nexport function _calcTokenInGivenExactBptOut(\n    amp: bigint,\n    balances: bigint[],\n    tokenIndex: number,\n    bptAmountOut: bigint,\n    bptTotalSupply: bigint,\n    currentInvariant: bigint,\n    swapFee: bigint,\n): bigint {\n    const newInvariant = MathSol.mulUpFixed(\n        MathSol.divUpFixed(bptTotalSupply + bptAmountOut, bptTotalSupply),\n        currentInvariant,\n    );\n\n    const newBalanceTokenIndex =\n        _getTokenBalanceGivenInvariantAndAllOtherBalances(\n            amp,\n            balances,\n            newInvariant,\n            tokenIndex,\n        );\n    const amountInWithoutFee = newBalanceTokenIndex - balances[tokenIndex];\n\n    let sumBalances = 0n;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances += balances[i];\n    }\n\n    const currentWeight = MathSol.divDownFixed(\n        balances[tokenIndex],\n        sumBalances,\n    );\n    const taxablePercentage = MathSol.complementFixed(currentWeight);\n    const taxableAmount = MathSol.mulUpFixed(\n        amountInWithoutFee,\n        taxablePercentage,\n    );\n    const nonTaxableAmount = amountInWithoutFee - taxableAmount;\n\n    return nonTaxableAmount + MathSol.divUpFixed(taxableAmount, WAD - swapFee);\n}\n\nexport function _calcBptInGivenExactTokensOut(\n    amp: bigint,\n    balances: bigint[],\n    amountsOut: bigint[],\n    bptTotalSupply: bigint,\n    currentInvariant: bigint,\n    swapFee: bigint,\n): bigint {\n    let sumBalances = 0n;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances += balances[i];\n    }\n\n    const balanceRatiosWithoutFee = new Array(amountsOut.length);\n    let invariantRatioWithoutFees = 0n;\n    for (let i = 0; i < balances.length; i++) {\n        const currentWeight = MathSol.divUpFixed(balances[i], sumBalances);\n        balanceRatiosWithoutFee[i] = MathSol.divUpFixed(\n            balances[i] - amountsOut[i],\n            balances[i],\n        );\n        invariantRatioWithoutFees += MathSol.mulUpFixed(\n            balanceRatiosWithoutFee[i],\n            currentWeight,\n        );\n    }\n\n    const newBalances = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        let amountOutWithFee: bigint;\n\n        if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {\n            const nonTaxableAmount = MathSol.mulDownFixed(\n                balances[i],\n                MathSol.complementFixed(invariantRatioWithoutFees),\n            );\n            const taxableAmount = amountsOut[i] - nonTaxableAmount;\n\n            amountOutWithFee =\n                nonTaxableAmount +\n                MathSol.divUpFixed(taxableAmount, WAD - swapFee);\n        } else {\n            amountOutWithFee = amountsOut[i];\n        }\n\n        newBalances[i] = balances[i] - amountOutWithFee;\n    }\n\n    const newInvariant = _calculateInvariant(amp, newBalances);\n    const invariantRatio = MathSol.divDownFixed(newInvariant, currentInvariant);\n\n    return MathSol.mulUpFixed(\n        bptTotalSupply,\n        MathSol.complementFixed(invariantRatio),\n    );\n}\n\nexport function _calcTokenOutGivenExactBptIn(\n    amp: bigint,\n    balances: bigint[],\n    tokenIndex: number,\n    bptAmountIn: bigint,\n    bptTotalSupply: bigint,\n    currentInvariant: bigint,\n    swapFee: bigint,\n): bigint {\n    const newInvariant = MathSol.mulUpFixed(\n        MathSol.divUpFixed(bptTotalSupply - bptAmountIn, bptTotalSupply),\n        currentInvariant,\n    );\n\n    const newBalanceTokenIndex =\n        _getTokenBalanceGivenInvariantAndAllOtherBalances(\n            amp,\n            balances,\n            newInvariant,\n            tokenIndex,\n        );\n    const amountOutWithoutFee = balances[tokenIndex] - newBalanceTokenIndex;\n\n    let sumBalances = 0n;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances += balances[i];\n    }\n\n    const currentWeight = MathSol.divDownFixed(\n        balances[tokenIndex],\n        sumBalances,\n    );\n    const taxablePercentage = MathSol.complementFixed(currentWeight);\n\n    const taxableAmount = MathSol.mulUpFixed(\n        amountOutWithoutFee,\n        taxablePercentage,\n    );\n    const nonTaxableAmount = amountOutWithoutFee - taxableAmount;\n\n    return (\n        nonTaxableAmount + MathSol.mulDownFixed(taxableAmount, WAD - swapFee)\n    );\n}\n\nexport function _getTokenBalanceGivenInvariantAndAllOtherBalances(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    invariant: bigint,\n    tokenIndex: number,\n): bigint {\n    const ampTimesTotal = amplificationParameter * BigInt(balances.length);\n    let sum = balances[0];\n    let P_D = balances[0] * BigInt(balances.length);\n\n    for (let j = 1; j < balances.length; j++) {\n        P_D = (P_D * balances[j] * BigInt(balances.length)) / invariant;\n        sum += balances[j];\n    }\n\n    sum = sum - balances[tokenIndex];\n    const inv2 = invariant * invariant;\n    const c =\n        MathSol.divUp(inv2, ampTimesTotal * P_D) *\n        AMP_PRECISION *\n        balances[tokenIndex];\n    const b = sum + (invariant / ampTimesTotal) * AMP_PRECISION;\n\n    let prevTokenBalance = 0n;\n    let tokenBalance = MathSol.divUp(inv2 + c, invariant + b);\n\n    for (let i = 0; i < 255; i++) {\n        prevTokenBalance = tokenBalance;\n        tokenBalance = MathSol.divUp(\n            tokenBalance * tokenBalance + c,\n            tokenBalance * 2n + b - invariant,\n        );\n\n        if (tokenBalance > prevTokenBalance) {\n            if (tokenBalance - prevTokenBalance <= 1n) {\n                return tokenBalance;\n            }\n        } else if (prevTokenBalance - tokenBalance <= 1n) {\n            return tokenBalance;\n        }\n    }\n\n    throw new Error('Errors.STABLE_GET_BALANCE_DIDNT_CONVERGE');\n}\n","import { BasePool, BasePoolFactory } from '../index';\nimport { StablePool } from './stablePool';\nimport { RawComposableStablePool, RawPool } from '../../../data/types';\n\nexport class StablePoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType === 'ComposableStable';\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return StablePool.fromRawPool(chainId, pool as RawComposableStablePool);\n    }\n}\n","import { Hex, parseEther } from 'viem';\nimport { PoolType, SwapKind } from '../../../types';\nimport { Token, TokenAmount } from '../..';\nimport { BasePool } from '..';\nimport { getPoolAddress, MathSol, WAD } from '../../../utils';\nimport {\n    _calcInGivenOut,\n    _calcOutGivenIn,\n    _calculateInvariant,\n} from '../stable/stableMath';\nimport { StablePoolToken } from '../stable/stablePool';\nimport { RawMetaStablePool } from '../../../data/types';\n\nexport class MetaStablePool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.MetaStable;\n    public readonly amp: bigint;\n    public readonly swapFee: bigint;\n    public readonly tokens: StablePoolToken[];\n\n    private readonly tokenMap: Map<string, StablePoolToken>;\n    private readonly tokenIndexMap: Map<string, number>;\n\n    static fromRawPool(\n        chainId: number,\n        pool: RawMetaStablePool,\n    ): MetaStablePool {\n        const poolTokens: StablePoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            if (!t.priceRate)\n                throw new Error(\n                    'Meta Stable pool token does not have a price rate',\n                );\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            const tokenIndex =\n                t.index ??\n                pool.tokensList.findIndex((t) => t === token.address);\n\n            poolTokens.push(\n                new StablePoolToken(\n                    token,\n                    tokenAmount.amount,\n                    parseEther(t.priceRate),\n                    tokenIndex,\n                ),\n            );\n        }\n\n        const amp = BigInt(pool.amp) * 1000n;\n\n        return new MetaStablePool(\n            pool.id,\n            amp,\n            parseEther(pool.swapFee),\n            poolTokens,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        amp: bigint,\n        swapFee: bigint,\n        tokens: StablePoolToken[],\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.address = getPoolAddress(id);\n        this.amp = amp;\n        this.swapFee = swapFee;\n\n        this.tokens = tokens.sort((a, b) => a.index - b.index);\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n        this.tokenIndexMap = new Map(\n            this.tokens.map((token) => [token.token.address, token.index]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.address);\n        const tOut = this.tokenMap.get(tokenOut.address);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix stable normalized liquidity calc\n        return tOut.amount * this.amp;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const tInIndex = this.tokenIndexMap.get(tokenIn.address);\n        const tOutIndex = this.tokenIndexMap.get(tokenOut.address);\n\n        if (typeof tInIndex !== 'number' || typeof tOutIndex !== 'number') {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        if (swapAmount.amount > this.tokens[tInIndex].amount) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const amountInWithFee = this.subtractSwapFeeAmount(swapAmount);\n        const amountInWithRate = amountInWithFee.mulDownFixed(\n            this.tokens[tInIndex].rate,\n        );\n        const balances = this.tokens.map((t) => t.scale18);\n\n        const invariant = _calculateInvariant(this.amp, [...balances], true);\n\n        const tokenOutScale18 = _calcOutGivenIn(\n            this.amp,\n            [...balances],\n            tInIndex,\n            tOutIndex,\n            amountInWithRate.scale18,\n            invariant,\n        );\n\n        const amountOut = TokenAmount.fromScale18Amount(\n            tokenOut,\n            tokenOutScale18,\n        );\n        const amountOutWithRate = amountOut.divDownFixed(\n            this.tokens[tOutIndex].rate,\n        );\n\n        if (amountOutWithRate.amount < 0n)\n            throw new Error('Swap output negative');\n\n        if (mutateBalances) {\n            this.tokens[tInIndex].increase(swapAmount.amount);\n            this.tokens[tOutIndex].decrease(amountOutWithRate.amount);\n        }\n\n        return amountOutWithRate;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const tInIndex = this.tokenIndexMap.get(tokenIn.address);\n        const tOutIndex = this.tokenIndexMap.get(tokenOut.address);\n\n        if (typeof tInIndex !== 'number' || typeof tOutIndex !== 'number') {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        if (swapAmount.amount > this.tokens[tOutIndex].amount) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        const amountOutWithRate = swapAmount.mulDownFixed(\n            this.tokens[tOutIndex].rate,\n        );\n\n        const balances = this.tokens.map((t) => t.scale18);\n\n        const invariant = _calculateInvariant(this.amp, balances, true);\n\n        const tokenInScale18 = _calcInGivenOut(\n            this.amp,\n            [...balances],\n            tInIndex,\n            tOutIndex,\n            amountOutWithRate.scale18,\n            invariant,\n        );\n\n        const amountIn = TokenAmount.fromScale18Amount(\n            tokenIn,\n            tokenInScale18,\n            true,\n        );\n        const amountInWithFee = this.addSwapFeeAmount(amountIn);\n        const amountInWithRate = amountInWithFee.divDownFixed(\n            this.tokens[tInIndex].rate,\n        );\n\n        if (amountInWithRate.amount < 0n)\n            throw new Error('Swap output negative');\n\n        if (mutateBalances) {\n            this.tokens[tInIndex].increase(amountInWithRate.amount);\n            this.tokens[tOutIndex].decrease(swapAmount.amount);\n        }\n\n        return amountInWithRate;\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const tIn = this.tokenMap.get(tokenIn.address);\n        const tOut = this.tokenMap.get(tokenOut.address);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n\n        if (swapKind === SwapKind.GivenIn) {\n            // Return max valid amount of tokenIn\n            // As an approx - use almost the total balance of token out as we can add any amount of tokenIn and expect some back\n            return (tIn.amount * WAD) / tIn.rate;\n        }\n        // Return max amount of tokenOut - approx is almost all balance\n        return (tOut.amount * WAD) / tOut.rate;\n    }\n}\n","import { BasePool, BasePoolFactory } from '../index';\nimport { MetaStablePool } from './metastablePool';\nimport { RawMetaStablePool, RawPool } from '../../../data/types';\n\nexport class MetaStablePoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType === 'MetaStable';\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return MetaStablePool.fromRawPool(chainId, pool as RawMetaStablePool);\n    }\n}\n","import { Hex, parseEther } from 'viem';\nimport { PoolType, SwapKind } from '../../../types';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { BasePool } from '..';\nimport { getPoolAddress, MAX_UINT112, WAD } from '../../../utils';\nimport {\n    _calcBptOutPerMainIn,\n    _calcBptOutPerWrappedIn,\n    _calcMainOutPerBptIn,\n    _calcMainOutPerWrappedIn,\n    _calcWrappedOutPerBptIn,\n    _calcWrappedOutPerMainIn,\n    _calcMainInPerWrappedOut,\n    _calcMainInPerBptOut,\n    _calcWrappedInPerMainOut,\n    _calcWrappedInPerBptOut,\n    _calcBptInPerWrappedOut,\n    _calcBptInPerMainOut,\n} from './linearMath';\nimport { StablePoolToken } from '../stable/stablePool';\nimport { RawLinearPool } from '../../../data/types';\nimport { Params } from './types';\n\nconst MAX_RATIO = parseEther('10');\nconst MAX_TOKEN_BALANCE = MAX_UINT112 - 1n;\n\ntype LinearPoolToken = BPT | StablePoolToken;\n\nclass BPT extends TokenAmount {\n    public readonly rate: bigint;\n    public readonly index: number;\n    public virtualBalance: bigint;\n\n    public constructor(token: Token, amount: BigintIsh, index: number) {\n        super(token, amount);\n        this.rate = WAD;\n        this.virtualBalance = MAX_TOKEN_BALANCE - this.amount;\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.virtualBalance = this.virtualBalance + amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.virtualBalance = this.virtualBalance - amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n}\n\nexport class LinearPool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.AaveLinear;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly mainToken: StablePoolToken;\n    public readonly wrappedToken: StablePoolToken;\n    public readonly bptToken: BPT;\n    public readonly params: Params;\n    public readonly tokens: LinearPoolToken[];\n\n    private readonly tokenMap: Map<string, LinearPoolToken>;\n\n    static fromRawPool(chainId: number, pool: RawLinearPool): LinearPool {\n        const orderedTokens = pool.tokens.sort((a, b) => a.index - b.index);\n        const swapFee = parseEther(pool.swapFee);\n\n        const mT = orderedTokens[pool.mainIndex];\n        const mTRate = parseEther(mT.priceRate || '1.0');\n        const mToken = new Token(\n            chainId,\n            mT.address,\n            mT.decimals,\n            mT.symbol,\n            mT.name,\n        );\n        const lowerTarget = TokenAmount.fromHumanAmount(\n            mToken,\n            pool.lowerTarget,\n        );\n        const upperTarget = TokenAmount.fromHumanAmount(\n            mToken,\n            pool.upperTarget,\n        );\n        const mTokenAmount = TokenAmount.fromHumanAmount(mToken, mT.balance);\n        const mainToken = new StablePoolToken(\n            mToken,\n            mTokenAmount.amount,\n            mTRate,\n            mT.index,\n        );\n\n        const wT = orderedTokens[pool.wrappedIndex];\n        const wTRate = parseEther(wT.priceRate || '1.0');\n\n        const wToken = new Token(\n            chainId,\n            wT.address,\n            wT.decimals,\n            wT.symbol,\n            wT.name,\n        );\n        const wTokenAmount = TokenAmount.fromHumanAmount(wToken, wT.balance);\n        const wrappedToken = new StablePoolToken(\n            wToken,\n            wTokenAmount.amount,\n            wTRate,\n            wT.index,\n        );\n\n        const bptIndex: number = orderedTokens.findIndex(\n            (t) => t.address === pool.address,\n        );\n        const bT = orderedTokens[bptIndex];\n        const bToken = new Token(\n            chainId,\n            bT.address,\n            bT.decimals,\n            bT.symbol,\n            bT.name,\n        );\n        const bTokenAmount = TokenAmount.fromHumanAmount(bToken, bT.balance);\n        const bptToken = new BPT(bToken, bTokenAmount.amount, bT.index);\n\n        const params: Params = {\n            fee: swapFee,\n            rate: wTRate,\n            lowerTarget: lowerTarget.scale18,\n            upperTarget: upperTarget.scale18,\n        };\n\n        return new LinearPool(\n            pool.id,\n            pool.poolTypeVersion,\n            params,\n            mainToken,\n            wrappedToken,\n            bptToken,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        params: Params,\n        mainToken: StablePoolToken,\n        wrappedToken: StablePoolToken,\n        bptToken: BPT,\n    ) {\n        this.chainId = mainToken.token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.swapFee = params.fee;\n        this.mainToken = mainToken;\n        this.wrappedToken = wrappedToken;\n        this.bptToken = bptToken;\n        this.address = getPoolAddress(id);\n        this.params = params;\n\n        this.tokens = [this.mainToken, this.wrappedToken, this.bptToken];\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix linear normalized liquidity calc\n        return tOut.amount;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        let _swapAmount = swapAmount;\n\n        let output: TokenAmount;\n        if (tokenIn.isEqual(this.mainToken.token)) {\n            if (tokenOut.isEqual(this.wrappedToken.token)) {\n                output = this._exactMainTokenInForWrappedOut(_swapAmount);\n                output = output.divDownFixed(this.wrappedToken.rate);\n            } else {\n                output = this._exactMainTokenInForBptOut(_swapAmount);\n            }\n        } else if (tokenIn.isEqual(this.wrappedToken.token)) {\n            _swapAmount = _swapAmount.mulDownFixed(this.wrappedToken.rate);\n            if (tokenOut.isEqual(this.mainToken.token)) {\n                output = this._exactWrappedTokenInForMainOut(_swapAmount);\n            } else {\n                output = this._exactWrappedTokenInForBptOut(_swapAmount);\n            }\n        } else if (tokenIn.isEqual(this.bptToken.token)) {\n            if (tokenOut.isEqual(this.mainToken.token)) {\n                output = this._exactBptInForMainOut(_swapAmount);\n            } else {\n                output = this._exactBptInForWrappedOut(_swapAmount);\n                output = output.divDownFixed(this.wrappedToken.rate);\n            }\n        } else {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        if (output.amount > (tOut?.amount || 0n)) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        if (output.amount < 0n) throw new Error('Swap amount is negative');\n\n        if (mutateBalances) {\n            tIn.increase(_swapAmount.amount);\n            tOut.decrease(output.amount);\n        }\n\n        return output;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n\n        if (swapAmount.amount > (tOut?.amount || 0n)) {\n            throw new Error('Swap amount exceeds the pool limit');\n        }\n\n        let _swapAmount = swapAmount;\n\n        let input: TokenAmount;\n        if (tokenIn.isEqual(this.mainToken.token)) {\n            if (tokenOut.isEqual(this.wrappedToken.token)) {\n                _swapAmount = _swapAmount.mulDownFixed(this.wrappedToken.rate);\n                input = this._mainTokenInForExactWrappedOut(_swapAmount);\n            } else {\n                input = this._mainTokenInForExactBptOut(_swapAmount);\n            }\n        } else if (tokenIn.isEqual(this.wrappedToken.token)) {\n            if (tokenOut.isEqual(this.mainToken.token)) {\n                input = this._wrappedTokenInForExactMainOut(_swapAmount);\n            } else {\n                input = this._wrappedTokenInForExactBptOut(_swapAmount);\n            }\n            input = input.mulDownFixed(this.wrappedToken.rate);\n        } else if (tokenIn.isEqual(this.bptToken.token)) {\n            if (tokenOut.isEqual(this.mainToken.token)) {\n                input = this._bptInForExactMainOut(_swapAmount);\n            } else {\n                _swapAmount = _swapAmount.mulDownFixed(this.wrappedToken.rate);\n                input = this._bptInForExactWrappedOut(_swapAmount);\n            }\n        } else {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        if (input.amount < 0n) throw new Error('Swap amount is negative');\n\n        if (mutateBalances) {\n            tIn.increase(input.amount);\n            tOut.decrease(_swapAmount.amount);\n        }\n\n        return input;\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n\n        if (swapKind === SwapKind.GivenIn) {\n            if (tokenOut.isEqual(this.bptToken.token)) {\n                // Swapping to BPT allows for a very large amount so using pre-minted amount as estimation\n                return MAX_TOKEN_BALANCE;\n            }\n            const amount = TokenAmount.fromRawAmount(tokenOut, tOut.amount);\n\n            return this.swapGivenOut(tokenIn, tokenOut, amount).amount;\n        }\n        if (tokenOut.isEqual(this.bptToken.token)) {\n            return (tOut.amount * MAX_RATIO) / WAD;\n        }\n        return tOut.amount;\n    }\n\n    private _exactMainTokenInForWrappedOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcWrappedOutPerMainIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.wrappedToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _exactMainTokenInForBptOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcBptOutPerMainIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.bptToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _exactWrappedTokenInForMainOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcMainOutPerWrappedIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.mainToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _exactWrappedTokenInForBptOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcBptOutPerWrappedIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.bptToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _exactBptInForMainOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcMainOutPerBptIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.mainToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _exactBptInForWrappedOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcWrappedOutPerBptIn(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.wrappedToken.token,\n            tokenOutScale18,\n        );\n    }\n\n    private _mainTokenInForExactWrappedOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcMainInPerWrappedOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.mainToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private _mainTokenInForExactBptOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcMainInPerBptOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.mainToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private _wrappedTokenInForExactMainOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcWrappedInPerMainOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.wrappedToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private _wrappedTokenInForExactBptOut(\n        swapAmount: TokenAmount,\n    ): TokenAmount {\n        const tokenOutScale18 = _calcWrappedInPerBptOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.wrappedToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private _bptInForExactMainOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcBptInPerMainOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.bptToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private _bptInForExactWrappedOut(swapAmount: TokenAmount): TokenAmount {\n        const tokenOutScale18 = _calcBptInPerWrappedOut(\n            swapAmount.scale18,\n            this.mainToken.scale18,\n            this.wrappedToken.scale18,\n            this.bptToken.virtualBalance,\n            this.params,\n        );\n\n        return TokenAmount.fromScale18Amount(\n            this.bptToken.token,\n            tokenOutScale18,\n            true,\n        );\n    }\n\n    private getRequiredTokenPair(\n        tokenIn: Token,\n        tokenOut: Token,\n    ): { tIn: LinearPoolToken; tOut: LinearPoolToken } {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut) {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        return { tIn, tOut };\n    }\n}\n","import { MathSol, WAD } from '../../../utils/math';\nimport { Params } from './types';\n\nexport function _calcWrappedOutPerMainIn(\n    mainIn: bigint,\n    mainBalance: bigint,\n    params: Params,\n): bigint {\n    // Amount out, so we round down overall.\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = _toNominal(mainBalance + mainIn, params);\n\n    return afterNominalMain - previousNominalMain;\n}\n\nexport function _calcBptOutPerMainIn(\n    mainIn: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    // Amount out, so we round down overall.\n\n    if (bptSupply === 0n) {\n        return _toNominal(mainIn, params);\n    }\n\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = _toNominal(mainBalance + mainIn, params);\n    const deltaNominalMain = afterNominalMain - previousNominalMain;\n    const invariant = _calcInvariant(previousNominalMain, wrappedBalance);\n\n    return (bptSupply * deltaNominalMain) / invariant;\n}\n\nexport function _calcMainOutPerWrappedIn(\n    wrappedIn: bigint,\n    mainBalance: bigint,\n    params: Params,\n): bigint {\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = previousNominalMain - wrappedIn;\n    const newMainBalance = _fromNominal(afterNominalMain, params);\n\n    return mainBalance - newMainBalance;\n}\n\nexport function _calcBptOutPerWrappedIn(\n    wrappedIn: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    if (bptSupply === 0n) {\n        return wrappedIn;\n    }\n\n    const nominalMain = _toNominal(mainBalance, params);\n    const previousInvariant = _calcInvariant(nominalMain, wrappedBalance);\n    const newWrappedBalance = wrappedBalance + wrappedIn;\n    const newInvariant = _calcInvariant(nominalMain, newWrappedBalance);\n    const newBptBalance = (bptSupply * newInvariant) / previousInvariant;\n\n    return newBptBalance - bptSupply;\n}\n\nexport function _calcMainOutPerBptIn(\n    bptIn: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    // Amount out, so we round down overall.\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const invariant = _calcInvariant(previousNominalMain, wrappedBalance);\n    const deltaNominalMain = (invariant * bptIn) / bptSupply;\n    const afterNominalMain = previousNominalMain - deltaNominalMain;\n    const newMainBalance = _fromNominal(afterNominalMain, params);\n\n    return mainBalance - newMainBalance;\n}\n\nexport function _calcWrappedOutPerBptIn(\n    bptIn: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    const nominalMain = _toNominal(mainBalance, params);\n    const previousInvariant = _calcInvariant(nominalMain, wrappedBalance);\n    const newBptBalance = bptSupply - bptIn;\n    const newWrappedBalance =\n        (newBptBalance * previousInvariant) / bptSupply - nominalMain;\n\n    return wrappedBalance - newWrappedBalance;\n}\n\nexport function _calcMainInPerWrappedOut(\n    wrappedOut: bigint,\n    mainBalance: bigint,\n    params: Params,\n): bigint {\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = previousNominalMain + wrappedOut;\n    const newMainBalance = _fromNominal(afterNominalMain, params);\n\n    return newMainBalance - mainBalance;\n}\n\nexport function _calcMainInPerBptOut(\n    bptOut: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    if (bptSupply === 0n) {\n        return _fromNominal(bptOut, params);\n    }\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const invariant = _calcInvariant(previousNominalMain, wrappedBalance);\n    const deltaNominalMain = (invariant * bptOut) / bptSupply;\n    const afterNominalMain = previousNominalMain + deltaNominalMain;\n    const newMainBalance = _fromNominal(afterNominalMain, params);\n\n    return newMainBalance - mainBalance;\n}\n\nexport function _calcWrappedInPerMainOut(\n    mainOut: bigint,\n    mainBalance: bigint,\n    params: Params,\n): bigint {\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = _toNominal(mainBalance - mainOut, params);\n\n    return previousNominalMain - afterNominalMain;\n}\n\nexport function _calcWrappedInPerBptOut(\n    bptOut: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    if (bptSupply === 0n) {\n        return bptOut;\n    }\n\n    const nominalMain = _toNominal(mainBalance, params);\n    const previousInvariant = _calcInvariant(nominalMain, wrappedBalance);\n    const newBptBalance = bptSupply + bptOut;\n    const newWrappedBalance =\n        (newBptBalance * previousInvariant) / bptSupply - nominalMain;\n\n    return newWrappedBalance - wrappedBalance;\n}\n\nexport function _calcBptInPerWrappedOut(\n    wrappedOut: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    const nominalMain = _toNominal(mainBalance, params);\n    const previousInvariant = _calcInvariant(nominalMain, wrappedBalance);\n    const newWrappedBalance = wrappedBalance - wrappedOut;\n    const newInvariant = _calcInvariant(nominalMain, newWrappedBalance);\n    const newBptBalance = (bptSupply * newInvariant) / previousInvariant;\n\n    return bptSupply - newBptBalance;\n}\n\nexport function _calcBptInPerMainOut(\n    mainOut: bigint,\n    mainBalance: bigint,\n    wrappedBalance: bigint,\n    bptSupply: bigint,\n    params: Params,\n): bigint {\n    const previousNominalMain = _toNominal(mainBalance, params);\n    const afterNominalMain = _toNominal(mainBalance - mainOut, params);\n    const deltaNominalMain = previousNominalMain - afterNominalMain;\n    const invariant = _calcInvariant(previousNominalMain, wrappedBalance);\n\n    return (bptSupply * deltaNominalMain) / invariant;\n}\n\nfunction _calcInvariant(\n    nominalMainBalance: bigint,\n    wrappedBalance: bigint,\n): bigint {\n    return nominalMainBalance + wrappedBalance;\n}\n\nfunction _toNominal(real: bigint, params: Params): bigint {\n    // Fees are always rounded down: either direction would work but we need to be consistent, and rounding down\n    // uses less gas.\n    if (real < params.lowerTarget) {\n        const fees = MathSol.mulDownFixed(\n            params.lowerTarget - real,\n            params.fee,\n        );\n        return real - fees;\n    }\n    if (real <= params.upperTarget) {\n        return real;\n    }\n    const fees = MathSol.mulDownFixed(real - params.upperTarget, params.fee);\n    return real - fees;\n}\n\nfunction _fromNominal(nominal: bigint, params: Params): bigint {\n    // Since real = nominal + fees, rounding down fees is equivalent to rounding down real.\n    if (nominal < params.lowerTarget) {\n        return MathSol.divDownFixed(\n            nominal + MathSol.mulDownFixed(params.fee, params.lowerTarget),\n            WAD + params.fee,\n        );\n    }\n    if (nominal <= params.upperTarget) {\n        return nominal;\n    }\n    return MathSol.divDownFixed(\n        nominal - MathSol.mulDownFixed(params.fee, params.upperTarget),\n        WAD - params.fee,\n    );\n}\n","import { BasePool, BasePoolFactory } from '../index';\nimport { LinearPool } from './linearPool';\nimport { RawLinearPool, RawPool } from '../../../data/types';\n\nexport class LinearPoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType.includes('Linear');\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return LinearPool.fromRawPool(chainId, pool as RawLinearPool);\n    }\n}\n","import { Hex, parseEther, parseUnits } from 'viem';\nimport { PoolType, SwapKind } from '../../../types';\nimport { Token } from '../../token';\nimport { TokenAmount } from '../../tokenAmount';\nimport { BasePool } from '..';\nimport { RAY, getPoolAddress } from '../../../utils';\nimport { _calcInGivenOut, _calcOutGivenIn } from './fxMath';\nimport { RawFxPool } from '../../../data/types';\nimport { MathFx, parseFixedCurveParam } from './helpers';\nimport { FxPoolPairData } from './types';\nimport { FxPoolToken } from './fxPoolToken';\n\nconst isUSDC = (address: string): boolean => {\n    return (\n        address.toLowerCase() ===\n            '0x2791bca1f2de4661ed88a30c99a7a9449aa84174' ||\n        address.toLowerCase() === '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n    );\n};\n\nexport class FxPool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.Fx;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly alpha: bigint;\n    public readonly beta: bigint;\n    public readonly lambda: bigint;\n    public readonly delta: bigint;\n    public readonly epsilon: bigint;\n    public readonly tokens: FxPoolToken[];\n\n    private readonly tokenMap: Map<string, FxPoolToken>;\n\n    static fromRawPool(chainId: number, pool: RawFxPool): FxPool {\n        const poolTokens: FxPoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            if (!t.token.latestFXPrice) {\n                throw new Error('FX pool token does not have latestFXPrice');\n            }\n\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            poolTokens.push(\n                new FxPoolToken(\n                    token,\n                    tokenAmount.amount,\n                    t.token.latestFXPrice,\n                    t.token.fxOracleDecimals || 8,\n                    t.index,\n                ),\n            );\n        }\n\n        return new FxPool(\n            pool.id,\n            pool.poolTypeVersion,\n            parseEther(pool.swapFee),\n            parseFixedCurveParam(pool.alpha),\n            parseFixedCurveParam(pool.beta),\n            parseFixedCurveParam(pool.lambda),\n            parseUnits(pool.delta, 36),\n            parseFixedCurveParam(pool.epsilon),\n            poolTokens,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        swapFee: bigint,\n        alpha: bigint,\n        beta: bigint,\n        lambda: bigint,\n        delta: bigint,\n        epsilon: bigint,\n        tokens: FxPoolToken[],\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.swapFee = swapFee;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.lambda = lambda;\n        this.delta = delta;\n        this.epsilon = epsilon;\n        this.address = getPoolAddress(id);\n        this.tokens = tokens;\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix fx normalized liquidity calc\n        return tOut.amount;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const poolPairData = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n            swapAmount.amount,\n            SwapKind.GivenIn,\n        );\n        if (poolPairData.tIn === poolPairData.tOut) return poolPairData.tIn;\n\n        const amountOutNumeraire = _calcOutGivenIn(poolPairData);\n\n        const amountOutNumeraireLessFee = MathFx.mulDownFixed(\n            amountOutNumeraire,\n            RAY - this.epsilon,\n        );\n\n        const fxAmountOut = FxPoolToken.fromNumeraire(\n            poolPairData.tOut,\n            amountOutNumeraireLessFee,\n        );\n\n        const amountOut = TokenAmount.fromRawAmount(\n            fxAmountOut.token,\n            fxAmountOut.amount,\n        );\n\n        if (mutateBalances) {\n            poolPairData.tIn.increase(swapAmount.amount);\n            poolPairData.tOut.decrease(amountOut.amount);\n        }\n\n        return amountOut;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const poolPairData = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n            swapAmount.amount,\n            SwapKind.GivenOut,\n        );\n        if (poolPairData.tIn === poolPairData.tOut) return poolPairData.tOut;\n\n        const amountInNumeraire = _calcInGivenOut(poolPairData);\n\n        const amountInNumeraireWithFee = MathFx.mulDownFixed(\n            amountInNumeraire,\n            RAY + this.epsilon,\n        );\n\n        const fxAmountIn = FxPoolToken.fromNumeraire(\n            poolPairData.tIn,\n            amountInNumeraireWithFee,\n        );\n\n        const amountIn = TokenAmount.fromRawAmount(\n            fxAmountIn.token,\n            fxAmountIn.amount,\n        );\n\n        if (mutateBalances) {\n            poolPairData.tIn.decrease(amountIn.amount);\n            poolPairData.tOut.increase(swapAmount.amount);\n        }\n\n        return amountIn;\n    }\n\n    /**\n     * Fx pool logic has an alpha region where it halts swaps.\n     * maxLimit  = [(1 + alpha) * oGLiq * 0.5] - token liquidity\n     */\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const { _oGLiq, tIn, tOut } = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n            0n,\n            swapKind,\n        );\n        const maxLimit = MathFx.mulDownFixed(this.alpha + RAY, _oGLiq) / 2n; // TODO: double check if RAY is indeed 1e36 or 1e27 - google says it's 1e27\n        if (swapKind === SwapKind.GivenIn) {\n            const maxAmount = maxLimit - tIn.numeraire;\n            return FxPoolToken.fromNumeraire(tIn, maxAmount).amount;\n        }\n        const maxAmount = maxLimit - tOut.numeraire;\n        return FxPoolToken.fromNumeraire(tOut, maxAmount).amount;\n    }\n\n    public getPoolPairData(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: bigint,\n        swapKind: SwapKind,\n    ): FxPoolPairData {\n        const tIn = this.tokenMap.get(tokenIn.address);\n        const tOut = this.tokenMap.get(tokenOut.address);\n\n        if (!tIn || !tOut) {\n            throw new Error('Token not found');\n        }\n\n        const usdcToken = isUSDC(tokenIn.address) ? tIn : tOut;\n        const baseToken = isUSDC(tokenIn.address) ? tOut : tIn;\n\n        const givenToken =\n            swapKind === SwapKind.GivenIn\n                ? new FxPoolToken(\n                      tIn.token,\n                      swapAmount,\n                      tIn.latestFXPrice,\n                      tIn.fxOracleDecimals,\n                      tIn.index,\n                  )\n                : new FxPoolToken(\n                      tOut.token,\n                      swapAmount,\n                      tOut.latestFXPrice,\n                      tOut.fxOracleDecimals,\n                      tOut.index,\n                  );\n\n        return {\n            tIn,\n            tOut,\n            alpha: this.alpha,\n            beta: this.beta,\n            delta: this.delta,\n            lambda: this.lambda,\n            _oGLiq: baseToken.numeraire + usdcToken.numeraire,\n            _nGLiq: baseToken.numeraire + usdcToken.numeraire,\n            _oBals: [usdcToken.numeraire, baseToken.numeraire],\n            _nBals: isUSDC(tokenIn.address)\n                ? [\n                      usdcToken.numeraire + givenToken.numeraire,\n                      baseToken.numeraire - givenToken.numeraire,\n                  ]\n                : [\n                      usdcToken.numeraire - givenToken.numeraire,\n                      baseToken.numeraire + givenToken.numeraire,\n                  ],\n            givenToken,\n            swapKind,\n        };\n    }\n}\n","import { parseUnits } from 'viem';\nimport { RAY } from '../../../utils/math';\nimport { FxPoolPairData } from './types';\nimport { SwapKind } from '../../../types';\n\nexport const CURVEMATH_MAX_DIFF = parseUnits('-0.000001000000000000024', 36);\nexport const ONE_TO_THE_THIRTEEN_NUM = parseUnits('10000000000000', 36);\nconst CURVEMATH_MAX = parseUnits('0.25', 36);\n\nexport enum CurveMathRevert {\n    LowerHalt = 'CurveMath/lower-halt',\n    UpperHalt = 'CurveMath/upper-halt',\n    SwapInvariantViolation = 'CurveMath/swap-invariant-violation',\n    SwapConvergenceFailed = 'CurveMath/swap-convergence-failed',\n    CannotSwap = 'CannotSwap',\n}\n\nexport function _calcOutGivenIn(poolPairData: FxPoolPairData): bigint {\n    const _amt = calculateTrade(poolPairData);\n    if (_amt === undefined) throw new Error(CurveMathRevert.CannotSwap);\n    let amountOut = _amt[0];\n    amountOut = amountOut < 0n ? amountOut * -1n : amountOut;\n    return amountOut;\n}\n\nexport function _calcInGivenOut(poolPairData: FxPoolPairData): bigint {\n    const _amt = calculateTrade(poolPairData);\n    if (_amt === undefined) throw new Error(CurveMathRevert.CannotSwap);\n    let amountIn = _amt[0];\n    amountIn = amountIn < 0n ? amountIn * -1n : amountIn;\n    return amountIn;\n}\n\n// Curve Math\n// calculations are from CurveMath.sol\nconst calculateMicroFee = (\n    _bal: bigint,\n    _ideal: bigint,\n    _beta: bigint,\n    _delta: bigint,\n): bigint => {\n    let _threshold: bigint;\n    let _feeMargin: bigint;\n    let fee_ = 0n;\n\n    if (_bal < _ideal) {\n        _threshold = (_ideal * (RAY - _beta)) / RAY;\n\n        if (_bal < _threshold) {\n            _feeMargin = _threshold - _bal;\n            fee_ = (_feeMargin * RAY) / _ideal;\n            fee_ = (fee_ * _delta) / RAY;\n\n            if (fee_ > CURVEMATH_MAX) {\n                fee_ = CURVEMATH_MAX;\n            }\n\n            fee_ = (fee_ * _feeMargin) / RAY;\n        } else {\n            fee_ = 0n;\n        }\n    } else {\n        _threshold = (_ideal * (_beta + RAY)) / RAY;\n\n        if (_bal > _threshold) {\n            _feeMargin = _bal - _threshold;\n\n            fee_ = (_feeMargin * RAY) / _ideal;\n            fee_ = (fee_ * _delta) / RAY;\n\n            if (fee_ > CURVEMATH_MAX) fee_ = CURVEMATH_MAX;\n\n            fee_ = (fee_ * _feeMargin) / RAY;\n        } else {\n            fee_ = 0n;\n        }\n    }\n\n    return fee_;\n};\n\nconst calculateFee = (\n    _gLiq: bigint,\n    _bals: bigint[],\n    _beta: bigint,\n    _delta: bigint,\n    _weights: bigint[],\n): bigint => {\n    const _length = _bals.length;\n    let psi = 0n;\n\n    for (let i = 0; i < _length; i++) {\n        const _ideal = (_gLiq * _weights[i]) / RAY;\n\n        // keep away from wei values like how the contract do it\n        psi = psi + calculateMicroFee(_bals[i], _ideal, _beta, _delta);\n    }\n\n    return psi;\n};\n\n// return outputAmount and ngliq\nexport const calculateTrade = (\n    poolPairData: FxPoolPairData,\n): [bigint, bigint] => {\n    const {\n        alpha,\n        beta,\n        delta,\n        lambda,\n        _oGLiq,\n        _nGLiq,\n        _oBals,\n        _nBals,\n        givenToken,\n        swapKind,\n    } = poolPairData;\n\n    const weights_: bigint[] = [RAY / 2n, RAY / 2n]; // const for now since all weights are 0.5\n    const omega = calculateFee(_oGLiq, _oBals, beta, delta, weights_);\n\n    const _outputIndex = givenToken.index === 0 ? 1 : 0;\n    const _inputAmt =\n        swapKind === SwapKind.GivenIn\n            ? givenToken.numeraire\n            : givenToken.numeraire * -1n;\n\n    let outputAmt_ = _inputAmt * -1n;\n    let _nGLiq_ = _nGLiq;\n    let psi: bigint;\n\n    for (let i = 0; i < 32; i++) {\n        psi = calculateFee(_nGLiq_, _nBals, beta, delta, weights_);\n\n        const prevAmount = outputAmt_;\n\n        outputAmt_ =\n            omega < psi\n                ? (_inputAmt + (omega - psi)) * -1n\n                : (_inputAmt + (lambda * (omega - psi)) / RAY) * -1n;\n\n        if (\n            (outputAmt_ * RAY) / ONE_TO_THE_THIRTEEN_NUM ===\n            (prevAmount * RAY) / ONE_TO_THE_THIRTEEN_NUM\n        ) {\n            _nGLiq_ = _oGLiq + _inputAmt + outputAmt_;\n\n            _nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\n            // throws error already, removed if statement\n            enforceHalts(_oGLiq, _nGLiq_, _oBals, _nBals, weights_, alpha);\n            enforceSwapInvariant(_oGLiq, omega, _nGLiq_, psi);\n            return [outputAmt_, _nGLiq_];\n        }\n        _nGLiq_ = _oGLiq + _inputAmt + outputAmt_;\n        _nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\n    }\n\n    throw new Error(CurveMathRevert.SwapConvergenceFailed);\n};\n\n// invariant enforcement\nconst enforceHalts = (\n    _oGLiq: bigint,\n    _nGLiq: bigint,\n    _oBals: bigint[],\n    _nBals: bigint[],\n    _weights: bigint[],\n    alpha: bigint,\n): boolean => {\n    const _length = _nBals.length;\n\n    for (let i = 0; i < _length; i++) {\n        const _nIdeal = (_nGLiq * _weights[i]) / RAY;\n\n        if (_nBals[i] > _nIdeal) {\n            const _upperAlpha = alpha + RAY;\n\n            const _nHalt = (_nIdeal * _upperAlpha) / RAY;\n\n            if (_nBals[i] > _nHalt) {\n                const _oHalt =\n                    (((_oGLiq * _weights[i]) / RAY) * _upperAlpha) / RAY;\n\n                if (_oBals[i] < _oHalt) {\n                    throw new Error(CurveMathRevert.UpperHalt);\n                }\n                if (_nBals[i] - _nHalt > _oBals[i] - _oHalt) {\n                    throw new Error(CurveMathRevert.UpperHalt);\n                }\n            }\n        } else {\n            const _lowerAlpha = RAY - alpha;\n\n            const _nHalt = (_nIdeal * _lowerAlpha) / RAY;\n\n            if (_nBals[i] < _nHalt) {\n                let _oHalt = (_oGLiq * _weights[i]) / RAY;\n                _oHalt = (_oHalt * _lowerAlpha) / RAY;\n\n                if (_oBals[i] > _oHalt) {\n                    throw new Error(CurveMathRevert.LowerHalt);\n                }\n                if (_nHalt - _nBals[i] > _oHalt - _oBals[i]) {\n                    throw new Error(CurveMathRevert.LowerHalt);\n                }\n            }\n        }\n    }\n    return true;\n};\n\nconst enforceSwapInvariant = (\n    _oGLiq: bigint,\n    _omega: bigint,\n    _nGLiq: bigint,\n    _psi: bigint,\n): boolean => {\n    const _nextUtil = _nGLiq - _psi;\n\n    const _prevUtil = _oGLiq - _omega;\n\n    const _diff = _nextUtil - _prevUtil;\n\n    // from int128 private constant MAX_DIFF = -0x10C6F7A0B5EE converted to plain decimals\n    if (_diff > 0 || _diff >= CURVEMATH_MAX_DIFF) {\n        return true;\n    }\n    throw new Error(CurveMathRevert.SwapInvariantViolation);\n};\n","import { parseUnits } from 'viem';\nimport { HumanAmount } from '../../../data/types';\n\nexport class MathFx {\n    static mulDownFixed(a: bigint, b: bigint, decimals = 36): bigint {\n        const product = a * b;\n        return product / 10n ** BigInt(decimals);\n    }\n\n    static mulUpFixed(a: bigint, b: bigint, decimals = 36): bigint {\n        const product = a * b;\n\n        if (product === 0n) {\n            return 0n;\n        }\n        return (product - 1n) / 10n ** BigInt(decimals) + 1n;\n    }\n\n    static divDownFixed(a: bigint, b: bigint, decimals = 36): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * 10n ** BigInt(decimals);\n        return aInflated / b;\n    }\n\n    static divUpFixed(a: bigint, b: bigint, decimals = 36): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * 10n ** BigInt(decimals);\n        return (aInflated - 1n) / b + 1n;\n    }\n}\n\n/**\n * Replicates the conversion operation to 64.64 fixed point numbers (ABDK library)\n * that occurs in the smart contract. This is done to replicate the loss of precision\n * that the fixed point number conversion exhibits.\n *\n * For example:\n *   - `uint256(0.0005 * 1e18).divu(1e18)` is 9223372036854775 which is 0.000499999999999999956\n *   - `uint256(0.0005 * 1e18 + 1).divu(1e18)` is 9223372036854794 which is 0.00050000000000000099\n *\n * Most but one of the parameters (`delta`) use the formula `uint256(PARAM * 1e18 + 1).divu(1e18)`\n * when converting to fixed point precision. This is the value that is used in calculations\n * in the smart contract.\n *\n * @param param any of the pool's curve parameters like alpha, beta, lambda, delta, epsilon\n * @returns bigint with the same loss of precision as the smart contract\n */\nexport const parseFixedCurveParam = (param: HumanAmount): bigint => {\n    const param64 =\n        ((((BigInt(parseUnits(param, 18)) + 1n) << 64n) / 10n ** 18n) *\n            10n ** 36n) >>\n        64n;\n    const truncatedParam64 = (param64 / 10n ** 15n + 1n) * 10n ** 15n;\n    return truncatedParam64;\n};\n","import { parseUnits } from 'viem';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { WAD } from '../../../utils/math';\nimport { _calcInGivenOut, _calcOutGivenIn } from './fxMath';\nimport { HumanAmount } from '../../../data/types';\nimport { MathFx } from './helpers';\n\nexport class FxPoolToken extends TokenAmount {\n    public readonly index: number;\n    public readonly latestFXPrice: HumanAmount;\n    public readonly fxOracleDecimals: number;\n    public numeraire: bigint; // in 36 decimals\n    private readonly scalar36 = this.scalar * WAD;\n\n    public constructor(\n        token: Token,\n        amount: BigintIsh,\n        latestFXPrice: HumanAmount,\n        fxOracleDecimals: number,\n        index: number,\n    ) {\n        super(token, amount);\n        this.latestFXPrice = latestFXPrice;\n        this.fxOracleDecimals = fxOracleDecimals;\n        const truncatedNumeraire = MathFx.mulDownFixed(\n            this.amount,\n            parseUnits(this.latestFXPrice, this.fxOracleDecimals),\n            this.fxOracleDecimals,\n        );\n        this.numeraire = truncatedNumeraire * this.scalar36;\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = this.amount * this.scalar;\n        const truncatedNumeraire = MathFx.mulDownFixed(\n            this.amount,\n            parseUnits(this.latestFXPrice, this.fxOracleDecimals),\n            this.fxOracleDecimals,\n        );\n        this.numeraire = truncatedNumeraire * this.scalar36;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = this.amount * this.scalar;\n        const truncatedNumeraire = MathFx.mulDownFixed(\n            this.amount,\n            parseUnits(this.latestFXPrice, this.fxOracleDecimals),\n            this.fxOracleDecimals,\n        );\n        this.numeraire = truncatedNumeraire * this.scalar36;\n        return this;\n    }\n\n    public static fromNumeraire(\n        poolToken: FxPoolToken,\n        numeraire: BigintIsh,\n        divUp?: boolean,\n    ): FxPoolToken {\n        const truncatedNumeraire = BigInt(numeraire) / poolToken.scalar36; // loss of precision required to match SC implementation\n        const amount = divUp\n            ? MathFx.divUpFixed(\n                  BigInt(truncatedNumeraire),\n                  parseUnits(\n                      poolToken.latestFXPrice,\n                      poolToken.fxOracleDecimals,\n                  ),\n                  poolToken.fxOracleDecimals,\n              )\n            : MathFx.divDownFixed(\n                  BigInt(truncatedNumeraire),\n                  parseUnits(\n                      poolToken.latestFXPrice,\n                      poolToken.fxOracleDecimals,\n                  ),\n                  poolToken.fxOracleDecimals,\n              );\n        return new FxPoolToken(\n            poolToken.token,\n            amount,\n            poolToken.latestFXPrice,\n            poolToken.fxOracleDecimals,\n            poolToken.index,\n        );\n    }\n}\n","import { BasePool, BasePoolFactory } from '..';\nimport { FxPool } from './fxPool';\nimport { RawFxPool, RawPool } from '../../../data/types';\n\nexport class FxPoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType.includes('FX');\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return FxPool.fromRawPool(chainId, pool as RawFxPool);\n    }\n}\n","import { Hex, parseEther } from 'viem';\n\nimport {\n    _calcInGivenOut,\n    _calcOutGivenIn,\n    _calculateInvariant,\n    _findVirtualParams,\n} from './gyro2Math';\nimport { BasePool } from '..';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { RawGyro2Pool } from '../../../data/types';\nimport { PoolType, SwapKind } from '../../../types';\nimport { getPoolAddress, MathSol, WAD } from '../../../utils';\nimport { SWAP_LIMIT_FACTOR } from '../../../utils/gyroHelpers/math';\n\nexport class Gyro2PoolToken extends TokenAmount {\n    public readonly index: number;\n\n    public constructor(token: Token, amount: BigintIsh, index: number) {\n        super(token, amount);\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n}\n\nexport class Gyro2Pool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.Gyro2;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly tokens: Gyro2PoolToken[];\n\n    private readonly sqrtAlpha: bigint;\n    private readonly sqrtBeta: bigint;\n    private readonly tokenMap: Map<string, Gyro2PoolToken>;\n\n    static fromRawPool(chainId: number, pool: RawGyro2Pool): Gyro2Pool {\n        const poolTokens: Gyro2PoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            poolTokens.push(\n                new Gyro2PoolToken(token, tokenAmount.amount, t.index),\n            );\n        }\n\n        return new Gyro2Pool(\n            pool.id,\n            pool.poolTypeVersion,\n            parseEther(pool.swapFee),\n            parseEther(pool.sqrtAlpha),\n            parseEther(pool.sqrtBeta),\n            poolTokens,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        swapFee: bigint,\n        sqrtAlpha: bigint,\n        sqrtBeta: bigint,\n        tokens: Gyro2PoolToken[],\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.swapFee = swapFee;\n        this.sqrtAlpha = sqrtAlpha;\n        this.sqrtBeta = sqrtBeta;\n        this.address = getPoolAddress(id);\n        this.tokens = tokens;\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix gyro normalized liquidity calc\n        return tOut.amount;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut, sqrtAlpha, sqrtBeta } = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n        );\n        const invariant = _calculateInvariant(\n            [tIn.scale18, tOut.scale18],\n            sqrtAlpha,\n            sqrtBeta,\n        );\n        const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n            invariant,\n            sqrtAlpha,\n            sqrtBeta,\n        );\n        const inAmountLessFee = this.subtractSwapFeeAmount(swapAmount);\n\n        const outAmountScale18 = _calcOutGivenIn(\n            tIn.scale18,\n            tOut.scale18,\n            inAmountLessFee.scale18,\n            virtualParamIn,\n            virtualParamOut,\n        );\n\n        if (outAmountScale18 > tOut.scale18)\n            throw new Error('ASSET_BOUNDS_EXCEEDED');\n\n        const outAmount = TokenAmount.fromScale18Amount(\n            tokenOut,\n            outAmountScale18,\n        );\n\n        if (mutateBalances) {\n            tIn.increase(swapAmount.amount);\n            tOut.decrease(outAmount.amount);\n        }\n\n        return outAmount;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut, sqrtAlpha, sqrtBeta } = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n        );\n\n        if (swapAmount.scale18 > tOut.scale18)\n            throw new Error('ASSET_BOUNDS_EXCEEDED');\n\n        const invariant = _calculateInvariant(\n            [tIn.scale18, tOut.scale18],\n            sqrtAlpha,\n            sqrtBeta,\n        );\n        const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n            invariant,\n            sqrtAlpha,\n            sqrtBeta,\n        );\n        const inAmountLessFee = _calcInGivenOut(\n            tIn.scale18,\n            tOut.scale18,\n            swapAmount.scale18,\n            virtualParamIn,\n            virtualParamOut,\n        );\n        const inAmount = this.addSwapFeeAmount(\n            TokenAmount.fromScale18Amount(tokenIn, inAmountLessFee),\n        );\n\n        if (mutateBalances) {\n            tIn.decrease(inAmount.amount);\n            tOut.increase(swapAmount.amount);\n        }\n\n        return inAmount;\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const { tIn, tOut, sqrtAlpha, sqrtBeta } = this.getPoolPairData(\n            tokenIn,\n            tokenOut,\n        );\n        if (swapKind === SwapKind.GivenIn) {\n            const invariant = _calculateInvariant(\n                [tIn.scale18, tOut.scale18],\n                sqrtAlpha,\n                sqrtBeta,\n            );\n            const maxAmountInAssetInPool = MathSol.mulUpFixed(\n                invariant,\n                MathSol.divDownFixed(WAD, sqrtAlpha) -\n                    MathSol.divDownFixed(WAD, sqrtBeta),\n            ); // x+ = L * (1/sqrtAlpha - 1/sqrtBeta)\n            const limitAmountIn = maxAmountInAssetInPool - tIn.scale18;\n            const limitAmountInPlusSwapFee = MathSol.divDownFixed(\n                limitAmountIn,\n                WAD - this.swapFee,\n            );\n            return MathSol.mulDownFixed(\n                limitAmountInPlusSwapFee,\n                SWAP_LIMIT_FACTOR,\n            );\n        }\n        return MathSol.mulDownFixed(tOut.amount, SWAP_LIMIT_FACTOR);\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    public getPoolPairData(\n        tokenIn: Token,\n        tokenOut: Token,\n    ): {\n        tIn: Gyro2PoolToken;\n        tOut: Gyro2PoolToken;\n        sqrtAlpha: bigint;\n        sqrtBeta: bigint;\n    } {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut) {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        const sqrtAlpha =\n            tIn.index === 0\n                ? this.sqrtAlpha\n                : MathSol.divDownFixed(WAD, this.sqrtBeta);\n        const sqrtBeta =\n            tIn.index === 0\n                ? this.sqrtBeta\n                : MathSol.divDownFixed(WAD, this.sqrtAlpha);\n\n        return { tIn, tOut, sqrtAlpha, sqrtBeta };\n    }\n}\n","import { WAD } from '../math';\n\n// SQRT constants\nexport const SQRT_1E_NEG_1 = 316227766016837933n;\nexport const SQRT_1E_NEG_3 = 31622776601683793n;\nexport const SQRT_1E_NEG_5 = 3162277660168379n;\nexport const SQRT_1E_NEG_7 = 316227766016837n;\nexport const SQRT_1E_NEG_9 = 31622776601683n;\nexport const SQRT_1E_NEG_11 = 3162277660168n;\nexport const SQRT_1E_NEG_13 = 316227766016n;\nexport const SQRT_1E_NEG_15 = 31622776601n;\nexport const SQRT_1E_NEG_17 = 3162277660n;\n\n// High precision\nexport const ONE_XP = 10n ** 38n; // 38 decimal places\n\n// Small number to prevent rounding errors\nexport const SMALL = 10n ** 8n; // 1e-10 in normal precision\n\n// Swap Limit factor\nexport const SWAP_LIMIT_FACTOR = 999999000000000000n;\n\n/////////\n/// ARITHMETIC HELPERS\n/////////\nexport class MathGyro {\n    static mulUp(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        return (product - 1n) / WAD + 1n;\n    }\n\n    static divUp(a: bigint, b: bigint): bigint {\n        const aInflated = a * WAD;\n        return (aInflated - 1n) / b + 1n;\n    }\n\n    static mulDown(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        return product / WAD;\n    }\n\n    static divDown(a: bigint, b: bigint): bigint {\n        const aInflated = a * WAD;\n        return aInflated / b;\n    }\n\n    static mulXpU(a: bigint, b: bigint): bigint {\n        return (a * b) / ONE_XP;\n    }\n\n    static divXpU(a: bigint, b: bigint): bigint {\n        if (b === 0n) throw new Error('ZERO DIVISION');\n        return (a * ONE_XP) / b;\n    }\n\n    static mulDownMagU(a: bigint, b: bigint): bigint {\n        return (a * b) / WAD;\n    }\n\n    static divDownMagU(a: bigint, b: bigint): bigint {\n        if (b === 0n) throw new Error('ZERO DIVISION');\n        return (a * WAD) / b;\n    }\n\n    static mulUpMagU(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        if (product > 0n) return (product - 1n) / WAD + 1n;\n        if (product < 0n) return (product + 1n) / WAD - 1n;\n        return 0n;\n    }\n\n    static divUpMagU(a: bigint, b: bigint): bigint {\n        if (b === 0n) throw new Error('ZERO DIVISION');\n        if (a === 0n) return 0n;\n        let _b = b;\n        let _a = a;\n        if (b < 0n) {\n            _b = b * -1n;\n            _a = a * -1n;\n        }\n        return _a > 0n\n            ? (_a * WAD - 1n) / _b + 1n\n            : (_a * WAD + 1n) / (_b - 1n);\n    }\n\n    static mulUpXpToNpU(a: bigint, b: bigint): bigint {\n        const TenPower19 = 10n ** 19n;\n        const b1 = b / TenPower19;\n        const b2 = b < 0n ? ((b * -1n) % TenPower19) * -1n : b % TenPower19;\n        const prod1 = a * b1;\n        const prod2 = a * b2;\n        return prod1 <= 0n && prod2 <= 0n\n            ? (prod1 + prod2 / TenPower19) / TenPower19\n            : (prod1 + prod2 / TenPower19 - 1n) / TenPower19 + 1n;\n    }\n\n    static mulDownXpToNpU(a: bigint, b: bigint): bigint {\n        const TenPower19 = 10n ** 19n;\n        const b1 = b / TenPower19;\n        const b2 = b < 0n ? ((b * -1n) % TenPower19) * -1n : b % TenPower19;\n        const prod1 = a * b1;\n        const prod2 = a * b2;\n        return prod1 >= 0n && prod2 >= 0n\n            ? (prod1 + prod2 / TenPower19) / TenPower19\n            : (prod1 + prod2 / TenPower19 + 1n) / TenPower19 - 1n;\n    }\n\n    /////////\n    /// SQUARE ROOT\n    /////////\n\n    static sqrt(input: bigint, tolerance: bigint): bigint {\n        if (input === 0n) {\n            return 0n;\n        }\n        let guess = MathGyro.makeInitialGuess(input);\n\n        // 7 iterations\n        for (let i = 0; i < 7; i++) {\n            guess = (guess + (input * WAD) / guess) / 2n;\n        }\n\n        // Check square is more or less correct (in some epsilon range)\n        const guessSquared = (guess * guess) / WAD;\n        if (\n            !(\n                guessSquared <= input + MathGyro.mulUp(guess, tolerance) &&\n                guessSquared >= input - MathGyro.mulUp(guess, tolerance)\n            )\n        )\n            throw new Error('GyroEPool: sqrt failed');\n\n        return guess;\n    }\n\n    static makeInitialGuess(input: bigint) {\n        if (input > WAD) {\n            return 2n ** MathGyro.intLog2Halved(input / WAD) * WAD;\n        }\n        if (input <= 10n) {\n            return SQRT_1E_NEG_17;\n        }\n        if (input <= 100n) {\n            return 10000000000n;\n        }\n        if (input <= 1000n) {\n            return SQRT_1E_NEG_15;\n        }\n        if (input <= 10000n) {\n            return 100000000000n;\n        }\n        if (input <= 100000n) {\n            return SQRT_1E_NEG_13;\n        }\n        if (input <= 1000000n) {\n            return 1000000000000n;\n        }\n        if (input <= 10000000n) {\n            return SQRT_1E_NEG_11;\n        }\n        if (input <= 100000000n) {\n            return 10000000000000n;\n        }\n        if (input <= 1000000000n) {\n            return SQRT_1E_NEG_9;\n        }\n        if (input <= 10000000000n) {\n            return 100000000000000n;\n        }\n        if (input <= 100000000000n) {\n            return SQRT_1E_NEG_7;\n        }\n        if (input <= 1000000000000n) {\n            return 1000000000000000n;\n        }\n        if (input <= 10000000000000n) {\n            return SQRT_1E_NEG_5;\n        }\n        if (input <= 100000000000000n) {\n            return 10000000000000000n;\n        }\n        if (input <= 1000000000000000n) {\n            return SQRT_1E_NEG_3;\n        }\n        if (input <= 10000000000000000n) {\n            return 100000000000000000n;\n        }\n        if (input <= 100000000000000000n) {\n            return SQRT_1E_NEG_1;\n        }\n        return input;\n    }\n\n    static intLog2Halved(x: bigint) {\n        let n = 0n;\n        let _x = x;\n\n        for (let i = 128n; i >= 2n; i = i / 2n) {\n            const factor = 2n ** i;\n            if (_x >= factor) {\n                _x = _x / factor;\n                n += i / 2n;\n            }\n        }\n\n        return n;\n    }\n}\n","import { FOUR_WAD, MathSol, TWO_WAD, WAD } from '../../../utils';\nimport { MathGyro } from '../../../utils/gyroHelpers/math';\n\nexport function _calcOutGivenIn(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountIn: bigint,\n    virtualParamIn: bigint,\n    virtualParamOut: bigint,\n): bigint {\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // very slightly larger than 3e-18.\n    const virtInOver = balanceIn + MathSol.mulUpFixed(virtualParamIn, WAD + 2n);\n    const virtOutUnder =\n        balanceOut + MathSol.mulDownFixed(virtualParamOut, WAD - 1n);\n\n    const amountOut = MathSol.divDownFixed(\n        MathSol.mulDownFixed(virtOutUnder, amountIn),\n        virtInOver + amountIn,\n    );\n\n    return amountOut;\n}\n\nexport function _calcInGivenOut(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountOut: bigint,\n    virtualParamIn: bigint,\n    virtualParamOut: bigint,\n): bigint {\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // very slightly larger than 3e-18.\n    const virtInOver = balanceIn + MathSol.mulUpFixed(virtualParamIn, WAD + 2n);\n    const virtOutUnder =\n        balanceOut + MathSol.mulDownFixed(virtualParamOut, WAD - 1n);\n\n    const amountIn = MathSol.divUpFixed(\n        MathSol.mulUpFixed(virtInOver, amountOut),\n        virtOutUnder - amountOut,\n    );\n\n    return amountIn;\n}\n\nexport function _findVirtualParams(\n    invariant: bigint,\n    sqrtAlpha: bigint,\n    sqrtBeta: bigint,\n): [bigint, bigint] {\n    return [\n        MathSol.divDownFixed(invariant, sqrtBeta),\n        MathSol.mulDownFixed(invariant, sqrtAlpha),\n    ];\n}\n\nexport function _calculateInvariant(\n    balances: bigint[], // balances\n    sqrtAlpha: bigint,\n    sqrtBeta: bigint,\n): bigint {\n    const [a, mb, bSquare, mc] = _calculateQuadraticTerms(\n        balances,\n        sqrtAlpha,\n        sqrtBeta,\n    );\n\n    const invariant = _calculateQuadratic(a, mb, bSquare, mc);\n\n    return invariant;\n}\n\nexport function _calculateQuadraticTerms(\n    balances: bigint[],\n    sqrtAlpha: bigint,\n    sqrtBeta: bigint,\n): [bigint, bigint, bigint, bigint] {\n    const a = WAD - MathSol.divDownFixed(sqrtAlpha, sqrtBeta);\n    const bterm0 = MathSol.divDownFixed(balances[1], sqrtBeta);\n    const bterm1 = MathSol.mulDownFixed(balances[0], sqrtAlpha);\n    const mb = bterm0 + bterm1;\n    const mc = MathSol.mulDownFixed(balances[0], balances[1]);\n\n    // For better fixed point precision, calculate in expanded form w/ re-ordering of multiplications\n    // b^2 = x^2 * alpha + x*y*2*sqrt(alpha/beta) + y^2 / beta\n    let bSquare = MathSol.mulDownFixed(\n        MathSol.mulDownFixed(\n            MathSol.mulDownFixed(balances[0], balances[0]),\n            sqrtAlpha,\n        ),\n        sqrtAlpha,\n    );\n    const bSq2 = MathSol.divDownFixed(\n        MathSol.mulDownFixed(\n            MathSol.mulDownFixed(\n                MathSol.mulDownFixed(balances[0], balances[1]),\n                TWO_WAD,\n            ),\n            sqrtAlpha,\n        ),\n        sqrtBeta,\n    );\n\n    const bSq3 = MathSol.divDownFixed(\n        MathSol.mulDownFixed(balances[1], balances[1]),\n        MathSol.mulUpFixed(sqrtBeta, sqrtBeta),\n    );\n\n    bSquare = bSquare + bSq2 + bSq3;\n\n    return [a, mb, bSquare, mc];\n}\n\nexport function _calculateQuadratic(\n    a: bigint,\n    mb: bigint,\n    bSquare: bigint,\n    mc: bigint,\n): bigint {\n    const denominator = MathSol.mulUpFixed(a, TWO_WAD);\n    // order multiplications for fixed point precision\n    const addTerm = MathSol.mulDownFixed(MathSol.mulDownFixed(mc, FOUR_WAD), a);\n    // The minus sign in the radicand cancels out in this special case, so we add\n    const radicand = bSquare + addTerm;\n    const sqrResult = MathGyro.sqrt(radicand, 5n);\n    // The minus sign in the numerator cancels out in this special case\n    const numerator = mb + sqrResult;\n    const invariant = MathSol.divDownFixed(numerator, denominator);\n\n    return invariant;\n}\n","import { Gyro2Pool } from './gyro2Pool';\nimport { BasePool, BasePoolFactory } from '../index';\nimport { RawGyro2Pool, RawPool } from '../../../data/types';\n\nexport class Gyro2PoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType.includes('Gyro2');\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return Gyro2Pool.fromRawPool(chainId, pool as RawGyro2Pool);\n    }\n}\n","import { Hex, parseEther } from 'viem';\n\nimport {\n    _calcInGivenOut,\n    _calcOutGivenIn,\n    _calculateInvariant,\n} from './gyro3Math';\nimport { BasePool } from '..';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { RawGyro3Pool } from '../../../data/types';\nimport { PoolType, SwapKind } from '../../../types';\nimport { getPoolAddress, MathSol, WAD } from '../../../utils';\nimport { MathGyro, SWAP_LIMIT_FACTOR } from '../../../utils/gyroHelpers/math';\n\nexport class Gyro3PoolToken extends TokenAmount {\n    public readonly index: number;\n\n    public constructor(token: Token, amount: BigintIsh, index: number) {\n        super(token, amount);\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = this.amount * this.scalar;\n        return this;\n    }\n}\n\nexport class Gyro3Pool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.Gyro2;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly tokens: Gyro3PoolToken[];\n\n    private readonly root3Alpha: bigint;\n    private readonly tokenMap: Map<string, Gyro3PoolToken>;\n\n    static fromRawPool(chainId: number, pool: RawGyro3Pool): Gyro3Pool {\n        const poolTokens: Gyro3PoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n\n            poolTokens.push(\n                new Gyro3PoolToken(token, tokenAmount.amount, t.index),\n            );\n        }\n\n        return new Gyro3Pool(\n            pool.id,\n            pool.poolTypeVersion,\n            parseEther(pool.swapFee),\n            parseEther(pool.root3Alpha),\n            poolTokens,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        swapFee: bigint,\n        root3Alpha: bigint,\n        tokens: Gyro3PoolToken[],\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.swapFee = swapFee;\n        this.root3Alpha = root3Alpha;\n        this.address = getPoolAddress(id);\n        this.tokens = tokens;\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix gyro normalized liquidity calc\n        return tOut.amount;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut, tertiary } = this.getPoolPairData(tokenIn, tokenOut);\n        const invariant = _calculateInvariant(\n            [tIn.scale18, tOut.scale18, tertiary.scale18],\n            this.root3Alpha,\n        );\n        const virtualOffsetInOut = MathGyro.mulDown(invariant, this.root3Alpha);\n        const inAmountLessFee = this.subtractSwapFeeAmount(swapAmount);\n\n        const outAmountScale18 = _calcOutGivenIn(\n            tIn.scale18,\n            tOut.scale18,\n            inAmountLessFee.scale18,\n            virtualOffsetInOut,\n        );\n\n        if (outAmountScale18 > tOut.scale18)\n            throw new Error('ASSET_BOUNDS_EXCEEDED');\n\n        const outAmount = TokenAmount.fromScale18Amount(\n            tokenOut,\n            outAmountScale18,\n        );\n\n        if (mutateBalances) {\n            tIn.increase(swapAmount.amount);\n            tOut.decrease(outAmount.amount);\n        }\n\n        return outAmount;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut, tertiary } = this.getPoolPairData(tokenIn, tokenOut);\n\n        if (swapAmount.scale18 > tOut.scale18)\n            throw new Error('ASSET_BOUNDS_EXCEEDED');\n\n        const invariant = _calculateInvariant(\n            [tIn.scale18, tOut.scale18, tertiary.scale18],\n            this.root3Alpha,\n        );\n\n        const virtualOffsetInOut = MathGyro.mulDown(invariant, this.root3Alpha);\n\n        const inAmountLessFee = _calcInGivenOut(\n            tIn.scale18,\n            tOut.scale18,\n            swapAmount.scale18,\n            virtualOffsetInOut,\n        );\n        const inAmount = this.addSwapFeeAmount(\n            TokenAmount.fromScale18Amount(tokenIn, inAmountLessFee, true),\n        );\n\n        if (mutateBalances) {\n            tIn.decrease(inAmount.amount);\n            tOut.increase(swapAmount.amount);\n        }\n\n        return inAmount;\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const { tIn, tOut, tertiary } = this.getPoolPairData(tokenIn, tokenOut);\n        if (swapKind === SwapKind.GivenIn) {\n            const invariant = _calculateInvariant(\n                [tIn.scale18, tOut.scale18, tertiary.scale18],\n                this.root3Alpha,\n            );\n            const a = MathGyro.mulDown(invariant, this.root3Alpha);\n            const maxAmountInAssetInPool =\n                MathGyro.divDown(\n                    MathGyro.mulDown(tIn.scale18 + a, tOut.scale18 + a),\n                    a,\n                ) - a; // (x + a)(y + a) / a - a\n            const limitAmountIn = maxAmountInAssetInPool - tIn.scale18;\n            const limitAmountInPlusSwapFee = MathGyro.divDown(\n                limitAmountIn,\n                WAD - this.swapFee,\n            );\n            return MathGyro.mulDown(\n                limitAmountInPlusSwapFee,\n                SWAP_LIMIT_FACTOR,\n            );\n        }\n        return MathGyro.mulDown(tOut.amount, SWAP_LIMIT_FACTOR);\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    public getPoolPairData(\n        tokenIn: Token,\n        tokenOut: Token,\n    ): {\n        tIn: Gyro3PoolToken;\n        tOut: Gyro3PoolToken;\n        tertiary: Gyro3PoolToken;\n    } {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        const tertiaryAddress = this.tokens\n            .map((t) => t.token.wrapped)\n            .find((a) => a !== tokenIn.wrapped && a !== tokenOut.wrapped);\n        const tertiary = this.tokenMap.get(tertiaryAddress as string);\n\n        if (!tIn || !tOut || !tertiary) {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        return { tIn, tOut, tertiary };\n    }\n}\n","// POW3 constant\n// Threshold of x where the normal method of computing x^3 would overflow and we need a workaround.\n// Equal to 4.87e13 scaled; 4.87e13 is the point x where x**3 * 10**36 = (x**2 native) * (x native) ~ 2**256\nexport const _SAFE_LARGE_POW3_THRESHOLD = 10n ** 29n * 487n;\nexport const MIDDECIMAL = 10n ** 9n; // splits the fixed point decimals into two equal parts.\n\n// Stopping criterion for the Newton iteration that computes the invariant:\n// - Stop if the step width doesn't shrink anymore by at least a factor _INVARIANT_SHRINKING_FACTOR_PER_STEP.\n// - ... but in any case, make at least _INVARIANT_MIN_ITERATIONS iterations. This is useful to compensate for a\n// less-than-ideal starting point, which is important when alpha is small.\nexport const _INVARIANT_SHRINKING_FACTOR_PER_STEP = 8n;\nexport const _INVARIANT_MIN_ITERATIONS = 5n;\n","import { WAD } from '../../../utils';\nimport { _SAFE_LARGE_POW3_THRESHOLD, MIDDECIMAL } from './constants';\n\n// Helpers\nexport function _safeLargePow3ADown(\n    l: bigint,\n    root3Alpha: bigint,\n    d: bigint,\n): bigint {\n    let ret = 0n;\n    if (l <= _SAFE_LARGE_POW3_THRESHOLD) {\n        // Simple case where there is no overflow\n        ret = (((l * l) / WAD) * l) / WAD;\n        ret =\n            ret -\n            (((((ret * root3Alpha) / WAD) * root3Alpha) / WAD) * root3Alpha) /\n                WAD;\n        ret = (ret * WAD) / d;\n    } else {\n        ret = (l * l) / WAD;\n\n        // Compute l^2 * l * (1 - root3Alpha^3)\n        // The following products split up the factors into different groups of decimal places to reduce temorary\n        // blowup and prevent overflow.\n        // No precision is lost.\n        ret = ret * (l / WAD) + ((ret * l) % WAD) / WAD;\n\n        let x = ret;\n\n        for (let i = 0; i < 3; i++) {\n            x =\n                (x * (root3Alpha / MIDDECIMAL)) / MIDDECIMAL +\n                ((x * root3Alpha) % MIDDECIMAL);\n        }\n        ret = ret - x;\n\n        // We perform half-precision division to reduce blowup.\n        // In contrast to the above multiplications, this loses precision if d is small. However, tests show that,\n        // for the l and d values considered here, the precision lost would be below the precision of the fixed\n        // point type itself, so nothing is actually lost.\n        ret = (ret * MIDDECIMAL) / (d / MIDDECIMAL);\n    }\n    return ret;\n}\n","import {\n    _INVARIANT_MIN_ITERATIONS,\n    _INVARIANT_SHRINKING_FACTOR_PER_STEP,\n} from './constants';\nimport { _safeLargePow3ADown } from './helpers';\nimport { MathGyro } from '../../../utils/gyroHelpers/math';\nimport { WAD } from '../../../utils';\n\n// Invariant Calculation\n\n/**\n * Invariant is used to collect protocol swap fees by comparing its value between two times.\n * So we can round always to the same direction. It is also used to initiate the BPT amount\n * and, because there is a minimum BPT, we round down the invariant.\n * Argument root3Alpha = cube root of the lower price bound (symmetric across assets)\n * Note: all price bounds for the pool are alpha and 1/alpha\n */\n\nexport function _calculateInvariant(\n    balances: bigint[],\n    root3Alpha: bigint,\n): bigint {\n    const [a, mb, mc, md] = _calculateCubicTerms(balances, root3Alpha);\n    return _calculateCubic(a, mb, mc, md, root3Alpha);\n}\n\n/**\n * @dev Prepares quadratic terms for input to _calculateCubic\n * assumes a > 0, b < 0, c <= 0, and d <= 0 and returns a, -b, -c, -d\n * terms come from cubic in Section 3.1.1\n * argument root3Alpha = cube root of alpha\n */\nexport function _calculateCubicTerms(\n    balances: bigint[],\n    root3Alpha: bigint,\n): [bigint, bigint, bigint, bigint] {\n    const alpha23 = MathGyro.mulDown(root3Alpha, root3Alpha); // alpha to the power of (2/3)\n    const alpha = MathGyro.mulDown(alpha23, root3Alpha);\n    const a = WAD - alpha;\n    const bterm = balances[0] + balances[1] + balances[2];\n    const mb = MathGyro.mulDown(\n        MathGyro.mulDown(bterm, root3Alpha),\n        root3Alpha,\n    );\n    const cterm =\n        MathGyro.mulDown(balances[0], balances[1]) +\n        MathGyro.mulDown(balances[1], balances[2]) +\n        MathGyro.mulDown(balances[2], balances[0]);\n    const mc = MathGyro.mulDown(cterm, root3Alpha);\n    const md = MathGyro.mulDown(\n        MathGyro.mulDown(balances[0], balances[1]),\n        balances[2],\n    );\n\n    return [a, mb, mc, md];\n}\n\n/**\n * @dev Calculate the maximal root of the polynomial a L^3 - mb L^2 - mc L - md.\n * This root is always non-negative, and it is the unique positive root unless mb == mc == md == 0.\n */\nexport function _calculateCubic(\n    a: bigint,\n    mb: bigint,\n    mc: bigint,\n    md: bigint,\n    root3Alpha: bigint,\n): bigint {\n    let rootEst = _calculateCubicStartingPoint(a, mb, mc);\n    rootEst = _runNewtonIteration(a, mb, mc, md, root3Alpha, rootEst);\n    return rootEst;\n}\n\n/**\n * @dev Starting point for Newton iteration. Safe with all cubic polynomials where the coefficients have the appropriate\n * signs, but calibrated to the particular polynomial for computing the invariant.\n */\nexport function _calculateCubicStartingPoint(\n    a: bigint,\n    mb: bigint,\n    mc: bigint,\n): bigint {\n    const radic =\n        MathGyro.mulUp(mb, mb) +\n        MathGyro.mulUp(MathGyro.mulUp(a, mc), WAD * 3n);\n    const lmin =\n        MathGyro.divUp(mb, a * 3n) +\n        MathGyro.divUp(MathGyro.sqrt(radic, 5n), a * 3n);\n    // This formula has been found experimentally. It is exact for alpha -> 1, where the factor is 1.5. All\n    // factors > 1 are safe. For small alpha values, it is more efficient to fallback to a larger factor.\n    const alpha = WAD - a; // We know that a is in [0, 1].\n    const factor = alpha >= WAD / 2n ? (WAD * 3n) / 2n : WAD * 2n;\n    const l0 = MathGyro.mulUp(lmin, factor);\n    return l0;\n}\n\n/**\n * @dev Find a root of the given polynomial with the given starting point l.\n * Safe iff l > the local minimum.\n * Note that f(l) may be negative for the first iteration and will then be positive (up to rounding errors).\n * f'(l) is always positive for the range of values we consider.\n * See write-up, Appendix A.\n */\nexport function _runNewtonIteration(\n    a: bigint,\n    mb: bigint,\n    mc: bigint,\n    md: bigint,\n    root3Alpha: bigint,\n    rootEst: bigint,\n): bigint {\n    let deltaAbsPrev = 0n;\n    let _rootEst = rootEst;\n    for (let iteration = 0; iteration < 255; ++iteration) {\n        // The delta to the next step can be positive or negative, so we represent a positive and a negative part\n        // separately. The signed delta is delta_plus - delta_minus, but we only ever consider its absolute value.\n        const [deltaAbs, deltaIsPos] = _calcNewtonDelta(\n            a,\n            mb,\n            mc,\n            md,\n            root3Alpha,\n            _rootEst,\n        );\n\n        // ^ Note: If we ever set _INVARIANT_MIN_ITERATIONS=0, the following should include `iteration >= 1`.\n        if (\n            deltaAbs <= 1 ||\n            (iteration >= _INVARIANT_MIN_ITERATIONS && deltaIsPos)\n        )\n            // This should mathematically never happen. Thus, the numerical error dominates at this point.\n            return _rootEst;\n        if (\n            iteration >= _INVARIANT_MIN_ITERATIONS &&\n            deltaAbs >= deltaAbsPrev / _INVARIANT_SHRINKING_FACTOR_PER_STEP\n        ) {\n            // The iteration has stalled and isn't making significant progress anymore.\n            return _rootEst;\n        }\n        deltaAbsPrev = deltaAbs;\n        if (deltaIsPos) _rootEst = _rootEst + deltaAbs;\n        else _rootEst = _rootEst - deltaAbs;\n    }\n\n    throw new Error(\n        'Gyro3Pool: Newton Method did not converge on required invariant',\n    );\n}\n\n// -f(l)/f'(l), represented as an absolute value and a sign. Require that l is sufficiently large so that f is strictly increasing.\nexport function _calcNewtonDelta(\n    _: bigint,\n    mb: bigint,\n    mc: bigint,\n    md: bigint,\n    root3Alpha: bigint,\n    rootEst: bigint,\n): [bigint, boolean] {\n    // The following is equal to dfRootEst^3 * a but with an order of operations optimized for precision.\n    // Subtraction does not underflow since rootEst is chosen so that it's always above the (only) local minimum.\n    let dfRootEst = 0n;\n\n    const rootEst2 = MathGyro.mulDown(rootEst, rootEst);\n    dfRootEst = rootEst2 * 3n;\n    dfRootEst =\n        dfRootEst -\n        MathGyro.mulDown(\n            MathGyro.mulDown(\n                MathGyro.mulDown(dfRootEst, root3Alpha),\n                root3Alpha,\n            ),\n            root3Alpha,\n        );\n    dfRootEst = dfRootEst - MathGyro.mulDown(rootEst, mb) * 2n - mc;\n\n    const deltaMinus = _safeLargePow3ADown(rootEst, root3Alpha, dfRootEst);\n\n    // NB: We could order the operations here in much the same way we did above to reduce errors. But tests show\n    // that this has no significant effect, and it would lead to more complex code.\n    let deltaPlus = MathGyro.mulDown(MathGyro.mulDown(rootEst, rootEst), mb);\n    deltaPlus = MathGyro.divDown(\n        deltaPlus + MathGyro.mulDown(rootEst, mc),\n        dfRootEst,\n    );\n    deltaPlus = deltaPlus + MathGyro.divDown(md, dfRootEst);\n\n    const deltaIsPos = deltaPlus >= deltaMinus;\n    const deltaAbs = deltaIsPos\n        ? deltaPlus - deltaMinus\n        : deltaMinus - deltaPlus;\n\n    return [deltaAbs, deltaIsPos];\n}\n\n// Swap Amount Calculations\n\n/**\n * @dev Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\n * current balances and weights.\n * Changed signs compared to original algorithm to account for amountOut < 0.\n * See Proposition 12 in 3.1.4.\n */\nexport function _calcOutGivenIn(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountIn: bigint,\n    virtualOffset: bigint,\n): bigint {\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // very slightly larger than 3e-18, compensating for the maximum multiplicative error in the invariant\n    // computation.\n\n    const virtInOver = balanceIn + MathGyro.mulUp(virtualOffset, WAD + 2n);\n    const virtOutUnder = balanceOut + MathGyro.mulDown(virtualOffset, WAD - 1n);\n    const amountOut = (virtOutUnder * amountIn) / (virtInOver + amountIn);\n\n    return amountOut;\n}\n\n/**\n * @dev Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\n * currhent balances and weights.\n * Similar to the one before but adapting bc negative values (amountOut would be negative).\n */\nexport function _calcInGivenOut(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountOut: bigint,\n    virtualOffset: bigint,\n): bigint {\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // very slightly larger than 3e-18, compensating for the maximum multiplicative error in the invariant\n    // computation.\n    const virtInOver = balanceIn + MathGyro.mulUp(virtualOffset, WAD + 2n);\n    const virtOutUnder = balanceOut + MathGyro.mulDown(virtualOffset, WAD - 1n);\n\n    const amountIn = MathGyro.divUp(\n        MathGyro.mulUp(virtInOver, amountOut),\n        virtOutUnder - amountOut,\n    );\n\n    return amountIn;\n}\n\n/**\n * Normalized Liquidity measured with respect to the out-asset.\n * NB This is the same function as for the 2-CLP because the marginal trading curve of the 3-CLP\n * is a 2-CLP curve. We use different virtual offsets, of course.\n */\nexport function _getNormalizedLiquidity(\n    balances: bigint[],\n    virtualParamOut: bigint,\n): bigint {\n    const virtOut = balances[1] + virtualParamOut;\n    return virtOut / 2n;\n}\n","import { Gyro3Pool } from './gyro3Pool';\nimport { BasePool, BasePoolFactory } from '../index';\nimport { RawGyro3Pool, RawPool } from '../../../data/types';\n\nexport class Gyro3PoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType.includes('Gyro3');\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return Gyro3Pool.fromRawPool(chainId, pool as RawGyro3Pool);\n    }\n}\n","import { Hex, parseEther, parseUnits } from 'viem';\n\nimport { BasePool } from '../index';\nimport { Token } from '../../token';\nimport { TokenAmount, BigintIsh } from '../../tokenAmount';\nimport { RawGyroEPool } from '../../../data/types';\nimport { PoolType, SwapKind } from '../../../types';\nimport { MathSol, WAD, getPoolAddress } from '../../../utils';\nimport {\n    balancesFromTokenInOut,\n    virtualOffset0,\n    virtualOffset1,\n} from './gyroEMathHelpers';\nimport {\n    calcInGivenOut,\n    calcOutGivenIn,\n    calculateInvariantWithError,\n} from './gyroEMath';\nimport { MathGyro, SWAP_LIMIT_FACTOR } from '../../../utils/gyroHelpers/math';\nimport { GyroEParams, Vector2, DerivedGyroEParams } from './types';\n\nexport class GyroEPoolToken extends TokenAmount {\n    public readonly rate: bigint;\n    public readonly index: number;\n\n    public constructor(\n        token: Token,\n        amount: BigintIsh,\n        rate: BigintIsh,\n        index: number,\n    ) {\n        super(token, amount);\n        this.rate = BigInt(rate);\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        this.index = index;\n    }\n\n    public increase(amount: bigint): TokenAmount {\n        this.amount = this.amount + amount;\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        return this;\n    }\n\n    public decrease(amount: bigint): TokenAmount {\n        this.amount = this.amount - amount;\n        this.scale18 = (this.amount * this.scalar * this.rate) / WAD;\n        return this;\n    }\n}\n\nexport class GyroEPool implements BasePool {\n    public readonly chainId: number;\n    public readonly id: Hex;\n    public readonly address: string;\n    public readonly poolType: PoolType = PoolType.GyroE;\n    public readonly poolTypeVersion: number;\n    public readonly swapFee: bigint;\n    public readonly tokens: GyroEPoolToken[];\n    public readonly gyroEParams: GyroEParams;\n    public readonly derivedGyroEParams: DerivedGyroEParams;\n\n    private readonly tokenMap: Map<string, GyroEPoolToken>;\n\n    static fromRawPool(chainId: number, pool: RawGyroEPool): GyroEPool {\n        const poolTokens: GyroEPoolToken[] = [];\n\n        for (const t of pool.tokens) {\n            const token = new Token(\n                chainId,\n                t.address,\n                t.decimals,\n                t.symbol,\n                t.name,\n            );\n            const tokenAmount = TokenAmount.fromHumanAmount(token, t.balance);\n            const tokenRate = pool.tokenRates\n                ? parseEther(pool.tokenRates[t.index])\n                : WAD;\n\n            poolTokens.push(\n                new GyroEPoolToken(\n                    token,\n                    tokenAmount.amount,\n                    tokenRate,\n                    t.index,\n                ),\n            );\n        }\n\n        const gyroEParams: GyroEParams = {\n            alpha: parseEther(pool.alpha),\n            beta: parseEther(pool.beta),\n            c: parseEther(pool.c),\n            s: parseEther(pool.s),\n            lambda: parseEther(pool.lambda),\n        };\n\n        const derivedGyroEParams: DerivedGyroEParams = {\n            tauAlpha: {\n                x: parseUnits(pool.tauAlphaX, 38),\n                y: parseUnits(pool.tauAlphaY, 38),\n            },\n            tauBeta: {\n                x: parseUnits(pool.tauBetaX, 38),\n                y: parseUnits(pool.tauBetaY, 38),\n            },\n            u: parseUnits(pool.u, 38),\n            v: parseUnits(pool.v, 38),\n            w: parseUnits(pool.w, 38),\n            z: parseUnits(pool.z, 38),\n            dSq: parseUnits(pool.dSq, 38),\n        };\n\n        return new GyroEPool(\n            pool.id,\n            pool.poolTypeVersion,\n            parseEther(pool.swapFee),\n            poolTokens,\n            gyroEParams,\n            derivedGyroEParams,\n        );\n    }\n\n    constructor(\n        id: Hex,\n        poolTypeVersion: number,\n        swapFee: bigint,\n        tokens: GyroEPoolToken[],\n        gyroEParams: GyroEParams,\n        derivedGyroEParams: DerivedGyroEParams,\n    ) {\n        this.chainId = tokens[0].token.chainId;\n        this.id = id;\n        this.poolTypeVersion = poolTypeVersion;\n        this.swapFee = swapFee;\n        this.address = getPoolAddress(id);\n        this.tokens = tokens;\n        this.tokenMap = new Map(\n            this.tokens.map((token) => [token.token.address, token]),\n        );\n        this.gyroEParams = gyroEParams;\n        this.derivedGyroEParams = derivedGyroEParams;\n    }\n\n    public getNormalizedLiquidity(tokenIn: Token, tokenOut: Token): bigint {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut)\n            throw new Error('Pool does not contain the tokens provided');\n        // TODO: Fix gyro normalized liquidity calc\n        return tOut.amount;\n    }\n\n    public swapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n        const orderedNormalizedBalances = balancesFromTokenInOut(\n            tIn.scale18,\n            tOut.scale18,\n            tIn.index === 0,\n        );\n        const [currentInvariant, invErr] = calculateInvariantWithError(\n            orderedNormalizedBalances,\n            this.gyroEParams,\n            this.derivedGyroEParams,\n        );\n\n        const invariant: Vector2 = {\n            x: currentInvariant + invErr * 2n,\n            y: currentInvariant,\n        };\n        const inAmount = GyroEPoolToken.fromRawAmount(\n            tokenIn,\n            swapAmount.amount,\n        );\n        const inAmountLessFee = this.subtractSwapFeeAmount(inAmount);\n        const inAmountWithRate = inAmountLessFee.mulDownFixed(tIn.rate);\n        const outAmountScale18 = calcOutGivenIn(\n            orderedNormalizedBalances,\n            inAmountWithRate.scale18,\n            tIn.index === 0,\n            this.gyroEParams,\n            this.derivedGyroEParams,\n            invariant,\n        );\n\n        const outAmountWithRate = TokenAmount.fromScale18Amount(\n            tokenOut,\n            outAmountScale18,\n        );\n\n        const outAmount = outAmountWithRate.divDownFixed(tOut.rate);\n\n        if (mutateBalances) {\n            tIn.increase(swapAmount.amount);\n            tOut.decrease(outAmount.amount);\n        }\n\n        return outAmount;\n    }\n\n    public swapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapAmount: TokenAmount,\n        mutateBalances?: boolean,\n    ): TokenAmount {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n        const orderedNormalizedBalances = balancesFromTokenInOut(\n            tIn.scale18,\n            tOut.scale18,\n            tIn.index === 0,\n        );\n        const [currentInvariant, invErr] = calculateInvariantWithError(\n            orderedNormalizedBalances,\n            this.gyroEParams,\n            this.derivedGyroEParams,\n        );\n        const invariant: Vector2 = {\n            x: currentInvariant + invErr * 2n,\n            y: currentInvariant,\n        };\n\n        const inAmountLessFee = calcInGivenOut(\n            orderedNormalizedBalances,\n            swapAmount.scale18,\n            tIn.index === 0,\n            this.gyroEParams,\n            this.derivedGyroEParams,\n            invariant,\n        );\n\n        const inAmount = this.addSwapFeeAmount(\n            GyroEPoolToken.fromScale18Amount(tokenIn, inAmountLessFee),\n        );\n\n        const inAmountWithRate = inAmount.divUpFixed(tIn.rate);\n\n        if (mutateBalances) {\n            tIn.decrease(inAmountWithRate.amount);\n            tOut.increase(swapAmount.amount);\n        }\n\n        return inAmountWithRate;\n    }\n\n    public getLimitAmountSwap(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n    ): bigint {\n        const { tIn, tOut } = this.getRequiredTokenPair(tokenIn, tokenOut);\n        if (swapKind === SwapKind.GivenIn) {\n            const orderedNormalizedBalances = balancesFromTokenInOut(\n                tIn.scale18,\n                tOut.scale18,\n                tIn.index === 0,\n            );\n            const [currentInvariant, invErr] = calculateInvariantWithError(\n                orderedNormalizedBalances,\n                this.gyroEParams,\n                this.derivedGyroEParams,\n            );\n            const invariant: Vector2 = {\n                x: currentInvariant + invErr * 2n,\n                y: currentInvariant,\n            };\n            const virtualOffsetFunc =\n                tIn.index === 0 ? virtualOffset0 : virtualOffset1;\n            const maxAmountInAssetInPool =\n                virtualOffsetFunc(\n                    this.gyroEParams,\n                    this.derivedGyroEParams,\n                    invariant,\n                ) -\n                virtualOffsetFunc(\n                    this.gyroEParams,\n                    this.derivedGyroEParams,\n                    invariant,\n                    true,\n                );\n            const limitAmountIn = MathGyro.divDown(\n                maxAmountInAssetInPool - tIn.scale18,\n                tIn.rate,\n            );\n            const limitAmountInPlusSwapFee = MathGyro.divDown(\n                limitAmountIn,\n                WAD - this.swapFee,\n            );\n            return MathGyro.mulDown(\n                limitAmountInPlusSwapFee,\n                SWAP_LIMIT_FACTOR,\n            );\n        }\n        return MathGyro.mulDown(tOut.amount, SWAP_LIMIT_FACTOR);\n    }\n\n    public subtractSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        const feeAmount = amount.mulUpFixed(this.swapFee);\n        return amount.sub(feeAmount);\n    }\n\n    public addSwapFeeAmount(amount: TokenAmount): TokenAmount {\n        return amount.divUpFixed(MathSol.complementFixed(this.swapFee));\n    }\n\n    getRequiredTokenPair(\n        tokenIn: Token,\n        tokenOut: Token,\n    ): {\n        tIn: GyroEPoolToken;\n        tOut: GyroEPoolToken;\n    } {\n        const tIn = this.tokenMap.get(tokenIn.wrapped);\n        const tOut = this.tokenMap.get(tokenOut.wrapped);\n\n        if (!tIn || !tOut) {\n            throw new Error('Pool does not contain the tokens provided');\n        }\n\n        return { tIn, tOut };\n    }\n}\n","export const MAX_BALANCES = 10n ** 34n; // 1e16 in normal precision\n\n// Invariant calculation\nexport const MAX_INVARIANT = 10n ** 37n * 3n; // 3e19 in normal precision\n","import { MAX_BALANCES } from './constants';\nimport { DerivedGyroEParams, GyroEParams, Vector2 } from './types';\nimport { MathGyro, ONE_XP } from '../../../utils/gyroHelpers/math';\n\n/////////\n/// TYPES\n/////////\n\n// terms in this struct are stored in extra precision (38 decimals) with final decimal rounded down\n\nexport type QParams = {\n    a: bigint;\n    b: bigint;\n    c: bigint;\n};\n\n////////\n/// BALANCE CALCULATION\n////////\n\nexport function balancesFromTokenInOut(\n    balanceTokenIn: bigint,\n    balanceTokenOut: bigint,\n    tokenInIsToken0: boolean,\n): [bigint, bigint] {\n    return tokenInIsToken0\n        ? [balanceTokenIn, balanceTokenOut]\n        : [balanceTokenOut, balanceTokenIn];\n}\n\n/////////\n/// INVARIANT CALC\n/////////\n\nexport function calcAtAChi(\n    x: bigint,\n    y: bigint,\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n): bigint {\n    const dSq2 = MathGyro.mulXpU(d.dSq, d.dSq);\n\n    // (cx - sy) * (w/lambda + z) / lambda\n    //      account for 2 factors of dSq (4 s,c factors)\n    const termXp = MathGyro.divXpU(\n        MathGyro.divDownMagU(\n            MathGyro.divDownMagU(d.w, p.lambda) + d.z,\n            p.lambda,\n        ),\n        dSq2,\n    );\n\n    let val = MathGyro.mulDownXpToNpU(\n        MathGyro.mulDownMagU(x, p.c) - MathGyro.mulDownMagU(y, p.s),\n        termXp,\n    );\n\n    // (x lambda s + y lambda c) * u, note u > 0\n    let termNp =\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(x, p.lambda), p.s) +\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(y, p.lambda), p.c);\n    val = val + MathGyro.mulDownXpToNpU(termNp, MathGyro.divXpU(d.u, dSq2));\n\n    // (sx+cy) * v, note v > 0\n    termNp = MathGyro.mulDownMagU(x, p.s) + MathGyro.mulDownMagU(y, p.c);\n    val = val + MathGyro.mulDownXpToNpU(termNp, MathGyro.divXpU(d.v, dSq2));\n\n    return val;\n}\n\nexport function calcInvariantSqrt(\n    x: bigint,\n    y: bigint,\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n): [bigint, bigint] {\n    let val =\n        calcMinAtxAChiySqPlusAtxSq(x, y, p, d) +\n        calc2AtxAtyAChixAChiy(x, y, p, d);\n    val = val + calcMinAtyAChixSqPlusAtySq(x, y, p, d);\n    const err = (MathGyro.mulUpMagU(x, x) + MathGyro.mulUpMagU(y, y)) / ONE_XP;\n    val = val > 0 ? MathGyro.sqrt(val, 5n) : 0n;\n    return [val, err];\n}\n\nfunction calcMinAtxAChiySqPlusAtxSq(\n    x: bigint,\n    y: bigint,\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n) {\n    let termNp =\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(x, x), p.c),\n            p.c,\n        ) +\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(y, y), p.s),\n            p.s,\n        );\n    termNp =\n        termNp -\n        MathGyro.mulDownMagU(\n            MathGyro.mulDownMagU(MathGyro.mulDownMagU(x, y), p.c * 2n),\n            p.s,\n        );\n    const termXp =\n        MathGyro.mulXpU(d.u, d.u) +\n        MathGyro.divDownMagU(MathGyro.mulXpU(d.u * 2n, d.v), p.lambda) +\n        MathGyro.divDownMagU(\n            MathGyro.divDownMagU(MathGyro.mulXpU(d.v, d.v), p.lambda),\n            p.lambda,\n        );\n\n    let val = MathGyro.mulDownXpToNpU(termNp * -1n, termXp);\n    val =\n        val +\n        MathGyro.mulDownXpToNpU(\n            MathGyro.divDownMagU(\n                MathGyro.divDownMagU(termNp - 9n, p.lambda),\n                p.lambda,\n            ),\n            MathGyro.divXpU(ONE_XP, d.dSq),\n        );\n    return val;\n}\n\nfunction calc2AtxAtyAChixAChiy(\n    x: bigint,\n    y: bigint,\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n) {\n    let termNp = MathGyro.mulDownMagU(\n        MathGyro.mulDownMagU(\n            MathGyro.mulDownMagU(x, x) - MathGyro.mulUpMagU(y, y),\n            p.c * 2n,\n        ),\n        p.s,\n    );\n\n    const xy = MathGyro.mulDownMagU(y, x * 2n);\n    termNp =\n        termNp +\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(xy, p.c), p.c) -\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(xy, p.s), p.s);\n    let termXp =\n        MathGyro.mulXpU(d.z, d.u) +\n        MathGyro.divDownMagU(\n            MathGyro.divDownMagU(MathGyro.mulXpU(d.w, d.v), p.lambda),\n            p.lambda,\n        );\n    termXp =\n        termXp +\n        MathGyro.divDownMagU(\n            MathGyro.mulXpU(d.w, d.u) + MathGyro.mulXpU(d.z, d.v),\n            p.lambda,\n        );\n    termXp = MathGyro.divXpU(\n        termXp,\n        MathGyro.mulXpU(\n            MathGyro.mulXpU(MathGyro.mulXpU(d.dSq, d.dSq), d.dSq),\n            d.dSq,\n        ),\n    );\n    const val = MathGyro.mulDownXpToNpU(termNp, termXp);\n    return val;\n}\n\nfunction calcMinAtyAChixSqPlusAtySq(\n    x: bigint,\n    y: bigint,\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n) {\n    let termNp =\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(x, x), p.s),\n            p.s,\n        ) +\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(y, y), p.c),\n            p.c,\n        );\n    termNp =\n        termNp +\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(x, y), p.s * 2n),\n            p.c,\n        );\n    let termXp =\n        MathGyro.mulXpU(d.z, d.z) +\n        MathGyro.divDownMagU(\n            MathGyro.divDownMagU(MathGyro.mulXpU(d.w, d.w), p.lambda),\n            p.lambda,\n        );\n    termXp =\n        termXp + MathGyro.divDownMagU(MathGyro.mulXpU(d.z * 2n, d.w), p.lambda);\n    termXp = MathGyro.divXpU(\n        termXp,\n        MathGyro.mulXpU(\n            MathGyro.mulXpU(MathGyro.mulXpU(d.dSq, d.dSq), d.dSq),\n            d.dSq,\n        ),\n    );\n    let val = MathGyro.mulDownXpToNpU(termNp * -1n, termXp);\n    val =\n        val +\n        MathGyro.mulDownXpToNpU(termNp - 9n, MathGyro.divXpU(ONE_XP, d.dSq));\n    return val;\n}\n\nexport function calcAChiAChiInXp(\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n): bigint {\n    const dSq3 = MathGyro.mulXpU(MathGyro.mulXpU(d.dSq, d.dSq), d.dSq);\n    let val = MathGyro.mulUpMagU(\n        p.lambda,\n        MathGyro.divXpU(MathGyro.mulXpU(d.u * 2n, d.v), dSq3),\n    );\n    val =\n        val +\n        MathGyro.mulUpMagU(\n            MathGyro.mulUpMagU(\n                MathGyro.divXpU(MathGyro.mulXpU(d.u + 1n, d.u + 1n), dSq3),\n                p.lambda,\n            ),\n            p.lambda,\n        );\n    val = val + MathGyro.divXpU(MathGyro.mulXpU(d.v, d.v), dSq3);\n    const termXp = MathGyro.divUpMagU(d.w, p.lambda) + d.z;\n    val = val + MathGyro.divXpU(MathGyro.mulXpU(termXp, termXp), dSq3);\n    return val;\n}\n\n/////////\n/// SWAP AMOUNT CALC\n/////////\n\nexport function checkAssetBounds(\n    params: GyroEParams,\n    derived: DerivedGyroEParams,\n    invariant: Vector2,\n    newBal: bigint,\n    assetIndex: number,\n): void {\n    if (assetIndex === 0) {\n        const xPlus = maxBalances0(params, derived, invariant);\n        if (newBal > MAX_BALANCES || newBal > xPlus)\n            throw new Error('ASSET BOUNDS EXCEEDED');\n    } else {\n        const yPlus = maxBalances1(params, derived, invariant);\n        if (newBal > MAX_BALANCES || newBal > yPlus)\n            throw new Error('ASSET BOUNDS EXCEEDED');\n    }\n}\n\nfunction maxBalances0(p: GyroEParams, d: DerivedGyroEParams, r: Vector2) {\n    const termXp1 = MathGyro.divXpU(d.tauBeta.x - d.tauAlpha.x, d.dSq);\n    const termXp2 = MathGyro.divXpU(d.tauBeta.y - d.tauAlpha.y, d.dSq);\n    let xp = MathGyro.mulDownXpToNpU(\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(r.y, p.lambda), p.c),\n        termXp1,\n    );\n    xp =\n        xp +\n        (termXp2 > 0n\n            ? MathGyro.mulDownMagU(r.y, p.s)\n            : MathGyro.mulDownXpToNpU(MathGyro.mulUpMagU(r.x, p.s), termXp2));\n    return xp;\n}\n\nfunction maxBalances1(p: GyroEParams, d: DerivedGyroEParams, r: Vector2) {\n    const termXp1 = MathGyro.divXpU(d.tauBeta.x - d.tauAlpha.x, d.dSq);\n    const termXp2 = MathGyro.divXpU(d.tauBeta.y - d.tauAlpha.y, d.dSq);\n    let yp = MathGyro.mulDownXpToNpU(\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(r.y, p.lambda), p.s),\n        termXp1,\n    );\n    yp =\n        yp +\n        (termXp2 > 0n\n            ? MathGyro.mulDownMagU(r.y, p.c)\n            : MathGyro.mulDownXpToNpU(MathGyro.mulUpMagU(r.x, p.c), termXp2));\n    return yp;\n}\n\nexport function calcYGivenX(\n    x: bigint,\n    params: GyroEParams,\n    d: DerivedGyroEParams,\n    r: Vector2,\n): bigint {\n    const ab: Vector2 = {\n        x: virtualOffset0(params, d, r),\n        y: virtualOffset1(params, d, r),\n    };\n\n    const y = solveQuadraticSwap(\n        params.lambda,\n        x,\n        params.s,\n        params.c,\n        r,\n        ab,\n        d.tauBeta,\n        d.dSq,\n    );\n    return y;\n}\n\nexport function calcXGivenY(\n    y: bigint,\n    params: GyroEParams,\n    d: DerivedGyroEParams,\n    r: Vector2,\n): bigint {\n    const ba: Vector2 = {\n        x: virtualOffset1(params, d, r),\n        y: virtualOffset0(params, d, r),\n    };\n    const x = solveQuadraticSwap(\n        params.lambda,\n        y,\n        params.c,\n        params.s,\n        r,\n        ba,\n        {\n            x: d.tauAlpha.x * -1n,\n            y: d.tauAlpha.y,\n        },\n        d.dSq,\n    );\n    return x;\n}\n\nexport function virtualOffset0(\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n    r: Vector2,\n    switchTau?: boolean,\n): bigint {\n    const tauValue = switchTau ? d.tauAlpha : d.tauBeta;\n    const termXp = MathGyro.divXpU(tauValue.x, d.dSq);\n\n    let a =\n        tauValue.x > 0n\n            ? MathGyro.mulUpXpToNpU(\n                  MathGyro.mulUpMagU(MathGyro.mulUpMagU(r.x, p.lambda), p.c),\n                  termXp,\n              )\n            : MathGyro.mulUpXpToNpU(\n                  MathGyro.mulDownMagU(\n                      MathGyro.mulDownMagU(r.y, p.lambda),\n                      p.c,\n                  ),\n                  termXp,\n              );\n\n    a =\n        a +\n        MathGyro.mulUpXpToNpU(\n            MathGyro.mulUpMagU(r.x, p.s),\n            MathGyro.divXpU(tauValue.y, d.dSq),\n        );\n\n    return a;\n}\n\nexport function virtualOffset1(\n    p: GyroEParams,\n    d: DerivedGyroEParams,\n    r: Vector2,\n    switchTau?: boolean,\n): bigint {\n    const tauValue = switchTau ? d.tauBeta : d.tauAlpha;\n    const termXp = MathGyro.divXpU(tauValue.x, d.dSq);\n\n    let b =\n        tauValue.x < 0n\n            ? MathGyro.mulUpXpToNpU(\n                  MathGyro.mulUpMagU(MathGyro.mulUpMagU(r.x, p.lambda), p.s),\n                  termXp * -1n,\n              )\n            : MathGyro.mulUpXpToNpU(\n                  MathGyro.mulDownMagU(\n                      MathGyro.mulDownMagU(r.y * -1n, p.lambda),\n                      p.s,\n                  ),\n                  termXp,\n              );\n\n    b =\n        b +\n        MathGyro.mulUpXpToNpU(\n            MathGyro.mulUpMagU(r.x, p.c),\n            MathGyro.divXpU(tauValue.y, d.dSq),\n        );\n    return b;\n}\n\nfunction solveQuadraticSwap(\n    lambda: bigint,\n    x: bigint,\n    s: bigint,\n    c: bigint,\n    r: Vector2,\n    ab: Vector2,\n    tauBeta: Vector2,\n    dSq: bigint,\n): bigint {\n    const lamBar: Vector2 = {\n        x:\n            ONE_XP -\n            MathGyro.divDownMagU(MathGyro.divDownMagU(ONE_XP, lambda), lambda),\n        y:\n            ONE_XP -\n            MathGyro.divUpMagU(MathGyro.divUpMagU(ONE_XP, lambda), lambda),\n    };\n    const q: QParams = {\n        a: 0n,\n        b: 0n,\n        c: 0n,\n    };\n    const xp = x - ab.x;\n    if (xp > 0n) {\n        q.b = MathGyro.mulUpXpToNpU(\n            MathGyro.mulDownMagU(MathGyro.mulDownMagU(xp * -1n, s), c),\n            MathGyro.divXpU(lamBar.y, dSq),\n        );\n    } else {\n        q.b = MathGyro.mulUpXpToNpU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(xp * -1n, s), c),\n            MathGyro.divXpU(lamBar.x, dSq) + 1n,\n        );\n    }\n    const sTerm: Vector2 = {\n        x: MathGyro.divXpU(\n            MathGyro.mulDownMagU(MathGyro.mulDownMagU(lamBar.y, s), s),\n            dSq,\n        ),\n        y:\n            MathGyro.divXpU(\n                MathGyro.mulUpMagU(MathGyro.mulUpMagU(lamBar.x, s), s),\n                dSq + 1n,\n            ) + 1n,\n    };\n    sTerm.x = ONE_XP - sTerm.x;\n    sTerm.y = ONE_XP - sTerm.y;\n\n    q.c = calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq) * -1n;\n    q.c =\n        q.c + MathGyro.mulDownXpToNpU(MathGyro.mulDownMagU(r.y, r.y), sTerm.y); // r.y ===  currentInv + err\n    q.c = q.c > 0n ? MathGyro.sqrt(q.c, 5n) : 0n;\n    if (q.b - q.c > 0n) {\n        q.a = MathGyro.mulUpXpToNpU(\n            q.b - q.c,\n            MathGyro.divXpU(ONE_XP, sTerm.y) + 1n,\n        );\n    } else {\n        q.a = MathGyro.mulUpXpToNpU(\n            q.b - q.c,\n            MathGyro.divXpU(ONE_XP, sTerm.x),\n        );\n    }\n    return q.a + ab.y;\n}\n\nexport function calcXpXpDivLambdaLambda(\n    x: bigint,\n    r: Vector2,\n    lambda: bigint,\n    s: bigint,\n    c: bigint,\n    tauBeta: Vector2,\n    dSq: bigint,\n): bigint {\n    const sqVars = {\n        x: MathGyro.mulXpU(dSq, dSq),\n        y: MathGyro.mulUpMagU(r.x, r.x),\n    };\n    const q: QParams = {\n        a: 0n,\n        b: 0n,\n        c: 0n,\n    };\n    let termXp = MathGyro.divXpU(\n        MathGyro.mulXpU(tauBeta.x, tauBeta.y),\n        sqVars.x,\n    );\n    if (termXp > 0n) {\n        q.a = MathGyro.mulUpMagU(sqVars.y, s * 2n);\n        q.a = MathGyro.mulUpXpToNpU(MathGyro.mulUpMagU(q.a, c), termXp + 7n);\n    } else {\n        q.a = MathGyro.mulDownMagU(MathGyro.mulDownMagU(r.y, r.y), s * 2n); // r.y ===  currentInv + err\n        q.a = MathGyro.mulUpXpToNpU(MathGyro.mulDownMagU(q.a, c), termXp);\n    }\n\n    if (tauBeta.x < 0n) {\n        q.b = MathGyro.mulUpXpToNpU(\n            MathGyro.mulUpMagU(MathGyro.mulUpMagU(r.x, x), c * 2n),\n            MathGyro.divXpU(tauBeta.x, dSq) * -1n + 3n,\n        );\n    } else {\n        q.b = MathGyro.mulUpXpToNpU(\n            MathGyro.mulDownMagU(MathGyro.mulDownMagU(r.y * -1n, x), c * 2n),\n            MathGyro.divXpU(tauBeta.x, dSq),\n        );\n    }\n    q.a = q.a + q.b;\n    termXp =\n        MathGyro.divXpU(MathGyro.mulXpU(tauBeta.y, tauBeta.y), sqVars.x) + 7n;\n    q.b = MathGyro.mulUpMagU(sqVars.y, s);\n    q.b = MathGyro.mulUpXpToNpU(MathGyro.mulUpMagU(q.b, s), termXp);\n\n    q.c = MathGyro.mulUpXpToNpU(\n        MathGyro.mulDownMagU(MathGyro.mulDownMagU(r.y * -1n, x), s * 2n),\n        MathGyro.divXpU(tauBeta.y, dSq),\n    );\n    q.b = q.b + q.c + MathGyro.mulUpMagU(x, x);\n    q.b =\n        q.b > 0n\n            ? MathGyro.divUpMagU(q.b, lambda)\n            : MathGyro.divDownMagU(q.b, lambda);\n\n    q.a = q.a + q.b;\n    q.a =\n        q.a > 0n\n            ? MathGyro.divUpMagU(q.a, lambda)\n            : MathGyro.divDownMagU(q.a, lambda);\n\n    termXp =\n        MathGyro.divXpU(MathGyro.mulXpU(tauBeta.x, tauBeta.x), sqVars.x) + 7n;\n    const val = MathGyro.mulUpMagU(MathGyro.mulUpMagU(sqVars.y, c), c);\n    return MathGyro.mulUpXpToNpU(val, termXp) + q.a;\n}\n","import { MAX_BALANCES, MAX_INVARIANT } from './constants';\nimport {\n    calcAtAChi,\n    calcInvariantSqrt,\n    calcAChiAChiInXp,\n    calcXGivenY,\n    calcYGivenX,\n    checkAssetBounds,\n} from './gyroEMathHelpers';\nimport {\n    normalizedLiquidityXIn,\n    normalizedLiquidityYIn,\n} from './gyroEMathFunctions';\nimport { DerivedGyroEParams, GyroEParams, Vector2 } from './types';\nimport { MathGyro, ONE_XP, SMALL } from '../../../utils/gyroHelpers/math';\n\nexport function calculateNormalizedLiquidity(\n    balances: bigint[],\n    params: GyroEParams,\n    derived: DerivedGyroEParams,\n    r: Vector2,\n    fee: bigint,\n    tokenInIsToken0: boolean,\n): bigint {\n    if (tokenInIsToken0) {\n        return normalizedLiquidityXIn(balances, params, derived, fee, r);\n    }\n    return normalizedLiquidityYIn(balances, params, derived, fee, r);\n}\n\nexport function calculateInvariantWithError(\n    balances: bigint[],\n    params: GyroEParams,\n    derived: DerivedGyroEParams,\n): [bigint, bigint] {\n    const [x, y] = balances;\n\n    if (x + y > MAX_BALANCES) throw new Error('MAX ASSETS EXCEEDED');\n    const AtAChi = calcAtAChi(x, y, params, derived);\n\n    const invariantResult = calcInvariantSqrt(x, y, params, derived);\n    const square_root = invariantResult[0];\n    let err = invariantResult[1];\n\n    if (square_root > 0) {\n        err = MathGyro.divUpMagU(err + 1n, square_root * 2n);\n    } else {\n        err = err > 0 ? MathGyro.sqrt(err, 5n) : 10n ** 9n;\n    }\n\n    err = (MathGyro.mulUpMagU(params.lambda, x + y) / ONE_XP + err + 1n) * 20n;\n\n    const mulDenominator = MathGyro.divXpU(\n        ONE_XP,\n        calcAChiAChiInXp(params, derived) - ONE_XP,\n    );\n    const invariant = MathGyro.mulDownXpToNpU(\n        AtAChi + square_root - err,\n        mulDenominator,\n    );\n    err = MathGyro.mulUpXpToNpU(err, mulDenominator);\n\n    err =\n        err +\n        (MathGyro.mulUpXpToNpU(invariant, mulDenominator) *\n            ((params.lambda * params.lambda) / 10n ** 36n) *\n            40n) /\n            ONE_XP +\n        1n;\n\n    if (invariant + err > MAX_INVARIANT)\n        throw new Error('MAX INVARIANT EXCEEDED');\n\n    return [invariant, err];\n}\n\nexport function calcOutGivenIn(\n    balances: bigint[],\n    amountIn: bigint,\n    tokenInIsToken0: boolean,\n    params: GyroEParams,\n    derived: DerivedGyroEParams,\n    invariant: Vector2,\n): bigint {\n    if (amountIn < SMALL) return 0n;\n\n    const ixIn = Number(!tokenInIsToken0);\n    const ixOut = Number(tokenInIsToken0);\n\n    const calcGiven = tokenInIsToken0 ? calcYGivenX : calcXGivenY;\n\n    const balInNew = balances[ixIn] + amountIn;\n\n    checkAssetBounds(params, derived, invariant, balInNew, ixIn);\n    const balOutNew = calcGiven(balInNew, params, derived, invariant);\n    const amountOut = balances[ixOut] - balOutNew;\n    if (amountOut < 0) {\n        // Should never happen; check anyways to catch a numerical bug.\n        throw new Error('ASSET BOUNDS EXCEEDED 1');\n    }\n\n    return amountOut;\n}\n\nexport function calcInGivenOut(\n    balances: bigint[],\n    amountOut: bigint,\n    tokenInIsToken0: boolean,\n    params: GyroEParams,\n    derived: DerivedGyroEParams,\n    invariant: Vector2,\n): bigint {\n    if (amountOut < SMALL) return 0n;\n\n    const ixIn = Number(!tokenInIsToken0);\n    const ixOut = Number(tokenInIsToken0);\n\n    const calcGiven = tokenInIsToken0 ? calcXGivenY : calcYGivenX;\n\n    if (amountOut > balances[ixOut]) throw new Error('ASSET BOUNDS EXCEEDED 2');\n    const balOutNew = balances[ixOut] - amountOut;\n\n    const balInNew = calcGiven(balOutNew, params, derived, invariant);\n    checkAssetBounds(params, derived, invariant, balInNew, ixIn);\n    const amountIn = balInNew - balances[ixIn];\n\n    if (amountIn < 0)\n        // Should never happen; check anyways to catch a numerical bug.\n        throw new Error('ASSET BOUNDS EXCEEDED 3');\n    return amountIn;\n}\n","import { GyroEPool } from './gyroEPool';\nimport { BasePool, BasePoolFactory } from '../index';\nimport { RawGyroEPool, RawPool } from '../../../data/types';\n\nexport class GyroEPoolFactory implements BasePoolFactory {\n    public isPoolForFactory(pool: RawPool): boolean {\n        return pool.poolType.includes('GyroE');\n    }\n\n    public create(chainId: number, pool: RawPool): BasePool {\n        return GyroEPool.fromRawPool(chainId, pool as RawGyroEPool);\n    }\n}\n","import { BasePool, BasePoolFactory } from '.';\nimport { WeightedPoolFactory } from './weighted';\nimport { StablePoolFactory } from './stable';\nimport { MetaStablePoolFactory } from './metastable';\nimport { LinearPoolFactory } from './linear';\nimport { FxPoolFactory } from './fx';\nimport { Gyro2PoolFactory } from './gyro2';\nimport { Gyro3PoolFactory } from './gyro3/gyro3Factory';\nimport { GyroEPoolFactory } from './gyroE';\nimport { RawPool } from '../../data/types';\n\nexport class PoolParser {\n    private readonly poolFactories: BasePoolFactory[];\n    private readonly chainId: number;\n    constructor(chainId: number, customPoolFactories: BasePoolFactory[]) {\n        this.chainId = chainId;\n        this.poolFactories = [\n            // custom pool factories take precedence over base factories\n            ...customPoolFactories,\n            new WeightedPoolFactory(),\n            new StablePoolFactory(),\n            new MetaStablePoolFactory(),\n            new LinearPoolFactory(),\n            new FxPoolFactory(),\n            new Gyro2PoolFactory(),\n            new Gyro3PoolFactory(),\n            new GyroEPoolFactory(),\n        ];\n    }\n\n    public parseRawPools(rawPools: RawPool[]): BasePool[] {\n        const pools: BasePool[] = [];\n\n        for (const rawPool of rawPools) {\n            for (const factory of this.poolFactories) {\n                if (factory.isPoolForFactory(rawPool)) {\n                    pools.push(factory.create(this.chainId, rawPool));\n\n                    break;\n                }\n            }\n        }\n\n        return pools;\n    }\n}\n","import {\n    GetPoolsResponse,\n    PoolDataEnricher,\n    PoolDataProvider,\n    ProviderSwapOptions,\n    RawPool,\n} from './types';\nimport { createPublicClient, http } from 'viem';\n\nexport class PoolDataService {\n    constructor(\n        private readonly providers: PoolDataProvider[],\n        private readonly enrichers: PoolDataEnricher[],\n        private readonly rpcUrl: string,\n    ) {}\n\n    public async fetchEnrichedPools(\n        blockNumber?: bigint,\n    ): Promise<{ rawPools: RawPool[]; providerData: GetPoolsResponse }> {\n        const providerOptions: ProviderSwapOptions = {\n            block: blockNumber,\n            timestamp: await this.getTimestampForBlockNumber(blockNumber),\n        };\n\n        //TODO: might be necessary to remove duplicates, decide which take precendence\n        const responses = await Promise.all(\n            this.providers.map((provider) =>\n                provider.getPools(providerOptions),\n            ),\n        );\n\n        const providerData: GetPoolsResponse = {\n            pools: responses.flatMap((response) => response.pools),\n            //we take the smallest block number from the set\n            syncedToBlockNumber: responses\n                .map((response) => response.syncedToBlockNumber || 0n)\n                .sort()[0],\n            poolsWithActiveWeightUpdates: responses.flatMap(\n                (response) => response.poolsWithActiveWeightUpdates || [],\n            ),\n            poolsWithActiveAmpUpdates: responses.flatMap(\n                (response) => response.poolsWithActiveAmpUpdates || [],\n            ),\n        };\n\n        return {\n            rawPools: await this.enrichPools(providerData, providerOptions),\n            providerData,\n        };\n    }\n\n    public async enrichPools(\n        data: GetPoolsResponse,\n        providerOptions: ProviderSwapOptions,\n    ) {\n        let pools = data.pools;\n\n        const additionalPoolData = await Promise.all(\n            this.enrichers.map((provider) =>\n                provider.fetchAdditionalPoolData(data, providerOptions),\n            ),\n        );\n\n        // We enrich the pools in order of the enrichers array\n        for (let i = 0; i < this.enrichers.length; i++) {\n            pools = this.enrichers[i].enrichPoolsWithData(\n                pools,\n                additionalPoolData[i],\n            );\n        }\n\n        return pools;\n    }\n\n    public async getTimestampForBlockNumber(blockNumber?: bigint) {\n        if (blockNumber) {\n            const client = createPublicClient({\n                transport: http(this.rpcUrl),\n            });\n\n            return (await client.getBlock({ blockNumber })).timestamp;\n        }\n        return BigInt(Math.floor(new Date().getTime() / 1000));\n    }\n}\n","import { Router } from './router';\nimport { BasePool, Path, Token, TokenAmount, Swap } from './entities';\nimport { ChainId, checkInputs, SUBGRAPH_URLS, BATCHSIZE, VAULT } from './utils';\nimport { SorConfig, SwapInputRawAmount, SwapKind, SwapOptions } from './types';\nimport { PoolParser } from './entities/pools/parser';\nimport { OnChainPoolDataEnricher, SubgraphPoolProvider } from './data';\nimport { PoolDataService } from './data/poolDataService';\nimport { GetPoolsResponse } from './data/types';\n\nexport class SmartOrderRouter {\n    private readonly chainId: ChainId;\n    private readonly router: Router;\n    private readonly poolParser: PoolParser;\n    private readonly poolDataService: PoolDataService;\n    private pools: BasePool[] = [];\n    private blockNumber: bigint | null = null;\n    private poolsProviderData: GetPoolsResponse | null = null;\n\n    constructor({\n        chainId,\n        rpcUrl,\n        poolDataProviders,\n        poolDataEnrichers,\n        customPoolFactories = [],\n    }: SorConfig) {\n        this.chainId = chainId;\n        this.router = new Router();\n        this.poolParser = new PoolParser(chainId, customPoolFactories);\n        poolDataProviders =\n            poolDataProviders ||\n            new SubgraphPoolProvider(chainId, SUBGRAPH_URLS[chainId]);\n        poolDataEnrichers =\n            poolDataEnrichers ||\n            new OnChainPoolDataEnricher(\n                chainId,\n                rpcUrl,\n                BATCHSIZE[chainId],\n                VAULT[chainId],\n            );\n        this.poolDataService = new PoolDataService(\n            Array.isArray(poolDataProviders)\n                ? poolDataProviders\n                : [poolDataProviders],\n            Array.isArray(poolDataEnrichers)\n                ? poolDataEnrichers\n                : [poolDataEnrichers],\n            rpcUrl,\n        );\n    }\n\n    public async fetchAndCachePools(blockNumber?: bigint): Promise<BasePool[]> {\n        const { rawPools, providerData } =\n            await this.poolDataService.fetchEnrichedPools(blockNumber);\n        this.pools = this.poolParser.parseRawPools(rawPools);\n        this.blockNumber = typeof blockNumber === 'bigint' ? blockNumber : null;\n        this.poolsProviderData = providerData;\n\n        return this.pools;\n    }\n\n    public async fetchAndCacheLatestPoolEnrichmentData(blockNumber?: bigint) {\n        if (!this.poolsProviderData) {\n            throw new Error(\n                'fetchAndCacheLatestPoolEnrichmentData can only be called after a successful call to fetchAndCachePools',\n            );\n        }\n\n        const providerOptions = {\n            block: blockNumber,\n            timestamp:\n                await this.poolDataService.getTimestampForBlockNumber(\n                    blockNumber,\n                ),\n        };\n\n        const enriched = await this.poolDataService.enrichPools(\n            this.poolsProviderData,\n            providerOptions,\n        );\n        this.pools = this.poolParser.parseRawPools(enriched);\n    }\n\n    public get isInitialized(): boolean {\n        return this.pools.length > 0;\n    }\n\n    public async getSwaps(\n        tokenIn: Token,\n        tokenOut: Token,\n        swapKind: SwapKind,\n        swapAmount: SwapInputRawAmount | TokenAmount,\n        swapOptions?: SwapOptions,\n    ): Promise<Swap | null> {\n        const checkedSwapAmount = checkInputs(\n            tokenIn,\n            tokenOut,\n            swapKind,\n            swapAmount,\n        );\n        const candidatePaths = await this.getCandidatePaths(\n            tokenIn,\n            tokenOut,\n            swapOptions,\n        );\n\n        if(candidatePaths.length === 0) return null;\n\n        const bestPaths = this.router.getBestPaths(\n            candidatePaths,\n            swapKind,\n            checkedSwapAmount,\n        );\n\n        if (!bestPaths) return null;\n\n        return new Swap({ paths: bestPaths, swapKind });\n    }\n\n    public async getCandidatePaths(\n        tokenIn: Token,\n        tokenOut: Token,\n        options?: Pick<SwapOptions, 'block' | 'graphTraversalConfig'>,\n    ): Promise<Path[]> {\n        // fetch pools if we haven't yet, or if a block number is provided that doesn't match the existing.\n        if (\n            !this.isInitialized ||\n            (options?.block && options.block !== this.blockNumber)\n        ) {\n            await this.fetchAndCachePools(options?.block);\n        }\n\n        return this.router.getCandidatePaths(\n            tokenIn,\n            tokenOut,\n            this.pools,\n            options?.graphTraversalConfig,\n        );\n    }\n}\n","import { RawPool } from './data';\nimport {\n    BasePool,\n    BasePoolFactory,\n    Swap,\n    Token,\n    TokenAmount,\n} from './entities';\nimport { PoolParser } from './entities/pools/parser';\nimport { SwapInputRawAmount, SwapKind, SwapOptions } from './types';\nimport { ChainId, checkInputs } from './utils';\nimport { Router } from './router';\n\nexport function sorParseRawPools(\n    chainId: ChainId,\n    pools: RawPool[],\n    customPoolFactories: BasePoolFactory[] = [],\n): BasePool[] {\n    const poolParser = new PoolParser(chainId, customPoolFactories);\n\n    return poolParser.parseRawPools(pools);\n}\n\nexport async function sorGetSwapsWithPools(\n    tokenIn: Token,\n    tokenOut: Token,\n    swapKind: SwapKind,\n    swapAmount: SwapInputRawAmount | TokenAmount,\n    pools: BasePool[],\n    swapOptions?: Omit<SwapOptions, 'graphTraversalConfig.poolIdsToInclude'>,\n): Promise<Swap | null> {\n    const checkedSwapAmount = checkInputs(\n        tokenIn,\n        tokenOut,\n        swapKind,\n        swapAmount,\n    );\n    const router = new Router();\n\n    const candidatePaths = router.getCandidatePaths(\n        tokenIn,\n        tokenOut,\n        pools,\n        swapOptions?.graphTraversalConfig,\n    );\n\n    if(candidatePaths.length === 0) return null;\n\n    const bestPaths = router.getBestPaths(\n        candidatePaths,\n        swapKind,\n        checkedSwapAmount,\n    );\n\n    if (!bestPaths) return null;\n\n    return new Swap({ paths: bestPaths, swapKind });\n}\n"]}